{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext';\nconst ProtectedRoute = () => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const navigate = useNavigate();\n  const [userData, setUserData] = useState(null);\n  useEffect(() => {\n    // Fetch user data from the backend when the component mounts\n    if (user) {\n      fetchUserData(user.id); // Assuming you have a user ID\n    }\n  }, [user]);\n  const fetchUserData = async userId => {\n    try {\n      // Make a fetch request to your backend to get user data\n      const response = await fetch(`http://localhost:4000/api/v1/users/${userId}`); // Adjust the API endpoint as needed\n      if (response.ok) {\n        const data = await response.json();\n        setUserData(data);\n      } else {\n        // Handle error, e.g., redirect to home or show an error message\n        navigate('/'); // Redirect to the home page if the fetch fails\n      }\n    } catch (error) {\n      console.error('Error fetching user data:', error);\n    }\n  };\n\n  // Check if the user has an \"admin\" role\n  const isAdmin = userData && userData.role === 'admin';\n  if (!user) {\n    // Redirect unauthenticated users to the login page\n    navigate('/login');\n    return null;\n  }\n  if (isAdmin) {\n    // Allow admin users to access the dashboard\n    navigate('/dashboard');\n  }\n  if (!isAdmin && !user) {\n    // For non-admin users, redirect to the home page\n    navigate('/');\n    return null;\n  }\n};\n_s(ProtectedRoute, \"n6e2CGm0v5ZreO2SmP6H4THxdFA=\", false, function () {\n  return [useNavigate];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useContext","useEffect","useState","useNavigate","AuthContext","ProtectedRoute","user","navigate","userData","setUserData","fetchUserData","id","userId","response","fetch","ok","data","json","error","console","isAdmin","role"],"sources":["C:/Users/joelg/Downloads/MernStack-Tour-Management-main/MernStack-Tour-Management-main/tour-management/frontend/src/router/ProtectedRoute.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\nconst ProtectedRoute = () => {\r\n  const { user } = useContext(AuthContext);\r\n  const navigate = useNavigate();\r\n  const [userData, setUserData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch user data from the backend when the component mounts\r\n    if (user) {\r\n      fetchUserData(user.id); // Assuming you have a user ID\r\n    }\r\n  }, [user]);\r\n\r\n  const fetchUserData = async (userId) => {\r\n    try {\r\n      // Make a fetch request to your backend to get user data\r\n      const response = await fetch(`http://localhost:4000/api/v1/users/${userId}`); // Adjust the API endpoint as needed\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setUserData(data);\r\n      } else {\r\n        // Handle error, e.g., redirect to home or show an error message\r\n        navigate('/'); // Redirect to the home page if the fetch fails\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user data:', error);\r\n    }\r\n  };\r\n\r\n  // Check if the user has an \"admin\" role\r\n  const isAdmin = userData && userData.role === 'admin';\r\n\r\n  if (!user) {\r\n    // Redirect unauthenticated users to the login page\r\n    navigate('/login');\r\n    return null;\r\n  }\r\n\r\n  if (isAdmin) {\r\n    // Allow admin users to access the dashboard\r\n    navigate('/dashboard');\r\n  }\r\nif(!isAdmin && !user ){\r\n  // For non-admin users, redirect to the home page\r\n  navigate('/');\r\n  return null;\r\n}\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,wBAAwB;AAEpD,MAAMC,cAAc,GAAG,MAAM;EAAA;EAC3B,MAAM;IAAEC;EAAK,CAAC,GAAGN,UAAU,CAACI,WAAW,CAAC;EACxC,MAAMG,QAAQ,GAAGJ,WAAW,EAAE;EAC9B,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd;IACA,IAAIK,IAAI,EAAE;MACRI,aAAa,CAACJ,IAAI,CAACK,EAAE,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAACL,IAAI,CAAC,CAAC;EAEV,MAAMI,aAAa,GAAG,MAAOE,MAAM,IAAK;IACtC,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sCAAqCF,MAAO,EAAC,CAAC,CAAC,CAAC;MAC9E,IAAIC,QAAQ,CAACE,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;QAClCR,WAAW,CAACO,IAAI,CAAC;MACnB,CAAC,MAAM;QACL;QACAT,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;MACjB;IACF,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;;EAED;EACA,MAAME,OAAO,GAAGZ,QAAQ,IAAIA,QAAQ,CAACa,IAAI,KAAK,OAAO;EAErD,IAAI,CAACf,IAAI,EAAE;IACT;IACAC,QAAQ,CAAC,QAAQ,CAAC;IAClB,OAAO,IAAI;EACb;EAEA,IAAIa,OAAO,EAAE;IACX;IACAb,QAAQ,CAAC,YAAY,CAAC;EACxB;EACF,IAAG,CAACa,OAAO,IAAI,CAACd,IAAI,EAAE;IACpB;IACAC,QAAQ,CAAC,GAAG,CAAC;IACb,OAAO,IAAI;EACb;AACA,CAAC;AAAC,GA9CIF,cAAc;EAAA,QAEDF,WAAW;AAAA;AAAA,KAFxBE,cAAc;AAgDpB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}