{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.resolveSRVRecord = void 0;\nconst dns = require(\"dns\");\nconst fs = require(\"fs\");\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nconst url_1 = require(\"url\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst client_metadata_1 = require(\"./cmap/handshake/client_metadata\");\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\nconst encrypter_1 = require(\"./encrypter\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_logger_1 = require(\"./mongo_logger\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\r\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\r\n * connection string.\r\n *\r\n * @param uri - The connection string to parse\r\n * @param options - Optional user provided connection string options\r\n */\nasync function resolveSRVRecord(options) {\n  if (typeof options.srvHost !== 'string') {\n    throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n  }\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    throw new error_1.MongoAPIError('URI must include hostname, domain name, and tld');\n  }\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  const addresses = await dns.promises.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`);\n  if (addresses.length === 0) {\n    throw new error_1.MongoAPIError('No addresses found at host');\n  }\n  for (const {\n    name\n  } of addresses) {\n    if (!(0, utils_1.matchesParentDomain)(name, lookupAddress)) {\n      throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n    }\n  }\n  const hostAddresses = addresses.map(r => utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n  validateLoadBalancedOptions(hostAddresses, options, true);\n  // Resolve TXT record and add options from there if they exist.\n  let record;\n  try {\n    record = await dns.promises.resolveTxt(lookupAddress);\n  } catch (error) {\n    if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n      throw error;\n    }\n    return hostAddresses;\n  }\n  if (record.length > 1) {\n    throw new error_1.MongoParseError('Multiple text records not allowed');\n  }\n  const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n  const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n  if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n    throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n  }\n  if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n    throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n  }\n  const source = txtRecordOptions.get('authSource') ?? undefined;\n  const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n  const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n  if (!options.userSpecifiedAuthSource && source && options.credentials && !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n    options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n      source\n    });\n  }\n  if (!options.userSpecifiedReplicaSet && replicaSet) {\n    options.replicaSet = replicaSet;\n  }\n  if (loadBalanced === 'true') {\n    options.loadBalanced = true;\n  }\n  if (options.replicaSet && options.srvMaxHosts > 0) {\n    throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n  }\n  validateLoadBalancedOptions(hostAddresses, options, true);\n  return hostAddresses;\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\r\n * Checks if TLS options are valid\r\n *\r\n * @param allOptions - All options provided by user or included in default options map\r\n * @throws MongoAPIError if TLS options are invalid\r\n */\nfunction checkTLSOptions(allOptions) {\n  if (!allOptions) return;\n  const check = (a, b) => {\n    if (allOptions.has(a) && allOptions.has(b)) {\n      throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`);\n    }\n    return true;\n  }\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`);\n    }\n    return false;\n  }\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\nfunction getIntFromOptions(name, value) {\n  const parsedInt = (0, utils_1.parseInteger)(value);\n  if (parsedInt != null) {\n    return parsedInt;\n  }\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUIntFromOptions(name, value) {\n  const parsedValue = getIntFromOptions(name, value);\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\nfunction* entriesFromString(value) {\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(/:(.*)/);\n    if (value == null) {\n      throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n    }\n    yield [key, value];\n  }\n}\nclass CaseInsensitiveMap extends Map {\n  constructor(entries = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  has(k) {\n    return super.has(k.toLowerCase());\n  }\n  get(k) {\n    return super.get(k.toLowerCase());\n  }\n  set(k, v) {\n    return super.set(k.toLowerCase(), v);\n  }\n  delete(k) {\n    return super.delete(k.toLowerCase());\n  }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n  // validate BSONOptions\n  if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n    throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n  if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n    throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n  }\n  const url = new mongodb_connection_string_url_1.default(uri);\n  const {\n    hosts,\n    isSRV\n  } = url;\n  const mongoOptions = Object.create(null);\n  // Feature flags\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (exports.FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  const urlOptions = new CaseInsensitiveMap();\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n  if (url.username !== '') {\n    const auth = {\n      username: decodeURIComponent(url.username)\n    };\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n    urlOptions.set('auth', [auth]);\n  }\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n    if (values.includes('')) {\n      throw new error_1.MongoAPIError('URI cannot contain options with no value');\n    }\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n  const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n  // Validate options that can only be provided by one of uri or object\n  if (urlOptions.has('serverApi')) {\n    throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n  }\n  const uriMechanismProperties = urlOptions.get('authMechanismProperties');\n  if (uriMechanismProperties) {\n    for (const property of uriMechanismProperties) {\n      if (/(^|,)ALLOWED_HOSTS:/.test(property)) {\n        throw new error_1.MongoParseError('Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.');\n      }\n    }\n  }\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n  // All option collection\n  const allProvidedOptions = new CaseInsensitiveMap();\n  const allProvidedKeys = new Set([...urlOptions.keys(), ...objectOptions.keys()]);\n  for (const key of allProvidedKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n    const urlValues = urlOptions.get(key) ?? [];\n    values.push(...urlValues);\n    allProvidedOptions.set(key, values);\n  }\n  const didMapTLSCertificateFile = allProvidedOptions.has('tlsCertificateKeyFile') && !allProvidedOptions.has('tlsCertificateFile');\n  if (didMapTLSCertificateFile) {\n    allProvidedOptions.set('tlsCertificateFile', allProvidedOptions.get('tlsCertificateKeyFile'));\n  }\n  if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n    const tlsAndSslOpts = (allProvidedOptions.get('tls') || []).concat(allProvidedOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n  checkTLSOptions(allProvidedOptions);\n  const unsupportedOptions = (0, utils_1.setDifference)(allProvidedKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n  }\n  // Option parsing and setting\n  for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n    const values = allProvidedOptions.get(key);\n    if (!values || values.length === 0) {\n      if (exports.DEFAULT_OPTIONS.has(key)) {\n        setOption(mongoOptions, key, descriptor, [exports.DEFAULT_OPTIONS.get(key)]);\n      }\n    } else {\n      const {\n        deprecated\n      } = descriptor;\n      const shouldEmitTLSCertificateFileDeprecation = didMapTLSCertificateFile && key === 'tlsCertificateFile';\n      if (deprecated && !shouldEmitTLSCertificateFileDeprecation) {\n        const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n        (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n      }\n      setOption(mongoOptions, key, descriptor, values);\n    }\n  }\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n    const isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n    if ((isGssapi || isX509) && allProvidedOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(`authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`);\n    }\n    if (!(isGssapi || isX509 || isAws || isOidc) && mongoOptions.dbName && !allProvidedOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n    if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n      throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n    }\n    mongoOptions.credentials.validate();\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (mongoOptions.credentials.password === '' && mongoOptions.credentials.username === '' && mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n      delete mongoOptions.credentials;\n    }\n  }\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n  validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n  // Potential SRV Overrides and SRV connection string validations\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') || objectOptions.has('srvMaxHosts') || urlOptions.has('srvServiceName') || objectOptions.has('srvServiceName');\n    if (userSpecifiedSrvOptions) {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n    }\n  }\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new error_1.MongoParseError('directConnection option requires exactly one host');\n  }\n  if (!mongoOptions.proxyHost && (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n    throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n  if (mongoOptions.proxyUsername && !mongoOptions.proxyPassword || !mongoOptions.proxyUsername && mongoOptions.proxyPassword) {\n    throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => urlOptions.get(key) ?? []);\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n  }\n  const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n  mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n  let loggerEnvOptions = {};\n  let loggerClientOptions = {};\n  if (mongoOptions[loggerFeatureFlag]) {\n    loggerEnvOptions = {\n      MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n      MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n      MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n      MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n      MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n      MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n      MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\n      ...mongoOptions[Symbol.for('@@mdb.internalLoggerConfig')]\n    };\n    loggerClientOptions = {\n      mongodbLogPath: mongoOptions.mongodbLogPath\n    };\n  }\n  mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions(loggerEnvOptions, loggerClientOptions);\n  mongoOptions.metadata = (0, client_metadata_1.makeClientMetadata)(mongoOptions);\n  return mongoOptions;\n}\nexports.parseOptions = parseOptions;\n/**\r\n * #### Throws if LB mode is true:\r\n * - hosts contains more than one host\r\n * - there is a replicaSet name set\r\n * - directConnection is set\r\n * - if srvMaxHosts is used when an srv connection string is passed in\r\n *\r\n * @throws MongoParseError\r\n */\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n  const {\n    target,\n    type,\n    transform\n  } = descriptor;\n  const name = target ?? key;\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getIntFromOptions(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUIntFromOptions(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!(0, utils_1.isRecord)(values[0])) {\n        throw new error_1.MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n        const transformValue = transform({\n          name,\n          options: mongoOptions,\n          values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\nexports.OPTIONS = {\n  appName: {\n    type: 'string'\n  },\n  auth: {\n    target: 'credentials',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({\n      options,\n      values: [value]\n    }) {\n      const mechanisms = Object.values(providers_1.AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n      let password = options.credentials?.password;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({\n      options,\n      values\n    }) {\n      // We can have a combination of options passed in the URI and options passed\n      // as an object to the MongoClient. So we must transform the string options\n      // as well as merge them together with a potentially provided object.\n      let mechanismProperties = Object.create(null);\n      for (const optionValue of values) {\n        if (typeof optionValue === 'string') {\n          for (const [key, value] of entriesFromString(optionValue)) {\n            try {\n              mechanismProperties[key] = getBoolean(key, value);\n            } catch {\n              mechanismProperties[key] = value;\n            }\n          }\n        } else {\n          if (!(0, utils_1.isRecord)(optionValue)) {\n            throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n          }\n          mechanismProperties = {\n            ...optionValue\n          };\n        }\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({\n      options,\n      values: [value]\n    }) {\n      const source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({\n      values: [version]\n    }) {\n      const serverApiToValidate = typeof version === 'string' ? {\n        version\n      } : version;\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({\n      values\n    }) {\n      const compressionList = new Set();\n      for (const compVal of values) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n        }\n        for (const c of compValArray) {\n          if (Object.keys(compression_1.Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    default: {},\n    type: 'record'\n  },\n  enableUtf8Validation: {\n    type: 'boolean',\n    default: true\n  },\n  family: {\n    transform({\n      name,\n      values: [value]\n    }) {\n      const transformValue = getIntFromOptions(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  journal: {\n    target: 'writeConcern',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean',\n    deprecated: 'Will not be able to turn off in the future.'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint',\n    deprecated: 'Will not be configurable in the future.'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  maxConnecting: {\n    default: 2,\n    transform({\n      name,\n      values: [value]\n    }) {\n      const maxConnecting = getUIntFromOptions(name, value);\n      if (maxConnecting === 0) {\n        throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const maxStalenessSeconds = getUIntFromOptions(name, value);\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            maxStalenessSeconds\n          }\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds\n        });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({\n      values: [value],\n      options\n    }) {\n      return {\n        ...options.driverInfo,\n        name: String(value)\n      };\n    }\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n    transform({\n      values: [value]\n    }) {\n      if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n      throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n    }\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  useBigInt64: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({\n      values: [value],\n      options\n    }) {\n      if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions({\n          ...options.readConcern,\n          ...value\n        });\n      }\n      throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({\n      values: [level],\n      options\n    }) {\n      return read_concern_1.ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level\n      });\n    }\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n    transform({\n      values: [value],\n      options\n    }) {\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n      }\n      if ((0, utils_1.isRecord)(value, ['mode'])) {\n        const rp = read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n        if (rp) return rp;else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n      }\n      throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({\n      values,\n      options\n    }) {\n      const tags = Array.isArray(values[0]) ? values[0] : values;\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if ((0, utils_1.isRecord)(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    deprecated: 'sslCA is deprecated and will be removed in the next major version. Please use tlsCAFile instead.',\n    target: 'ca',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCRL: {\n    deprecated: 'sslCRL is deprecated and will be removed in the next major version and be replaced by tlsCRLFile in that release.',\n    target: 'crl',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCert: {\n    deprecated: 'sslCert is deprecated and will be removed in the next major version. Please use tlsCertificateKeyFile instead.',\n    target: 'cert',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslKey: {\n    deprecated: 'sslKey is deprecated and will be removed in the next major version. Please use tlsCertificateKeyFile instead.',\n    target: 'key',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslPass: {\n    deprecated: 'sslPass is deprecated and will be removed in the next major version. Please use tlsCertificateKeyFilePassword instead.',\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    deprecated: 'sslValidate is deprecated and will be removed in the next major version. Please use tlsAllowInvalidCertificates instead.',\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({\n      name,\n      values: [value]\n    }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({\n      name,\n      values: [value]\n    }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateFile: {\n    deprecated: 'tlsCertificateFile is deprecated and will be removed in the next major version. Please use tlsCertificateKeyFile instead.',\n    target: 'cert',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? () => undefined : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          w: value\n        }\n      });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n      throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUIntFromOptions('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: {\n    type: 'boolean'\n  },\n  useUnifiedTopology: {\n    type: 'boolean'\n  },\n  // MongoLogger\n  // TODO(NODE-4849): Tighten the type of mongodbLogPath\n  mongodbLogPath: {\n    type: 'any'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(([, descriptor]) => descriptor.default != null).map(([k, d]) => [k, d.default]));\n/**\r\n * Set of permitted feature flags\r\n * @internal\r\n */\nexports.FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect'), Symbol.for('@@mdb.enableMongoLogger'), Symbol.for('@@mdb.internalLoggerConfig')]);","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AAQA;AAKA;AACA;AAEA;AAUA;AAEA,MAAMA,iBAAiB,GAAG,CAAC,YAAY,EAAE,YAAY,EAAE,cAAc,CAAC;AAEtE,MAAMC,oBAAoB,GAAG,kEAAkE;AAC/F,MAAMC,oBAAoB,GAAG,4DAA4D;AACzF,MAAMC,0BAA0B,GAC9B,qEAAqE;AAEvE;;;;;;;AAOO,eAAeC,gBAAgB,CAACC,OAAqB;EAC1D,IAAI,OAAOA,OAAO,CAACC,OAAO,KAAK,QAAQ,EAAE;IACvC,MAAM,IAAIC,qBAAa,CAAC,oCAAoC,CAAC;;EAG/D,IAAIF,OAAO,CAACC,OAAO,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;IACzC;IACA,MAAM,IAAIF,qBAAa,CAAC,iDAAiD,CAAC;;EAG5E;EACA,MAAMG,aAAa,GAAGL,OAAO,CAACC,OAAO;EACrC,MAAMK,SAAS,GAAG,MAAMC,GAAG,CAACC,QAAQ,CAACC,UAAU,CAC7C,IAAIT,OAAO,CAACU,cAAc,SAASL,aAAa,EAAE,CACnD;EAED,IAAIC,SAAS,CAACF,MAAM,KAAK,CAAC,EAAE;IAC1B,MAAM,IAAIF,qBAAa,CAAC,4BAA4B,CAAC;;EAGvD,KAAK,MAAM;IAAES;EAAI,CAAE,IAAIL,SAAS,EAAE;IAChC,IAAI,CAAC,+BAAmB,EAACK,IAAI,EAAEN,aAAa,CAAC,EAAE;MAC7C,MAAM,IAAIH,qBAAa,CAAC,uDAAuD,CAAC;;;EAIpF,MAAMU,aAAa,GAAGN,SAAS,CAACO,GAAG,CAACC,CAAC,IAAIC,mBAAW,CAACC,UAAU,CAAC,GAAGF,CAAC,CAACH,IAAI,IAAIG,CAAC,CAACG,IAAI,IAAI,KAAK,EAAE,CAAC,CAAC;EAEhGC,2BAA2B,CAACN,aAAa,EAAEZ,OAAO,EAAE,IAAI,CAAC;EAEzD;EACA,IAAImB,MAAM;EACV,IAAI;IACFA,MAAM,GAAG,MAAMZ,GAAG,CAACC,QAAQ,CAACY,UAAU,CAACf,aAAa,CAAC;GACtD,CAAC,OAAOgB,KAAK,EAAE;IACd,IAAIA,KAAK,CAACC,IAAI,KAAK,SAAS,IAAID,KAAK,CAACC,IAAI,KAAK,WAAW,EAAE;MAC1D,MAAMD,KAAK;;IAEb,OAAOT,aAAa;;EAGtB,IAAIO,MAAM,CAACf,MAAM,GAAG,CAAC,EAAE;IACrB,MAAM,IAAIF,uBAAe,CAAC,mCAAmC,CAAC;;EAGhE,MAAMqB,gBAAgB,GAAG,IAAIC,qBAAe,CAACL,MAAM,CAAC,CAAC,CAAC,CAACM,IAAI,CAAC,EAAE,CAAC,CAAC;EAChE,MAAMC,mBAAmB,GAAG,CAAC,GAAGH,gBAAgB,CAACI,IAAI,EAAE,CAAC;EACxD,IAAID,mBAAmB,CAACE,IAAI,CAACC,GAAG,IAAI,CAAClC,iBAAiB,CAACmC,QAAQ,CAACD,GAAG,CAAC,CAAC,EAAE;IACrE,MAAM,IAAI3B,uBAAe,CAAC,oCAAoCP,iBAAiB,CAAC8B,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;;EAG/F,IAAI9B,iBAAiB,CAACiC,IAAI,CAACG,MAAM,IAAIR,gBAAgB,CAACS,GAAG,CAACD,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE;IACzE,MAAM,IAAI7B,uBAAe,CAAC,gDAAgD,CAAC;;EAG7E,MAAM+B,MAAM,GAAGV,gBAAgB,CAACS,GAAG,CAAC,YAAY,CAAC,IAAIE,SAAS;EAC9D,MAAMC,UAAU,GAAGZ,gBAAgB,CAACS,GAAG,CAAC,YAAY,CAAC,IAAIE,SAAS;EAClE,MAAME,YAAY,GAAGb,gBAAgB,CAACS,GAAG,CAAC,cAAc,CAAC,IAAIE,SAAS;EAEtE,IACE,CAAClC,OAAO,CAACqC,uBAAuB,IAChCJ,MAAM,IACNjC,OAAO,CAACsC,WAAW,IACnB,CAACC,wCAA4B,CAACC,GAAG,CAACxC,OAAO,CAACsC,WAAW,CAACG,SAAS,CAAC,EAChE;IACAzC,OAAO,CAACsC,WAAW,GAAGI,oCAAgB,CAACC,KAAK,CAAC3C,OAAO,CAACsC,WAAW,EAAE;MAAEL;IAAM,CAAE,CAAC;;EAG/E,IAAI,CAACjC,OAAO,CAAC4C,uBAAuB,IAAIT,UAAU,EAAE;IAClDnC,OAAO,CAACmC,UAAU,GAAGA,UAAU;;EAGjC,IAAIC,YAAY,KAAK,MAAM,EAAE;IAC3BpC,OAAO,CAACoC,YAAY,GAAG,IAAI;;EAG7B,IAAIpC,OAAO,CAACmC,UAAU,IAAInC,OAAO,CAAC6C,WAAW,GAAG,CAAC,EAAE;IACjD,MAAM,IAAI3C,uBAAe,CAAC,mDAAmD,CAAC;;EAGhFgB,2BAA2B,CAACN,aAAa,EAAEZ,OAAO,EAAE,IAAI,CAAC;EAEzD,OAAOY,aAAa;AACtB;AAnFAkC;AAqFA;;;;;;AAMA,SAASC,eAAe,CAACC,UAA8B;EACrD,IAAI,CAACA,UAAU,EAAE;EACjB,MAAMC,KAAK,GAAG,CAACC,CAAS,EAAEC,CAAS,KAAI;IACrC,IAAIH,UAAU,CAACR,GAAG,CAACU,CAAC,CAAC,IAAIF,UAAU,CAACR,GAAG,CAACW,CAAC,CAAC,EAAE;MAC1C,MAAM,IAAIjD,qBAAa,CAAC,QAAQgD,CAAC,qCAAqCC,CAAC,UAAU,CAAC;;EAEtF,CAAC;EACDF,KAAK,CAAC,aAAa,EAAE,6BAA6B,CAAC;EACnDA,KAAK,CAAC,aAAa,EAAE,0BAA0B,CAAC;EAChDA,KAAK,CAAC,aAAa,EAAE,sCAAsC,CAAC;EAC5DA,KAAK,CAAC,aAAa,EAAE,6BAA6B,CAAC;EACnDA,KAAK,CAAC,6BAA6B,EAAE,sCAAsC,CAAC;EAC5EA,KAAK,CAAC,6BAA6B,EAAE,6BAA6B,CAAC;EACnEA,KAAK,CAAC,sCAAsC,EAAE,6BAA6B,CAAC;AAC9E;AAEA,MAAMG,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;AACtD,MAAMC,UAAU,GAAG,IAAID,GAAG,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAChE,SAASE,UAAU,CAAC5C,IAAY,EAAE6C,KAAc;EAC9C,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE,OAAOA,KAAK;EAC5C,MAAMC,WAAW,GAAGC,MAAM,CAACF,KAAK,CAAC,CAACG,WAAW,EAAE;EAC/C,IAAIP,MAAM,CAACZ,GAAG,CAACiB,WAAW,CAAC,EAAE;IAC3B,IAAIA,WAAW,KAAK,MAAM,EAAE;MAC1B,2BAAe,EACb,wBAAwB9C,IAAI,MAAM8C,WAAW,uBAAuB9C,IAAI,iBAAiB,CAC1F;;IAEH,OAAO,IAAI;;EAEb,IAAI2C,UAAU,CAACd,GAAG,CAACiB,WAAW,CAAC,EAAE;IAC/B,IAAIA,WAAW,KAAK,OAAO,EAAE;MAC3B,2BAAe,EACb,wBAAwB9C,IAAI,MAAM8C,WAAW,uBAAuB9C,IAAI,kBAAkB,CAC3F;;IAEH,OAAO,KAAK;;EAEd,MAAM,IAAIT,uBAAe,CAAC,YAAYS,IAAI,0CAA0C6C,KAAK,EAAE,CAAC;AAC9F;AAEA,SAASI,iBAAiB,CAACjD,IAAY,EAAE6C,KAAc;EACrD,MAAMK,SAAS,GAAG,wBAAY,EAACL,KAAK,CAAC;EACrC,IAAIK,SAAS,IAAI,IAAI,EAAE;IACrB,OAAOA,SAAS;;EAElB,MAAM,IAAI3D,uBAAe,CAAC,YAAYS,IAAI,sCAAsC6C,KAAK,EAAE,CAAC;AAC1F;AAEA,SAASM,kBAAkB,CAACnD,IAAY,EAAE6C,KAAc;EACtD,MAAMO,WAAW,GAAGH,iBAAiB,CAACjD,IAAI,EAAE6C,KAAK,CAAC;EAClD,IAAIO,WAAW,GAAG,CAAC,EAAE;IACnB,MAAM,IAAI7D,uBAAe,CAAC,GAAGS,IAAI,2CAA2C6C,KAAK,EAAE,CAAC;;EAEtF,OAAOO,WAAW;AACpB;AAEA,UAAUC,iBAAiB,CAACR,KAAa;EACvC,MAAMS,aAAa,GAAGT,KAAK,CAACrD,KAAK,CAAC,GAAG,CAAC;EACtC,KAAK,MAAM+D,QAAQ,IAAID,aAAa,EAAE;IACpC,MAAM,CAACpC,GAAG,EAAE2B,KAAK,CAAC,GAAGU,QAAQ,CAAC/D,KAAK,CAAC,OAAO,CAAC;IAC5C,IAAIqD,KAAK,IAAI,IAAI,EAAE;MACjB,MAAM,IAAItD,uBAAe,CAAC,iDAAiD,CAAC;;IAG9E,MAAM,CAAC2B,GAAG,EAAE2B,KAAK,CAAC;;AAEtB;AAEA,MAAMW,kBAAgC,SAAQC,GAAkB;EAC9DC,YAAYC,UAAgC,EAAE;IAC5C,KAAK,CAACA,OAAO,CAACzD,GAAG,CAAC,CAAC,CAAC0D,CAAC,EAAEC,CAAC,CAAC,KAAK,CAACD,CAAC,CAACZ,WAAW,EAAE,EAAEa,CAAC,CAAC,CAAC,CAAC;EACtD;EACShC,GAAG,CAAC+B,CAAS;IACpB,OAAO,KAAK,CAAC/B,GAAG,CAAC+B,CAAC,CAACZ,WAAW,EAAE,CAAC;EACnC;EACS3B,GAAG,CAACuC,CAAS;IACpB,OAAO,KAAK,CAACvC,GAAG,CAACuC,CAAC,CAACZ,WAAW,EAAE,CAAC;EACnC;EACSc,GAAG,CAACF,CAAS,EAAEC,CAAM;IAC5B,OAAO,KAAK,CAACC,GAAG,CAACF,CAAC,CAACZ,WAAW,EAAE,EAAEa,CAAC,CAAC;EACtC;EACSE,MAAM,CAACH,CAAS;IACvB,OAAO,KAAK,CAACG,MAAM,CAACH,CAAC,CAACZ,WAAW,EAAE,CAAC;EACtC;;AAGF,SAAgBgB,YAAY,CAC1BC,GAAW,EACXC,cAA4D3C,SAAS,EACrElC,UAA8B,EAAE;EAEhC,IAAI6E,WAAW,IAAI,IAAI,IAAI,EAAEA,WAAW,YAAYC,0BAAW,CAAC,EAAE;IAChE9E,OAAO,GAAG6E,WAAW;IACrBA,WAAW,GAAG3C,SAAS;;EAGzB;EACA,IAAIlC,OAAO,CAAC+E,WAAW,IAAI,OAAO/E,OAAO,CAACgF,YAAY,KAAK,SAAS,IAAI,CAAChF,OAAO,CAACgF,YAAY,EAAE;IAC7F,MAAM,IAAI9E,qBAAa,CAAC,8DAA8D,CAAC;;EAGzF,IAAIF,OAAO,CAAC+E,WAAW,IAAI,OAAO/E,OAAO,CAACiF,aAAa,KAAK,SAAS,IAAI,CAACjF,OAAO,CAACiF,aAAa,EAAE;IAC/F,MAAM,IAAI/E,qBAAa,CAAC,8DAA8D,CAAC;;EAGzF,MAAMgF,GAAG,GAAG,IAAIC,uCAAgB,CAACP,GAAG,CAAC;EACrC,MAAM;IAAEQ,KAAK;IAAEC;EAAK,CAAE,GAAGH,GAAG;EAE5B,MAAMI,YAAY,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAExC;EACA,KAAK,MAAMC,IAAI,IAAIF,MAAM,CAACG,qBAAqB,CAAC1F,OAAO,CAAC,EAAE;IACxD,IAAI8C,qBAAa,CAACN,GAAG,CAACiD,IAAI,CAAC,EAAE;MAC3BH,YAAY,CAACG,IAAI,CAAC,GAAGzF,OAAO,CAACyF,IAAI,CAAC;;;EAItCH,YAAY,CAACF,KAAK,GAAGC,KAAK,GAAG,EAAE,GAAGD,KAAK,CAACvE,GAAG,CAACE,mBAAW,CAACC,UAAU,CAAC;EAEnE,MAAM2E,UAAU,GAAG,IAAIxB,kBAAkB,EAAa;EAEtD,IAAIe,GAAG,CAACU,QAAQ,KAAK,GAAG,IAAIV,GAAG,CAACU,QAAQ,KAAK,EAAE,EAAE;IAC/C,MAAMC,MAAM,GAAGC,kBAAkB,CAC/BZ,GAAG,CAACU,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,GAAGV,GAAG,CAACU,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC,GAAGb,GAAG,CAACU,QAAQ,CAC/D;IACD,IAAIC,MAAM,EAAE;MACVF,UAAU,CAAClB,GAAG,CAAC,QAAQ,EAAE,CAACoB,MAAM,CAAC,CAAC;;;EAItC,IAAIX,GAAG,CAACc,QAAQ,KAAK,EAAE,EAAE;IACvB,MAAMC,IAAI,GAAa;MACrBD,QAAQ,EAAEF,kBAAkB,CAACZ,GAAG,CAACc,QAAQ;KAC1C;IAED,IAAI,OAAOd,GAAG,CAACgB,QAAQ,KAAK,QAAQ,EAAE;MACpCD,IAAI,CAACC,QAAQ,GAAGJ,kBAAkB,CAACZ,GAAG,CAACgB,QAAQ,CAAC;;IAGlDP,UAAU,CAAClB,GAAG,CAAC,MAAM,EAAE,CAACwB,IAAI,CAAC,CAAC;;EAGhC,KAAK,MAAMpE,GAAG,IAAIqD,GAAG,CAACiB,YAAY,CAACxE,IAAI,EAAE,EAAE;IACzC,MAAMyE,MAAM,GAAG,CAAC,GAAGlB,GAAG,CAACiB,YAAY,CAACE,MAAM,CAACxE,GAAG,CAAC,CAAC;IAEhD,IAAIuE,MAAM,CAACtE,QAAQ,CAAC,EAAE,CAAC,EAAE;MACvB,MAAM,IAAI5B,qBAAa,CAAC,0CAA0C,CAAC;;IAGrE,IAAI,CAACyF,UAAU,CAACnD,GAAG,CAACX,GAAG,CAAC,EAAE;MACxB8D,UAAU,CAAClB,GAAG,CAAC5C,GAAG,EAAEuE,MAAM,CAAC;;;EAI/B,MAAME,aAAa,GAAG,IAAInC,kBAAkB,CAC1CoB,MAAM,CAACjB,OAAO,CAACtE,OAAO,CAAC,CAACuG,MAAM,CAAC,CAAC,GAAG/B,CAAC,CAAC,KAAKA,CAAC,IAAI,IAAI,CAAC,CACrD;EAED;EAEA,IAAImB,UAAU,CAACnD,GAAG,CAAC,WAAW,CAAC,EAAE;IAC/B,MAAM,IAAItC,uBAAe,CACvB,qEAAqE,CACtE;;EAGH,MAAMsG,sBAAsB,GAAGb,UAAU,CAAC3D,GAAG,CAAC,yBAAyB,CAAC;EACxE,IAAIwE,sBAAsB,EAAE;IAC1B,KAAK,MAAMC,QAAQ,IAAID,sBAAsB,EAAE;MAC7C,IAAI,qBAAqB,CAACE,IAAI,CAACD,QAAkB,CAAC,EAAE;QAClD,MAAM,IAAIvG,uBAAe,CACvB,gFAAgF,CACjF;;;;EAKP,IAAIoG,aAAa,CAAC9D,GAAG,CAAC,cAAc,CAAC,EAAE;IACrC,MAAM,IAAItC,uBAAe,CAAC,gDAAgD,CAAC;;EAG7E;EAEA,MAAMyG,kBAAkB,GAAG,IAAIxC,kBAAkB,EAAa;EAE9D,MAAMyC,eAAe,GAAG,IAAIvD,GAAG,CAAS,CAAC,GAAGsC,UAAU,CAAChE,IAAI,EAAE,EAAE,GAAG2E,aAAa,CAAC3E,IAAI,EAAE,CAAC,CAAC;EAExF,KAAK,MAAME,GAAG,IAAI+E,eAAe,EAAE;IACjC,MAAMR,MAAM,GAAG,EAAE;IACjB,MAAMS,iBAAiB,GAAGP,aAAa,CAACtE,GAAG,CAACH,GAAG,CAAC;IAChD,IAAIgF,iBAAiB,IAAI,IAAI,EAAE;MAC7BT,MAAM,CAACU,IAAI,CAACD,iBAAiB,CAAC;;IAGhC,MAAME,SAAS,GAAGpB,UAAU,CAAC3D,GAAG,CAACH,GAAG,CAAC,IAAI,EAAE;IAC3CuE,MAAM,CAACU,IAAI,CAAC,GAAGC,SAAS,CAAC;IACzBJ,kBAAkB,CAAClC,GAAG,CAAC5C,GAAG,EAAEuE,MAAM,CAAC;;EAGrC,MAAMY,wBAAwB,GAC5BL,kBAAkB,CAACnE,GAAG,CAAC,uBAAuB,CAAC,IAC/C,CAACmE,kBAAkB,CAACnE,GAAG,CAAC,oBAAoB,CAAC;EAC/C,IAAIwE,wBAAwB,EAAE;IAC5BL,kBAAkB,CAAClC,GAAG,CAAC,oBAAoB,EAAEkC,kBAAkB,CAAC3E,GAAG,CAAC,uBAAuB,CAAC,CAAC;;EAG/F,IAAI2E,kBAAkB,CAACnE,GAAG,CAAC,KAAK,CAAC,IAAImE,kBAAkB,CAACnE,GAAG,CAAC,KAAK,CAAC,EAAE;IAClE,MAAMyE,aAAa,GAAG,CAACN,kBAAkB,CAAC3E,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,EACvDkF,MAAM,CAACP,kBAAkB,CAAC3E,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAC3CnB,GAAG,CAAC0C,UAAU,CAAC4D,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACxC,IAAI,IAAI9D,GAAG,CAAC4D,aAAa,CAAC,CAACG,IAAI,KAAK,CAAC,EAAE;MACrC,MAAM,IAAIlH,uBAAe,CAAC,yCAAyC,CAAC;;;EAIxE6C,eAAe,CAAC4D,kBAAkB,CAAC;EAEnC,MAAMU,kBAAkB,GAAG,yBAAa,EACtCT,eAAe,EACfU,KAAK,CAACC,IAAI,CAAChC,MAAM,CAAC5D,IAAI,CAACmB,eAAO,CAAC,CAAC,CAACjC,GAAG,CAAC2G,CAAC,IAAIA,CAAC,CAAC7D,WAAW,EAAE,CAAC,CAC3D;EACD,IAAI0D,kBAAkB,CAACD,IAAI,KAAK,CAAC,EAAE;IACjC,MAAMK,UAAU,GAAGJ,kBAAkB,CAACD,IAAI,GAAG,CAAC,GAAG,SAAS,GAAG,QAAQ;IACrE,MAAMM,OAAO,GAAGL,kBAAkB,CAACD,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI;IAC1D,MAAM,IAAIlH,uBAAe,CACvB,GAAGuH,UAAU,IAAIH,KAAK,CAACC,IAAI,CAACF,kBAAkB,CAAC,CAAC5F,IAAI,CAAC,IAAI,CAAC,IAAIiG,OAAO,gBAAgB,CACtF;;EAGH;EAEA,KAAK,MAAM,CAAC7F,GAAG,EAAE8F,UAAU,CAAC,IAAIpC,MAAM,CAACjB,OAAO,CAACxB,eAAO,CAAC,EAAE;IACvD,MAAMsD,MAAM,GAAGO,kBAAkB,CAAC3E,GAAG,CAACH,GAAG,CAAC;IAC1C,IAAI,CAACuE,MAAM,IAAIA,MAAM,CAAChG,MAAM,KAAK,CAAC,EAAE;MAClC,IAAI0C,uBAAe,CAACN,GAAG,CAACX,GAAG,CAAC,EAAE;QAC5B+F,SAAS,CAACtC,YAAY,EAAEzD,GAAG,EAAE8F,UAAU,EAAE,CAAC7E,uBAAe,CAACd,GAAG,CAACH,GAAG,CAAC,CAAC,CAAC;;KAEvE,MAAM;MACL,MAAM;QAAEgG;MAAU,CAAE,GAAGF,UAAU;MACjC,MAAMG,uCAAuC,GAC3Cd,wBAAwB,IAAInF,GAAG,KAAK,oBAAoB;MAC1D,IAAIgG,UAAU,IAAI,CAACC,uCAAuC,EAAE;QAC1D,MAAMC,aAAa,GAAG,OAAOF,UAAU,KAAK,QAAQ,GAAG,KAAKA,UAAU,EAAE,GAAG,EAAE;QAC7E,uBAAW,EAAC,GAAGhG,GAAG,0BAA0BkG,aAAa,EAAE,CAAC;;MAG9DH,SAAS,CAACtC,YAAY,EAAEzD,GAAG,EAAE8F,UAAU,EAAEvB,MAAM,CAAC;;;EAIpD,IAAId,YAAY,CAAChD,WAAW,EAAE;IAC5B,MAAM0F,QAAQ,GAAG1C,YAAY,CAAChD,WAAW,CAACG,SAAS,KAAKF,yBAAa,CAAC0F,cAAc;IACpF,MAAMC,MAAM,GAAG5C,YAAY,CAAChD,WAAW,CAACG,SAAS,KAAKF,yBAAa,CAAC4F,YAAY;IAChF,MAAMC,KAAK,GAAG9C,YAAY,CAAChD,WAAW,CAACG,SAAS,KAAKF,yBAAa,CAAC8F,WAAW;IAC9E,MAAMC,MAAM,GAAGhD,YAAY,CAAChD,WAAW,CAACG,SAAS,KAAKF,yBAAa,CAACgG,YAAY;IAChF,IACE,CAACP,QAAQ,IAAIE,MAAM,KACnBvB,kBAAkB,CAACnE,GAAG,CAAC,YAAY,CAAC,IACpC8C,YAAY,CAAChD,WAAW,CAACL,MAAM,KAAK,WAAW,EAC/C;MACA;MACA,MAAM,IAAI/B,uBAAe,CACvB,iBAAiBoF,YAAY,CAAChD,WAAW,CAACG,SAAS,wCAAwC,CAC5F;;IAGH,IACE,EAAEuF,QAAQ,IAAIE,MAAM,IAAIE,KAAK,IAAIE,MAAM,CAAC,IACxChD,YAAY,CAACO,MAAM,IACnB,CAACc,kBAAkB,CAACnE,GAAG,CAAC,YAAY,CAAC,EACrC;MACA;MACA;MACA8C,YAAY,CAAChD,WAAW,GAAGI,oCAAgB,CAACC,KAAK,CAAC2C,YAAY,CAAChD,WAAW,EAAE;QAC1EL,MAAM,EAAEqD,YAAY,CAACO;OACtB,CAAC;;IAGJ,IAAIuC,KAAK,IAAI9C,YAAY,CAAChD,WAAW,CAAC0D,QAAQ,IAAI,CAACV,YAAY,CAAChD,WAAW,CAAC4D,QAAQ,EAAE;MACpF,MAAM,IAAIhG,oCAA4B,CACpC,cAAcoF,YAAY,CAAChD,WAAW,CAACG,SAAS,oDAAoD,CACrG;;IAGH6C,YAAY,CAAChD,WAAW,CAACkG,QAAQ,EAAE;IAEnC;IACA,IACElD,YAAY,CAAChD,WAAW,CAAC4D,QAAQ,KAAK,EAAE,IACxCZ,YAAY,CAAChD,WAAW,CAAC0D,QAAQ,KAAK,EAAE,IACxCV,YAAY,CAAChD,WAAW,CAACG,SAAS,KAAKF,yBAAa,CAACkG,eAAe,IACpElD,MAAM,CAAC5D,IAAI,CAAC2D,YAAY,CAAChD,WAAW,CAACoG,mBAAmB,CAAC,CAACtI,MAAM,KAAK,CAAC,EACtE;MACA,OAAOkF,YAAY,CAAChD,WAAW;;;EAInC,IAAI,CAACgD,YAAY,CAACO,MAAM,EAAE;IACxB;IACAP,YAAY,CAACO,MAAM,GAAG,MAAM;;EAG9B3E,2BAA2B,CAACkE,KAAK,EAAEE,YAAY,EAAED,KAAK,CAAC;EAEvD,IAAIR,WAAW,IAAIS,YAAY,CAACqD,cAAc,EAAE;IAC9CC,qBAAS,CAACC,kBAAkB,EAAE;IAC9BvD,YAAY,CAACwD,SAAS,GAAG,IAAIF,qBAAS,CAAC/D,WAAW,EAAED,GAAG,EAAE5E,OAAO,CAAC;IACjEsF,YAAY,CAACyD,aAAa,GAAGzD,YAAY,CAACwD,SAAS,CAACC,aAAa;;EAGnE;EAEAzD,YAAY,CAACjD,uBAAuB,GAClCiE,aAAa,CAAC9D,GAAG,CAAC,YAAY,CAAC,IAAImD,UAAU,CAACnD,GAAG,CAAC,YAAY,CAAC;EACjE8C,YAAY,CAAC1C,uBAAuB,GAClC0D,aAAa,CAAC9D,GAAG,CAAC,YAAY,CAAC,IAAImD,UAAU,CAACnD,GAAG,CAAC,YAAY,CAAC;EAEjE,IAAI6C,KAAK,EAAE;IACT;IACAC,YAAY,CAACrF,OAAO,GAAGmF,KAAK,CAAC,CAAC,CAAC;IAE/B,IAAIE,YAAY,CAAC0D,gBAAgB,EAAE;MACjC,MAAM,IAAI9I,qBAAa,CAAC,2CAA2C,CAAC;;IAGtE,IAAIoF,YAAY,CAACzC,WAAW,GAAG,CAAC,IAAI,OAAOyC,YAAY,CAACnD,UAAU,KAAK,QAAQ,EAAE;MAC/E,MAAM,IAAIjC,uBAAe,CAAC,+CAA+C,CAAC;;IAG5E;IACA,MAAM+I,kBAAkB,GAAG,CAAC3C,aAAa,CAAC9D,GAAG,CAAC,KAAK,CAAC,IAAI,CAACmD,UAAU,CAACnD,GAAG,CAAC,KAAK,CAAC;IAC9E,MAAM0G,kBAAkB,GAAG,CAAC5C,aAAa,CAAC9D,GAAG,CAAC,KAAK,CAAC,IAAI,CAACmD,UAAU,CAACnD,GAAG,CAAC,KAAK,CAAC;IAC9E,IAAIyG,kBAAkB,IAAIC,kBAAkB,EAAE;MAC5C5D,YAAY,CAAC6D,GAAG,GAAG,IAAI;;GAE1B,MAAM;IACL,MAAMC,uBAAuB,GAC3BzD,UAAU,CAACnD,GAAG,CAAC,aAAa,CAAC,IAC7B8D,aAAa,CAAC9D,GAAG,CAAC,aAAa,CAAC,IAChCmD,UAAU,CAACnD,GAAG,CAAC,gBAAgB,CAAC,IAChC8D,aAAa,CAAC9D,GAAG,CAAC,gBAAgB,CAAC;IAErC,IAAI4G,uBAAuB,EAAE;MAC3B,MAAM,IAAIlJ,uBAAe,CACvB,2EAA2E,CAC5E;;;EAIL,IAAIoF,YAAY,CAAC0D,gBAAgB,IAAI1D,YAAY,CAACF,KAAK,CAAChF,MAAM,KAAK,CAAC,EAAE;IACpE,MAAM,IAAIF,uBAAe,CAAC,mDAAmD,CAAC;;EAGhF,IACE,CAACoF,YAAY,CAAC+D,SAAS,KACtB/D,YAAY,CAACgE,SAAS,IAAIhE,YAAY,CAACiE,aAAa,IAAIjE,YAAY,CAACkE,aAAa,CAAC,EACpF;IACA,MAAM,IAAItJ,uBAAe,CAAC,0DAA0D,CAAC;;EAGvF,IACGoF,YAAY,CAACiE,aAAa,IAAI,CAACjE,YAAY,CAACkE,aAAa,IACzD,CAAClE,YAAY,CAACiE,aAAa,IAAIjE,YAAY,CAACkE,aAAc,EAC3D;IACA,MAAM,IAAItJ,uBAAe,CAAC,6DAA6D,CAAC;;EAG1F,MAAMuJ,YAAY,GAAG,CAAC,WAAW,EAAE,WAAW,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC5I,GAAG,CACnFgB,GAAG,IAAI8D,UAAU,CAAC3D,GAAG,CAACH,GAAG,CAAC,IAAI,EAAE,CACjC;EAED,IAAI4H,YAAY,CAAC7H,IAAI,CAAC5B,OAAO,IAAIA,OAAO,CAACI,MAAM,GAAG,CAAC,CAAC,EAAE;IACpD,MAAM,IAAIF,uBAAe,CACvB,2EAA2E,CAC5E;;EAGH,MAAMwJ,iBAAiB,GAAGC,MAAM,CAACC,GAAG,CAAC,yBAAyB,CAAC;EAC/DtE,YAAY,CAACoE,iBAAiB,CAAC,GAAGpE,YAAY,CAACoE,iBAAiB,CAAC,IAAI,KAAK;EAE1E,IAAIG,gBAAgB,GAA0B,EAAE;EAChD,IAAIC,mBAAmB,GAAkC,EAAE;EAC3D,IAAIxE,YAAY,CAACoE,iBAAiB,CAAC,EAAE;IACnCG,gBAAgB,GAAG;MACjBE,mBAAmB,EAAEC,OAAO,CAACC,GAAG,CAACF,mBAAmB;MACpDG,oBAAoB,EAAEF,OAAO,CAACC,GAAG,CAACC,oBAAoB;MACtDC,4BAA4B,EAAEH,OAAO,CAACC,GAAG,CAACE,4BAA4B;MACtEC,sBAAsB,EAAEJ,OAAO,CAACC,GAAG,CAACG,sBAAsB;MAC1DC,eAAe,EAAEL,OAAO,CAACC,GAAG,CAACI,eAAe;MAC5CC,+BAA+B,EAAEN,OAAO,CAACC,GAAG,CAACK,+BAA+B;MAC5EC,gBAAgB,EAAEP,OAAO,CAACC,GAAG,CAACM,gBAAgB;MAC9C,GAAGjF,YAAY,CAACqE,MAAM,CAACC,GAAG,CAAC,4BAA4B,CAAC;KACzD;IACDE,mBAAmB,GAAG;MACpBU,cAAc,EAAElF,YAAY,CAACkF;KAC9B;;EAEHlF,YAAY,CAACmF,kBAAkB,GAAGC,0BAAW,CAACC,cAAc,CAC1Dd,gBAAgB,EAChBC,mBAAmB,CACpB;EAEDxE,YAAY,CAACsF,QAAQ,GAAG,wCAAkB,EAACtF,YAAY,CAAC;EAExD,OAAOA,YAAY;AACrB;AA/TAxC;AAiUA;;;;;;;;;AASA,SAAS5B,2BAA2B,CAClCkE,KAA+B,EAC/BE,YAA0B,EAC1BuF,KAAc;EAEd,IAAIvF,YAAY,CAAClD,YAAY,EAAE;IAC7B,IAAIgD,KAAK,CAAChF,MAAM,GAAG,CAAC,EAAE;MACpB,MAAM,IAAIF,uBAAe,CAACN,oBAAoB,CAAC;;IAEjD,IAAI0F,YAAY,CAACnD,UAAU,EAAE;MAC3B,MAAM,IAAIjC,uBAAe,CAACL,oBAAoB,CAAC;;IAEjD,IAAIyF,YAAY,CAAC0D,gBAAgB,EAAE;MACjC,MAAM,IAAI9I,uBAAe,CAACJ,0BAA0B,CAAC;;IAGvD,IAAI+K,KAAK,IAAIvF,YAAY,CAACzC,WAAW,GAAG,CAAC,EAAE;MACzC,MAAM,IAAI3C,uBAAe,CAAC,kDAAkD,CAAC;;;EAGjF;AACF;AAEA,SAAS0H,SAAS,CAChBtC,YAAiB,EACjBzD,GAAW,EACX8F,UAA4B,EAC5BvB,MAAiB;EAEjB,MAAM;IAAE0E,MAAM;IAAEC,IAAI;IAAEC;EAAS,CAAE,GAAGrD,UAAU;EAC9C,MAAMhH,IAAI,GAAGmK,MAAM,IAAIjJ,GAAG;EAE1B,QAAQkJ,IAAI;IACV,KAAK,SAAS;MACZzF,YAAY,CAAC3E,IAAI,CAAC,GAAG4C,UAAU,CAAC5C,IAAI,EAAEyF,MAAM,CAAC,CAAC,CAAC,CAAC;MAChD;IACF,KAAK,KAAK;MACRd,YAAY,CAAC3E,IAAI,CAAC,GAAGiD,iBAAiB,CAACjD,IAAI,EAAEyF,MAAM,CAAC,CAAC,CAAC,CAAC;MACvD;IACF,KAAK,MAAM;MACTd,YAAY,CAAC3E,IAAI,CAAC,GAAGmD,kBAAkB,CAACnD,IAAI,EAAEyF,MAAM,CAAC,CAAC,CAAC,CAAC;MACxD;IACF,KAAK,QAAQ;MACX,IAAIA,MAAM,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;QACrB;;MAEFd,YAAY,CAAC3E,IAAI,CAAC,GAAG+C,MAAM,CAAC0C,MAAM,CAAC,CAAC,CAAC,CAAC;MACtC;IACF,KAAK,QAAQ;MACX,IAAI,CAAC,oBAAQ,EAACA,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;QACxB,MAAM,IAAIlG,uBAAe,CAAC,GAAGS,IAAI,oBAAoB,CAAC;;MAExD2E,YAAY,CAAC3E,IAAI,CAAC,GAAGyF,MAAM,CAAC,CAAC,CAAC;MAC9B;IACF,KAAK,KAAK;MACRd,YAAY,CAAC3E,IAAI,CAAC,GAAGyF,MAAM,CAAC,CAAC,CAAC;MAC9B;IACF;MAAS;QACP,IAAI,CAAC4E,SAAS,EAAE;UACd,MAAM,IAAI9K,uBAAe,CAAC,oDAAoD,CAAC;;QAEjF,MAAM+K,cAAc,GAAGD,SAAS,CAAC;UAAErK,IAAI;UAAEX,OAAO,EAAEsF,YAAY;UAAEc;QAAM,CAAE,CAAC;QACzEd,YAAY,CAAC3E,IAAI,CAAC,GAAGsK,cAAc;QACnC;;EACD;AAEL;AAgBanI,eAAO,GAAG;EACrBoI,OAAO,EAAE;IACPH,IAAI,EAAE;GACP;EACD9E,IAAI,EAAE;IACJ6E,MAAM,EAAE,aAAa;IACrBE,SAAS,CAAC;MAAErK,IAAI;MAAEX,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,IAAI,CAAC,oBAAQ,EAACA,KAAK,EAAE,CAAC,UAAU,EAAE,UAAU,CAAU,CAAC,EAAE;QACvD,MAAM,IAAItD,uBAAe,CACvB,GAAGS,IAAI,8DAA8D,CACtE;;MAEH,OAAO+B,oCAAgB,CAACC,KAAK,CAAC3C,OAAO,CAACsC,WAAW,EAAE;QACjD0D,QAAQ,EAAExC,KAAK,CAACwC,QAAQ;QACxBE,QAAQ,EAAE1C,KAAK,CAAC0C;OACjB,CAAC;IACJ;GACD;EACDiF,aAAa,EAAE;IACbL,MAAM,EAAE,aAAa;IACrBE,SAAS,CAAC;MAAEhL,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACpC,MAAM4H,UAAU,GAAG7F,MAAM,CAACa,MAAM,CAAC7D,yBAAa,CAAC;MAC/C,MAAM,CAACE,SAAS,CAAC,GAAG2I,UAAU,CAAC7E,MAAM,CAAC8E,CAAC,IAAIA,CAAC,CAACC,KAAK,CAACC,MAAM,CAAC7H,MAAM,CAAC8H,GAAG,KAAKhI,KAAK,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;MAC1F,IAAI,CAACf,SAAS,EAAE;QACd,MAAM,IAAIvC,uBAAe,CAAC,wBAAwBkL,UAAU,SAAS5H,KAAK,EAAE,CAAC;;MAE/E,IAAIvB,MAAM,GAAGjC,OAAO,CAACsC,WAAW,EAAEL,MAAM;MACxC,IACEQ,SAAS,KAAKF,yBAAa,CAACkJ,aAAa,IACzClJ,wCAA4B,CAACC,GAAG,CAACC,SAAS,CAAC,EAC3C;QACA;QACAR,MAAM,GAAG,WAAW;;MAGtB,IAAIiE,QAAQ,GAAGlG,OAAO,CAACsC,WAAW,EAAE4D,QAAQ;MAC5C,IAAIzD,SAAS,KAAKF,yBAAa,CAAC4F,YAAY,IAAIjC,QAAQ,KAAK,EAAE,EAAE;QAC/DA,QAAQ,GAAGhE,SAAS;;MAEtB,OAAOQ,oCAAgB,CAACC,KAAK,CAAC3C,OAAO,CAACsC,WAAW,EAAE;QACjDG,SAAS;QACTR,MAAM;QACNiE;OACD,CAAC;IACJ;GACD;EACDwF,uBAAuB,EAAE;IACvBZ,MAAM,EAAE,aAAa;IACrBE,SAAS,CAAC;MAAEhL,OAAO;MAAEoG;IAAM,CAAE;MAC3B;MACA;MACA;MACA,IAAIsC,mBAAmB,GAAGnD,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;MAE7C,KAAK,MAAMmG,WAAW,IAAIvF,MAAM,EAAE;QAChC,IAAI,OAAOuF,WAAW,KAAK,QAAQ,EAAE;UACnC,KAAK,MAAM,CAAC9J,GAAG,EAAE2B,KAAK,CAAC,IAAIQ,iBAAiB,CAAC2H,WAAW,CAAC,EAAE;YACzD,IAAI;cACFjD,mBAAmB,CAAC7G,GAAG,CAAC,GAAG0B,UAAU,CAAC1B,GAAG,EAAE2B,KAAK,CAAC;aAClD,CAAC,MAAM;cACNkF,mBAAmB,CAAC7G,GAAG,CAAC,GAAG2B,KAAK;;;SAGrC,MAAM;UACL,IAAI,CAAC,oBAAQ,EAACmI,WAAW,CAAC,EAAE;YAC1B,MAAM,IAAIzL,uBAAe,CAAC,2CAA2C,CAAC;;UAExEwI,mBAAmB,GAAG;YAAE,GAAGiD;UAAW,CAAE;;;MAG5C,OAAOjJ,oCAAgB,CAACC,KAAK,CAAC3C,OAAO,CAACsC,WAAW,EAAE;QACjDoG;OACD,CAAC;IACJ;GACD;EACDkD,UAAU,EAAE;IACVd,MAAM,EAAE,aAAa;IACrBE,SAAS,CAAC;MAAEhL,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACpC,MAAMvB,MAAM,GAAGyB,MAAM,CAACF,KAAK,CAAC;MAC5B,OAAOd,oCAAgB,CAACC,KAAK,CAAC3C,OAAO,CAACsC,WAAW,EAAE;QAAEL;MAAM,CAAE,CAAC;IAChE;GACD;EACD0G,cAAc,EAAE;IACdoC,IAAI,EAAE;GACP;EACDc,UAAU,EAAE;IACVd,IAAI,EAAE;GACP;EACDe,SAAS,EAAE;IACThB,MAAM,EAAE,WAAW;IACnBE,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC2F,OAAO;IAAC,CAAE;MAC7B,MAAMC,mBAAmB,GACvB,OAAOD,OAAO,KAAK,QAAQ,GAAI;QAAEA;MAAO,CAAgB,GAAIA,OAAqB;MACnF,MAAME,iBAAiB,GAAGD,mBAAmB,IAAIA,mBAAmB,CAACD,OAAO;MAC5E,IAAI,CAACE,iBAAiB,EAAE;QACtB,MAAM,IAAI/L,uBAAe,CACvB,qFAAqFqF,MAAM,CAACa,MAAM,CAChGtB,+BAAgB,CACjB,CAACrD,IAAI,CAAC,MAAM,CAAC,IAAI,CACnB;;MAEH,IAAI,CAAC8D,MAAM,CAACa,MAAM,CAACtB,+BAAgB,CAAC,CAAClD,IAAI,CAAC4C,CAAC,IAAIA,CAAC,KAAKyH,iBAAiB,CAAC,EAAE;QACvE,MAAM,IAAI/L,uBAAe,CACvB,8BAA8B+L,iBAAiB,sCAAsC1G,MAAM,CAACa,MAAM,CAChGtB,+BAAgB,CACjB,CAACrD,IAAI,CAAC,MAAM,CAAC,IAAI,CACnB;;MAEH,OAAOuK,mBAAmB;IAC5B;GACD;EACDE,SAAS,EAAE;IACTnB,IAAI,EAAE;GACP;EACDoB,WAAW,EAAE;IACXC,OAAO,EAAE,MAAM;IACftB,MAAM,EAAE,aAAa;IACrBE,SAAS,CAAC;MAAE5E;IAAM,CAAE;MAClB,MAAMiG,eAAe,GAAG,IAAIhJ,GAAG,EAAE;MACjC,KAAK,MAAMiJ,OAAO,IAAIlG,MAAuC,EAAE;QAC7D,MAAMmG,YAAY,GAAG,OAAOD,OAAO,KAAK,QAAQ,GAAGA,OAAO,CAACnM,KAAK,CAAC,GAAG,CAAC,GAAGmM,OAAO;QAC/E,IAAI,CAAChF,KAAK,CAACkF,OAAO,CAACD,YAAY,CAAC,EAAE;UAChC,MAAM,IAAIrM,iCAAyB,CACjC,mEAAmE,CACpE;;QAEH,KAAK,MAAMuM,CAAC,IAAIF,YAAY,EAAE;UAC5B,IAAIhH,MAAM,CAAC5D,IAAI,CAAC+K,wBAAU,CAAC,CAAC5K,QAAQ,CAAC4B,MAAM,CAAC+I,CAAC,CAAC,CAAC,EAAE;YAC/CJ,eAAe,CAACM,GAAG,CAACjJ,MAAM,CAAC+I,CAAC,CAAC,CAAC;WAC/B,MAAM;YACL,MAAM,IAAIvM,iCAAyB,CACjC,GAAGuM,CAAC,0DAA0DlH,MAAM,CAAC5D,IAAI,CACvE+K,wBAAU,CACX,GAAG,CACL;;;;MAIP,OAAO,CAAC,GAAGL,eAAe,CAAC;IAC7B;GACD;EACDO,gBAAgB,EAAE;IAChBR,OAAO,EAAE,KAAK;IACdrB,IAAI,EAAE;GACP;EACDlF,MAAM,EAAE;IACNkF,IAAI,EAAE;GACP;EACD/B,gBAAgB,EAAE;IAChBoD,OAAO,EAAE,KAAK;IACdrB,IAAI,EAAE;GACP;EACD8B,UAAU,EAAE;IACVT,OAAO,EAAE,EAAE;IACXrB,IAAI,EAAE;GACP;EACD+B,oBAAoB,EAAE;IAAE/B,IAAI,EAAE,SAAS;IAAEqB,OAAO,EAAE;EAAI,CAAE;EACxDW,MAAM,EAAE;IACN/B,SAAS,CAAC;MAAErK,IAAI;MAAEyF,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACjC,MAAMyH,cAAc,GAAGrH,iBAAiB,CAACjD,IAAI,EAAE6C,KAAK,CAAC;MACrD,IAAIyH,cAAc,KAAK,CAAC,IAAIA,cAAc,KAAK,CAAC,EAAE;QAChD,OAAOA,cAAc;;MAEvB,MAAM,IAAI/K,uBAAe,CAAC,sCAAsC+K,cAAc,GAAG,CAAC;IACpF;GACD;EACD+B,WAAW,EAAE;IACXjC,IAAI,EAAE;GACP;EACDkC,mBAAmB,EAAE;IACnBb,OAAO,EAAE,KAAK;IACdrB,IAAI,EAAE;GACP;EACDmC,KAAK,EAAE;IACLrF,UAAU,EAAE,4BAA4B;IACxCiD,MAAM,EAAE,cAAc;IACtBE,SAAS,CAAC;MAAErK,IAAI;MAAEX,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,MAAM2J,EAAE,GAAGC,4BAAY,CAACC,WAAW,CAAC;QAClCC,YAAY,EAAE;UACZ,GAAGtN,OAAO,CAACsN,YAAY;UACvBJ,KAAK,EAAE3J,UAAU,CAAC5C,IAAI,EAAE6C,KAAK;;OAEhC,CAAC;MACF,IAAI,CAAC2J,EAAE,EAAE,MAAM,IAAIjN,uBAAe,CAAC,4CAA4CsD,KAAK,EAAE,CAAC;MACvF,OAAO2J,EAAE;IACX;GACmB;EACrBI,oBAAoB,EAAE;IACpBnB,OAAO,EAAE,KAAK;IACdrB,IAAI,EAAE;GACP;EACDyC,eAAe,EAAE;IACfzC,IAAI,EAAE;GACP;EACD0C,CAAC,EAAE;IACD5F,UAAU,EAAE,4BAA4B;IACxCiD,MAAM,EAAE,cAAc;IACtBE,SAAS,CAAC;MAAErK,IAAI;MAAEX,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,MAAM2J,EAAE,GAAGC,4BAAY,CAACC,WAAW,CAAC;QAClCC,YAAY,EAAE;UACZ,GAAGtN,OAAO,CAACsN,YAAY;UACvBI,OAAO,EAAEnK,UAAU,CAAC5C,IAAI,EAAE6C,KAAK;;OAElC,CAAC;MACF,IAAI,CAAC2J,EAAE,EAAE,MAAM,IAAIjN,uBAAe,CAAC,8CAA8CsD,KAAK,EAAE,CAAC;MACzF,OAAO2J,EAAE;IACX;GACmB;EACrBO,OAAO,EAAE;IACP5C,MAAM,EAAE,cAAc;IACtBE,SAAS,CAAC;MAAErK,IAAI;MAAEX,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,MAAM2J,EAAE,GAAGC,4BAAY,CAACC,WAAW,CAAC;QAClCC,YAAY,EAAE;UACZ,GAAGtN,OAAO,CAACsN,YAAY;UACvBI,OAAO,EAAEnK,UAAU,CAAC5C,IAAI,EAAE6C,KAAK;;OAElC,CAAC;MACF,IAAI,CAAC2J,EAAE,EAAE,MAAM,IAAIjN,uBAAe,CAAC,8CAA8CsD,KAAK,EAAE,CAAC;MACzF,OAAO2J,EAAE;IACX;GACD;EACDQ,SAAS,EAAE;IACTvB,OAAO,EAAE,IAAI;IACbrB,IAAI,EAAE,SAAS;IACflD,UAAU,EAAE;GACb;EACD+F,qBAAqB,EAAE;IACrBxB,OAAO,EAAE,MAAM;IACfrB,IAAI,EAAE,MAAM;IACZlD,UAAU,EAAE;GACb;EACDzF,YAAY,EAAE;IACZgK,OAAO,EAAE,KAAK;IACdrB,IAAI,EAAE;GACP;EACD8C,gBAAgB,EAAE;IAChBzB,OAAO,EAAE,EAAE;IACXrB,IAAI,EAAE;GACP;EACD+C,aAAa,EAAE;IACb1B,OAAO,EAAE,CAAC;IACVpB,SAAS,CAAC;MAAErK,IAAI;MAAEyF,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACjC,MAAMsK,aAAa,GAAGhK,kBAAkB,CAACnD,IAAI,EAAE6C,KAAK,CAAC;MACrD,IAAIsK,aAAa,KAAK,CAAC,EAAE;QACvB,MAAM,IAAI5N,iCAAyB,CAAC,wCAAwC,CAAC;;MAE/E,OAAO4N,aAAa;IACtB;GACD;EACDC,aAAa,EAAE;IACb3B,OAAO,EAAE,CAAC;IACVrB,IAAI,EAAE;GACP;EACDiD,WAAW,EAAE;IACX5B,OAAO,EAAE,GAAG;IACZrB,IAAI,EAAE;GACP;EACDkD,mBAAmB,EAAE;IACnBnD,MAAM,EAAE,gBAAgB;IACxBE,SAAS,CAAC;MAAErK,IAAI;MAAEX,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,MAAMyK,mBAAmB,GAAGnK,kBAAkB,CAACnD,IAAI,EAAE6C,KAAK,CAAC;MAC3D,IAAIxD,OAAO,CAACkO,cAAc,EAAE;QAC1B,OAAOC,gCAAc,CAACd,WAAW,CAAC;UAChCa,cAAc,EAAE;YAAE,GAAGlO,OAAO,CAACkO,cAAc;YAAED;UAAmB;SACjE,CAAC;OACH,MAAM;QACL,OAAO,IAAIE,gCAAc,CAAC,WAAW,EAAEjM,SAAS,EAAE;UAAE+L;QAAmB,CAAE,CAAC;;IAE9E;GACD;EACDG,qBAAqB,EAAE;IACrBrD,IAAI,EAAE;GACP;EACDsD,WAAW,EAAE;IACXjC,OAAO,EAAE,CAAC;IACVrB,IAAI,EAAE;GACP;EACDuD,uBAAuB,EAAE;IACvBlC,OAAO,EAAE,GAAG;IACZrB,IAAI,EAAE;GACP;EACDwD,eAAe,EAAE;IACfnC,OAAO,EAAE,KAAK;IACdrB,IAAI,EAAE;GACP;EACDpK,IAAI,EAAE;IACJmK,MAAM,EAAE,YAAY;IACpBE,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAExD;IAAO,CAAE;MACpC,OAAO;QAAE,GAAGA,OAAO,CAAC6M,UAAU;QAAElM,IAAI,EAAE+C,MAAM,CAACF,KAAK;MAAC,CAAE;IACvD;GACmB;EACrBgL,OAAO,EAAE;IACPpC,OAAO,EAAE,IAAI;IACbrB,IAAI,EAAE;GACP;EACD0D,SAAS,EAAE;IACTrC,OAAO,EAAErL,0BAAkB;IAC3BiK,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,IAAI,oBAAQ,EAACA,KAAK,EAAE,CAAC,UAAU,CAAU,CAAC,IAAI,OAAOA,KAAK,CAACkL,QAAQ,KAAK,UAAU,EAAE;QAClF,OAAOlL,KAAkB;;MAE3B,MAAM,IAAItD,uBAAe,CACvB,oEAAoEsD,KAAK,EAAE,CAC5E;IACH;GACD;EACDmL,cAAc,EAAE;IACd5D,IAAI,EAAE;GACP;EACD/F,YAAY,EAAE;IACZ+F,IAAI,EAAE;GACP;EACD9F,aAAa,EAAE;IACb8F,IAAI,EAAE;GACP;EACDhG,WAAW,EAAE;IACXgG,IAAI,EAAE;GACP;EACD1B,SAAS,EAAE;IACT0B,IAAI,EAAE;GACP;EACDvB,aAAa,EAAE;IACbuB,IAAI,EAAE;GACP;EACDzB,SAAS,EAAE;IACTyB,IAAI,EAAE;GACP;EACDxB,aAAa,EAAE;IACbwB,IAAI,EAAE;GACP;EACDS,GAAG,EAAE;IACHY,OAAO,EAAE,KAAK;IACdrB,IAAI,EAAE;GACP;EACD6D,WAAW,EAAE;IACX5D,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAExD;IAAO,CAAE;MACpC,IAAIwD,KAAK,YAAYqL,0BAAW,IAAI,oBAAQ,EAACrL,KAAK,EAAE,CAAC,OAAO,CAAU,CAAC,EAAE;QACvE,OAAOqL,0BAAW,CAACxB,WAAW,CAAC;UAAE,GAAGrN,OAAO,CAAC4O,WAAW;UAAE,GAAGpL;QAAK,CAAS,CAAC;;MAE7E,MAAM,IAAItD,uBAAe,CAAC,sCAAsC4O,IAAI,CAACC,SAAS,CAACvL,KAAK,CAAC,EAAE,CAAC;IAC1F;GACD;EACDwL,gBAAgB,EAAE;IAChBlE,MAAM,EAAE,aAAa;IACrBE,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC6I,KAAK,CAAC;MAAEjP;IAAO,CAAE;MACpC,OAAO6O,0BAAW,CAACxB,WAAW,CAAC;QAC7B,GAAGrN,OAAO,CAAC4O,WAAW;QACtBK,KAAK,EAAEA;OACR,CAAC;IACJ;GACD;EACDf,cAAc,EAAE;IACd9B,OAAO,EAAE+B,gCAAc,CAACe,OAAO;IAC/BlE,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAExD;IAAO,CAAE;MACpC,IAAIwD,KAAK,YAAY2K,gCAAc,EAAE;QACnC,OAAOA,gCAAc,CAACd,WAAW,CAAC;UAChCa,cAAc,EAAE;YAAE,GAAGlO,OAAO,CAACkO,cAAc;YAAE,GAAG1K;UAAK,CAAE;UACvD,GAAGA;SACG,CAAC;;MAEX,IAAI,oBAAQ,EAACA,KAAK,EAAE,CAAC,MAAM,CAAU,CAAC,EAAE;QACtC,MAAM2L,EAAE,GAAGhB,gCAAc,CAACd,WAAW,CAAC;UACpCa,cAAc,EAAE;YAAE,GAAGlO,OAAO,CAACkO,cAAc;YAAE,GAAG1K;UAAK,CAAE;UACvD,GAAGA;SACG,CAAC;QACT,IAAI2L,EAAE,EAAE,OAAOA,EAAE,CAAC,KACb,MAAM,IAAIjP,uBAAe,CAAC,oCAAoC4O,IAAI,CAACC,SAAS,CAACvL,KAAK,CAAC,EAAE,CAAC;;MAE7F,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC7B,MAAM4L,MAAM,GAAG;UACbC,KAAK,EAAErP,OAAO,CAACkO,cAAc,EAAEmB,KAAK;UACpCpB,mBAAmB,EAAEjO,OAAO,CAACkO,cAAc,EAAED;SAC9C;QACD,OAAO,IAAIE,gCAAc,CACvB3K,KAA2B,EAC3BxD,OAAO,CAACkO,cAAc,EAAEoB,IAAI,EAC5BF,MAAM,CACP;;MAEH,MAAM,IAAIlP,uBAAe,CAAC,iCAAiCsD,KAAK,EAAE,CAAC;IACrE;GACD;EACD+L,kBAAkB,EAAE;IAClBzE,MAAM,EAAE,gBAAgB;IACxBE,SAAS,CAAC;MACR5E,MAAM;MACNpG;IAAO,CAIR;MACC,MAAMsP,IAAI,GAA2ChI,KAAK,CAACkF,OAAO,CAACpG,MAAM,CAAC,CAAC,CAAC,CAAC,GACzEA,MAAM,CAAC,CAAC,CAAC,GACRA,MAAwB;MAC7B,MAAMmJ,kBAAkB,GAAG,EAAE;MAC7B,KAAK,MAAMC,GAAG,IAAIF,IAAI,EAAE;QACtB,MAAMG,iBAAiB,GAAWlK,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QACrD,IAAI,OAAOgK,GAAG,KAAK,QAAQ,EAAE;UAC3B,KAAK,MAAM,CAACjL,CAAC,EAAEC,CAAC,CAAC,IAAIR,iBAAiB,CAACwL,GAAG,CAAC,EAAE;YAC3CC,iBAAiB,CAAClL,CAAC,CAAC,GAAGC,CAAC;;;QAG5B,IAAI,oBAAQ,EAACgL,GAAG,CAAC,EAAE;UACjB,KAAK,MAAM,CAACjL,CAAC,EAAEC,CAAC,CAAC,IAAIe,MAAM,CAACjB,OAAO,CAACkL,GAAG,CAAC,EAAE;YACxCC,iBAAiB,CAAClL,CAAC,CAAC,GAAGC,CAAC;;;QAG5B+K,kBAAkB,CAACzI,IAAI,CAAC2I,iBAAiB,CAAC;;MAE5C,OAAOtB,gCAAc,CAACd,WAAW,CAAC;QAChCa,cAAc,EAAElO,OAAO,CAACkO,cAAc;QACtCqB;OACD,CAAC;IACJ;GACD;EACDpN,UAAU,EAAE;IACV4I,IAAI,EAAE;GACP;EACD2E,UAAU,EAAE;IACVtD,OAAO,EAAE,IAAI;IACbrB,IAAI,EAAE;GACP;EACD4E,WAAW,EAAE;IACXvD,OAAO,EAAE,IAAI;IACbrB,IAAI,EAAE;GACP;EACD6E,kBAAkB,EAAE;IAClB7E,IAAI,EAAE;GACP;EACD8E,wBAAwB,EAAE;IACxBzD,OAAO,EAAE,KAAK;IACdrB,IAAI,EAAE;GACP;EACD+E,UAAU,EAAE;IACV/E,IAAI,EAAE;GACP;EACDgF,eAAe,EAAE;IACf3D,OAAO,EAAE,CAAC;IACVrB,IAAI,EAAE;GACP;EACDlI,WAAW,EAAE;IACXkI,IAAI,EAAE,MAAM;IACZqB,OAAO,EAAE;GACV;EACD1L,cAAc,EAAE;IACdqK,IAAI,EAAE,QAAQ;IACdqB,OAAO,EAAE;GACV;EACD4D,GAAG,EAAE;IACHlF,MAAM,EAAE,KAAK;IACbC,IAAI,EAAE;GACP;EACDkF,KAAK,EAAE;IACLpI,UAAU,EACR,kGAAkG;IACpGiD,MAAM,EAAE,IAAI;IACZE,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,OAAO0M,EAAE,CAACC,YAAY,CAACzM,MAAM,CAACF,KAAK,CAAC,EAAE;QAAE4M,QAAQ,EAAE;MAAO,CAAE,CAAC;IAC9D;GACD;EACDC,MAAM,EAAE;IACNxI,UAAU,EACR,mHAAmH;IACrHiD,MAAM,EAAE,KAAK;IACbE,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,OAAO0M,EAAE,CAACC,YAAY,CAACzM,MAAM,CAACF,KAAK,CAAC,EAAE;QAAE4M,QAAQ,EAAE;MAAO,CAAE,CAAC;IAC9D;GACD;EACDE,OAAO,EAAE;IACPzI,UAAU,EACR,gHAAgH;IAClHiD,MAAM,EAAE,MAAM;IACdE,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,OAAO0M,EAAE,CAACC,YAAY,CAACzM,MAAM,CAACF,KAAK,CAAC,EAAE;QAAE4M,QAAQ,EAAE;MAAO,CAAE,CAAC;IAC9D;GACD;EACDG,MAAM,EAAE;IACN1I,UAAU,EACR,+GAA+G;IACjHiD,MAAM,EAAE,KAAK;IACbE,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,OAAO0M,EAAE,CAACC,YAAY,CAACzM,MAAM,CAACF,KAAK,CAAC,EAAE;QAAE4M,QAAQ,EAAE;MAAO,CAAE,CAAC;IAC9D;GACD;EACDI,OAAO,EAAE;IACP3I,UAAU,EACR,wHAAwH;IAC1HiD,MAAM,EAAE,YAAY;IACpBC,IAAI,EAAE;GACP;EACD0F,WAAW,EAAE;IACX5I,UAAU,EACR,0HAA0H;IAC5HiD,MAAM,EAAE,oBAAoB;IAC5BC,IAAI,EAAE;GACP;EACD5B,GAAG,EAAE;IACH4B,IAAI,EAAE;GACP;EACD2F,2BAA2B,EAAE;IAC3B5F,MAAM,EAAE,oBAAoB;IAC5BE,SAAS,CAAC;MAAErK,IAAI;MAAEyF,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACjC;MACA,OAAO,CAACD,UAAU,CAAC5C,IAAI,EAAE6C,KAAK,CAAC;IACjC;GACD;EACDmN,wBAAwB,EAAE;IACxB7F,MAAM,EAAE,qBAAqB;IAC7BE,SAAS,CAAC;MAAErK,IAAI;MAAEyF,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MACjC;MACA,OAAOD,UAAU,CAAC5C,IAAI,EAAE6C,KAAK,CAAC,GAAG,MAAMtB,SAAS,GAAGA,SAAS;IAC9D;GACD;EACD0O,SAAS,EAAE;IACT9F,MAAM,EAAE,IAAI;IACZE,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,OAAO0M,EAAE,CAACC,YAAY,CAACzM,MAAM,CAACF,KAAK,CAAC,EAAE;QAAE4M,QAAQ,EAAE;MAAO,CAAE,CAAC;IAC9D;GACD;EACDS,kBAAkB,EAAE;IAClBhJ,UAAU,EACR,2HAA2H;IAC7HiD,MAAM,EAAE,MAAM;IACdE,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,OAAO0M,EAAE,CAACC,YAAY,CAACzM,MAAM,CAACF,KAAK,CAAC,EAAE;QAAE4M,QAAQ,EAAE;MAAO,CAAE,CAAC;IAC9D;GACD;EACDU,qBAAqB,EAAE;IACrBhG,MAAM,EAAE,KAAK;IACbE,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC3B,OAAO0M,EAAE,CAACC,YAAY,CAACzM,MAAM,CAACF,KAAK,CAAC,EAAE;QAAE4M,QAAQ,EAAE;MAAO,CAAE,CAAC;IAC9D;GACD;EACDW,6BAA6B,EAAE;IAC7BjG,MAAM,EAAE,YAAY;IACpBC,IAAI,EAAE;GACP;EACDiG,WAAW,EAAE;IACXhG,SAAS,CAAC;MAAErK,IAAI;MAAEX,OAAO;MAAEoG,MAAM,EAAE,CAAC5C,KAAK;IAAC,CAAE;MAC1C,MAAMwN,WAAW,GAAGzN,UAAU,CAAC5C,IAAI,EAAE6C,KAAK,CAAC;MAC3C,IAAIwN,WAAW,EAAE;QACfhR,OAAO,CAACiR,mBAAmB,GAAG,MAAM/O,SAAS;QAC7ClC,OAAO,CAACkR,kBAAkB,GAAG,KAAK;OACnC,MAAM;QACLlR,OAAO,CAACiR,mBAAmB,GAAGjR,OAAO,CAAC2Q,wBAAwB,GAC1D,MAAMzO,SAAS,GACfA,SAAS;QACblC,OAAO,CAACkR,kBAAkB,GAAGlR,OAAO,CAAC0Q,2BAA2B,GAAG,KAAK,GAAG,IAAI;;MAEjF,OAAOM,WAAW;IACpB;GACD;EACDG,CAAC,EAAE;IACDrG,MAAM,EAAE,cAAc;IACtBE,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAExD;IAAO,CAAE;MACpC,OAAOoN,4BAAY,CAACC,WAAW,CAAC;QAAEC,YAAY,EAAE;UAAE,GAAGtN,OAAO,CAACsN,YAAY;UAAE6D,CAAC,EAAE3N;QAAU;MAAE,CAAE,CAAC;IAC/F;GACD;EACD4N,kBAAkB,EAAE;IAClBhF,OAAO,EAAE,CAAC;IACVrB,IAAI,EAAE;GACP;EACDuC,YAAY,EAAE;IACZxC,MAAM,EAAE,cAAc;IACtBE,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAExD;IAAO,CAAE;MACpC,IAAI,oBAAQ,EAACwD,KAAK,CAAC,IAAIA,KAAK,YAAY4J,4BAAY,EAAE;QACpD,OAAOA,4BAAY,CAACC,WAAW,CAAC;UAC9BC,YAAY,EAAE;YACZ,GAAGtN,OAAO,CAACsN,YAAY;YACvB,GAAG9J;;SAEN,CAAC;OACH,MAAM,IAAIA,KAAK,KAAK,UAAU,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC5D,OAAO4J,4BAAY,CAACC,WAAW,CAAC;UAC9BC,YAAY,EAAE;YACZ,GAAGtN,OAAO,CAACsN,YAAY;YACvB6D,CAAC,EAAE3N;;SAEN,CAAC;;MAGJ,MAAM,IAAItD,uBAAe,CAAC,sCAAsC4O,IAAI,CAACC,SAAS,CAACvL,KAAK,CAAC,EAAE,CAAC;IAC1F;GACD;EACD6N,QAAQ,EAAE;IACRxJ,UAAU,EAAE,+BAA+B;IAC3CiD,MAAM,EAAE,cAAc;IACtBE,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAExD;IAAO,CAAE;MACpC,MAAMmN,EAAE,GAAGC,4BAAY,CAACC,WAAW,CAAC;QAClCC,YAAY,EAAE;UACZ,GAAGtN,OAAO,CAACsN,YAAY;UACvB+D,QAAQ,EAAEvN,kBAAkB,CAAC,UAAU,EAAEN,KAAK;;OAEjD,CAAC;MACF,IAAI2J,EAAE,EAAE,OAAOA,EAAE;MACjB,MAAM,IAAIjN,uBAAe,CAAC,wCAAwC,CAAC;IACrE;GACmB;EACrBoR,UAAU,EAAE;IACVxG,MAAM,EAAE,cAAc;IACtBE,SAAS,CAAC;MAAE5E,MAAM,EAAE,CAAC5C,KAAK,CAAC;MAAExD;IAAO,CAAE;MACpC,MAAMmN,EAAE,GAAGC,4BAAY,CAACC,WAAW,CAAC;QAClCC,YAAY,EAAE;UACZ,GAAGtN,OAAO,CAACsN,YAAY;UACvBgE,UAAU,EAAExN,kBAAkB,CAAC,YAAY,EAAEN,KAAK;;OAErD,CAAC;MACF,IAAI2J,EAAE,EAAE,OAAOA,EAAE;MACjB,MAAM,IAAIjN,uBAAe,CAAC,wCAAwC,CAAC;IACrE;GACD;EACDqR,oBAAoB,EAAE;IACpBnF,OAAO,EAAE,CAAC;IACVrB,IAAI,EAAE;GACP;EACD;EACAyG,cAAc,EAAE;IAAEzG,IAAI,EAAE;EAAK,CAAE;EAC/B0G,SAAS,EAAE;IAAE1G,IAAI,EAAE;EAAK,CAAE;EAC1B;EACA2G,SAAS,EAAE;IAAE3G,IAAI,EAAE;EAAK,CAAE;EAC1B4G,WAAW,EAAE;IAAE5G,IAAI,EAAE;EAAK,CAAE;EAC5B6G,aAAa,EAAE;IAAE7G,IAAI,EAAE;EAAK,CAAE;EAC9B8G,WAAW,EAAE;IAAE9G,IAAI,EAAE;EAAK,CAAE;EAC5B+G,WAAW,EAAE;IAAE/G,IAAI,EAAE;EAAK,CAAE;EAC5BmG,kBAAkB,EAAE;IAAEnG,IAAI,EAAE;EAAK,CAAE;EACnCkG,mBAAmB,EAAE;IAAElG,IAAI,EAAE;EAAK,CAAE;EACpCgH,aAAa,EAAE;IAAEhH,IAAI,EAAE;EAAK,CAAE;EAC9BiH,WAAW,EAAE;IAAEjH,IAAI,EAAE;EAAK,CAAE;EAC5BkH,OAAO,EAAE;IAAElH,IAAI,EAAE;EAAK,CAAE;EACxBmH,WAAW,EAAE;IAAEnH,IAAI,EAAE;EAAK,CAAE;EAC5BoH,YAAY,EAAE;IAAEpH,IAAI,EAAE;EAAK,CAAE;EAC7BqH,SAAS,EAAE;IAAErH,IAAI,EAAE;EAAK,CAAE;EAC1BsH,KAAK,EAAE;IAAEtH,IAAI,EAAE;EAAK,CAAE;EACtBuH,MAAM,EAAE;IAAEvH,IAAI,EAAE;EAAK,CAAE;EACvBwH,EAAE,EAAE;IAAExH,IAAI,EAAE;EAAK,CAAE;EACnByH,IAAI,EAAE;IAAEzH,IAAI,EAAE;EAAK,CAAE;EACrB0H,OAAO,EAAE;IAAE1H,IAAI,EAAE;EAAK,CAAE;EACxB2H,GAAG,EAAE;IAAE3H,IAAI,EAAE;EAAK,CAAE;EACpB4H,SAAS,EAAE;IAAE5H,IAAI,EAAE;EAAK,CAAE;EAC1BlJ,GAAG,EAAE;IAAEkJ,IAAI,EAAE;EAAK,CAAE;EACpB6H,UAAU,EAAE;IAAE7H,IAAI,EAAE;EAAK,CAAE;EAC3B8H,GAAG,EAAE;IAAE9H,IAAI,EAAE;EAAK,CAAE;EACpB+H,cAAc,EAAE;IAAE/H,IAAI,EAAE;EAAK,CAAE;EAC/BgI,KAAK,EAAE;IAAEhI,IAAI,EAAE;EAAK,CAAE;EACtB;EACAiI,eAAe,EAAE;IAAEjI,IAAI,EAAE;EAAS,CAAsB;EACxDkI,kBAAkB,EAAE;IAAElI,IAAI,EAAE;EAAS,CAAsB;EAC3D;EACA;EACAP,cAAc,EAAE;IAAEO,IAAI,EAAE;EAAK;CACwB;AAE1CjI,uBAAe,GAAG,IAAIqB,kBAAkB,CACnDoB,MAAM,CAACjB,OAAO,CAACxB,eAAO,CAAC,CACpByD,MAAM,CAAC,CAAC,GAAGoB,UAAU,CAAC,KAAKA,UAAU,CAACyE,OAAO,IAAI,IAAI,CAAC,CACtDvL,GAAG,CAAC,CAAC,CAAC0D,CAAC,EAAE2O,CAAC,CAAC,KAAK,CAAC3O,CAAC,EAAE2O,CAAC,CAAC9G,OAAO,CAAC,CAAC,CACnC;AAED;;;;AAIatJ,qBAAa,GAAG,IAAIO,GAAG,CAAC,CACnCsG,MAAM,CAACC,GAAG,CAAC,yBAAyB,CAAC,EACrCD,MAAM,CAACC,GAAG,CAAC,yBAAyB,CAAC,EACrCD,MAAM,CAACC,GAAG,CAAC,4BAA4B,CAAC,CACzC,CAAC","names":["VALID_TXT_RECORDS","LB_SINGLE_HOST_ERROR","LB_REPLICA_SET_ERROR","LB_DIRECT_CONNECTION_ERROR","resolveSRVRecord","options","srvHost","error_1","split","length","lookupAddress","addresses","dns","promises","resolveSrv","srvServiceName","name","hostAddresses","map","r","utils_1","fromString","port","validateLoadBalancedOptions","record","resolveTxt","error","code","txtRecordOptions","url_1","join","txtRecordOptionKeys","keys","some","key","includes","option","get","source","undefined","replicaSet","loadBalanced","userSpecifiedAuthSource","credentials","providers_1","has","mechanism","mongo_credentials_1","merge","userSpecifiedReplicaSet","srvMaxHosts","exports","checkTLSOptions","allOptions","check","a","b","TRUTHS","Set","FALSEHOODS","getBoolean","value","valueString","String","toLowerCase","getIntFromOptions","parsedInt","getUIntFromOptions","parsedValue","entriesFromString","keyValuePairs","keyValue","CaseInsensitiveMap","Map","constructor","entries","k","v","set","delete","parseOptions","uri","mongoClient","mongo_client_1","useBigInt64","promoteLongs","promoteValues","url","mongodb_connection_string_url_1","hosts","isSRV","mongoOptions","Object","create","flag","getOwnPropertySymbols","urlOptions","pathname","dbName","decodeURIComponent","slice","username","auth","password","searchParams","values","getAll","objectOptions","filter","uriMechanismProperties","property","test","allProvidedOptions","allProvidedKeys","objectOptionValue","push","urlValues","didMapTLSCertificateFile","tlsAndSslOpts","concat","bind","size","unsupportedOptions","Array","from","s","optionWord","isOrAre","descriptor","setOption","deprecated","shouldEmitTLSCertificateFileDeprecation","deprecatedMsg","isGssapi","MONGODB_GSSAPI","isX509","MONGODB_X509","isAws","MONGODB_AWS","isOidc","MONGODB_OIDC","validate","MONGODB_DEFAULT","mechanismProperties","autoEncryption","encrypter_1","checkForMongoCrypt","encrypter","autoEncrypter","directConnection","noUserSpecifiedTLS","noUserSpecifiedSSL","tls","userSpecifiedSrvOptions","proxyHost","proxyPort","proxyUsername","proxyPassword","proxyOptions","loggerFeatureFlag","Symbol","for","loggerEnvOptions","loggerClientOptions","MONGODB_LOG_COMMAND","process","env","MONGODB_LOG_TOPOLOGY","MONGODB_LOG_SERVER_SELECTION","MONGODB_LOG_CONNECTION","MONGODB_LOG_ALL","MONGODB_LOG_MAX_DOCUMENT_LENGTH","MONGODB_LOG_PATH","mongodbLogPath","mongoLoggerOptions","mongo_logger_1","resolveOptions","metadata","isSrv","target","type","transform","transformValue","appName","authMechanism","mechanisms","m","match","RegExp","raw","MONGODB_PLAIN","authMechanismProperties","optionValue","authSource","bsonRegExp","serverApi","version","serverApiToValidate","versionToValidate","checkKeys","compressors","default","compressionList","compVal","compValArray","isArray","c","compression_1","add","connectTimeoutMS","driverInfo","enableUtf8Validation","family","fieldsAsRaw","forceServerObjectId","fsync","wc","write_concern_1","fromOptions","writeConcern","heartbeatFrequencyMS","ignoreUndefined","j","journal","keepAlive","keepAliveInitialDelay","localThresholdMS","maxConnecting","maxIdleTimeMS","maxPoolSize","maxStalenessSeconds","readPreference","read_preference_1","minInternalBufferSize","minPoolSize","minHeartbeatFrequencyMS","monitorCommands","noDelay","pkFactory","createPk","promoteBuffers","readConcern","read_concern_1","JSON","stringify","readConcernLevel","level","primary","rp","rpOpts","hedge","tags","readPreferenceTags","tag","readPreferenceTag","retryReads","retryWrites","serializeFunctions","serverSelectionTimeoutMS","servername","socketTimeoutMS","ssl","sslCA","fs","readFileSync","encoding","sslCRL","sslCert","sslKey","sslPass","sslValidate","tlsAllowInvalidCertificates","tlsAllowInvalidHostnames","tlsCAFile","tlsCertificateFile","tlsCertificateKeyFile","tlsCertificateKeyFilePassword","tlsInsecure","checkServerIdentity","rejectUnauthorized","w","waitQueueTimeoutMS","wtimeout","wtimeoutMS","zlibCompressionLevel","connectionType","srvPoller","minDHSize","pskCallback","secureContext","enableTrace","requestCert","ALPNProtocols","SNICallback","session","requestOCSP","localAddress","localPort","hints","lookup","ca","cert","ciphers","crl","ecdhCurve","passphrase","pfx","secureProtocol","index","useNewUrlParser","useUnifiedTopology","d"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\connection_string.ts"],"sourcesContent":["import * as dns from 'dns';\r\nimport * as fs from 'fs';\r\nimport ConnectionString from 'mongodb-connection-string-url';\r\nimport { URLSearchParams } from 'url';\r\n\r\nimport type { Document } from './bson';\r\nimport { MongoCredentials } from './cmap/auth/mongo_credentials';\r\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './cmap/auth/providers';\r\nimport { makeClientMetadata } from './cmap/handshake/client_metadata';\r\nimport { Compressor, type CompressorName } from './cmap/wire_protocol/compression';\r\nimport { Encrypter } from './encrypter';\r\nimport {\r\n  MongoAPIError,\r\n  MongoInvalidArgumentError,\r\n  MongoMissingCredentialsError,\r\n  MongoParseError\r\n} from './error';\r\nimport {\r\n  MongoClient,\r\n  type MongoClientOptions,\r\n  type MongoOptions,\r\n  type PkFactory,\r\n  type ServerApi,\r\n  ServerApiVersion\r\n} from './mongo_client';\r\nimport {\r\n  MongoLogger,\r\n  type MongoLoggerEnvOptions,\r\n  type MongoLoggerMongoClientOptions\r\n} from './mongo_logger';\r\nimport { ReadConcern, type ReadConcernLevel } from './read_concern';\r\nimport { ReadPreference, type ReadPreferenceMode } from './read_preference';\r\nimport type { TagSet } from './sdam/server_description';\r\nimport {\r\n  DEFAULT_PK_FACTORY,\r\n  emitWarning,\r\n  emitWarningOnce,\r\n  HostAddress,\r\n  isRecord,\r\n  matchesParentDomain,\r\n  parseInteger,\r\n  setDifference\r\n} from './utils';\r\nimport { type W, WriteConcern } from './write_concern';\r\n\r\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\r\n\r\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\r\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\r\nconst LB_DIRECT_CONNECTION_ERROR =\r\n  'loadBalanced option not supported when directConnection is provided';\r\n\r\n/**\r\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\r\n * connection string.\r\n *\r\n * @param uri - The connection string to parse\r\n * @param options - Optional user provided connection string options\r\n */\r\nexport async function resolveSRVRecord(options: MongoOptions): Promise<HostAddress[]> {\r\n  if (typeof options.srvHost !== 'string') {\r\n    throw new MongoAPIError('Option \"srvHost\" must not be empty');\r\n  }\r\n\r\n  if (options.srvHost.split('.').length < 3) {\r\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\r\n    throw new MongoAPIError('URI must include hostname, domain name, and tld');\r\n  }\r\n\r\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\r\n  const lookupAddress = options.srvHost;\r\n  const addresses = await dns.promises.resolveSrv(\r\n    `_${options.srvServiceName}._tcp.${lookupAddress}`\r\n  );\r\n\r\n  if (addresses.length === 0) {\r\n    throw new MongoAPIError('No addresses found at host');\r\n  }\r\n\r\n  for (const { name } of addresses) {\r\n    if (!matchesParentDomain(name, lookupAddress)) {\r\n      throw new MongoAPIError('Server record does not share hostname with parent URI');\r\n    }\r\n  }\r\n\r\n  const hostAddresses = addresses.map(r => HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\r\n\r\n  validateLoadBalancedOptions(hostAddresses, options, true);\r\n\r\n  // Resolve TXT record and add options from there if they exist.\r\n  let record;\r\n  try {\r\n    record = await dns.promises.resolveTxt(lookupAddress);\r\n  } catch (error) {\r\n    if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\r\n      throw error;\r\n    }\r\n    return hostAddresses;\r\n  }\r\n\r\n  if (record.length > 1) {\r\n    throw new MongoParseError('Multiple text records not allowed');\r\n  }\r\n\r\n  const txtRecordOptions = new URLSearchParams(record[0].join(''));\r\n  const txtRecordOptionKeys = [...txtRecordOptions.keys()];\r\n  if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\r\n    throw new MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\r\n  }\r\n\r\n  if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\r\n    throw new MongoParseError('Cannot have empty URI params in DNS TXT Record');\r\n  }\r\n\r\n  const source = txtRecordOptions.get('authSource') ?? undefined;\r\n  const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\r\n  const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\r\n\r\n  if (\r\n    !options.userSpecifiedAuthSource &&\r\n    source &&\r\n    options.credentials &&\r\n    !AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)\r\n  ) {\r\n    options.credentials = MongoCredentials.merge(options.credentials, { source });\r\n  }\r\n\r\n  if (!options.userSpecifiedReplicaSet && replicaSet) {\r\n    options.replicaSet = replicaSet;\r\n  }\r\n\r\n  if (loadBalanced === 'true') {\r\n    options.loadBalanced = true;\r\n  }\r\n\r\n  if (options.replicaSet && options.srvMaxHosts > 0) {\r\n    throw new MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\r\n  }\r\n\r\n  validateLoadBalancedOptions(hostAddresses, options, true);\r\n\r\n  return hostAddresses;\r\n}\r\n\r\n/**\r\n * Checks if TLS options are valid\r\n *\r\n * @param allOptions - All options provided by user or included in default options map\r\n * @throws MongoAPIError if TLS options are invalid\r\n */\r\nfunction checkTLSOptions(allOptions: CaseInsensitiveMap): void {\r\n  if (!allOptions) return;\r\n  const check = (a: string, b: string) => {\r\n    if (allOptions.has(a) && allOptions.has(b)) {\r\n      throw new MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\r\n    }\r\n  };\r\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\r\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\r\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\r\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\r\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\r\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\r\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\r\n}\r\n\r\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\r\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\r\nfunction getBoolean(name: string, value: unknown): boolean {\r\n  if (typeof value === 'boolean') return value;\r\n  const valueString = String(value).toLowerCase();\r\n  if (TRUTHS.has(valueString)) {\r\n    if (valueString !== 'true') {\r\n      emitWarningOnce(\r\n        `deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n  if (FALSEHOODS.has(valueString)) {\r\n    if (valueString !== 'false') {\r\n      emitWarningOnce(\r\n        `deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`\r\n      );\r\n    }\r\n    return false;\r\n  }\r\n  throw new MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\r\n}\r\n\r\nfunction getIntFromOptions(name: string, value: unknown): number {\r\n  const parsedInt = parseInteger(value);\r\n  if (parsedInt != null) {\r\n    return parsedInt;\r\n  }\r\n  throw new MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\r\n}\r\n\r\nfunction getUIntFromOptions(name: string, value: unknown): number {\r\n  const parsedValue = getIntFromOptions(name, value);\r\n  if (parsedValue < 0) {\r\n    throw new MongoParseError(`${name} can only be a positive int value, got: ${value}`);\r\n  }\r\n  return parsedValue;\r\n}\r\n\r\nfunction* entriesFromString(value: string): Generator<[string, string]> {\r\n  const keyValuePairs = value.split(',');\r\n  for (const keyValue of keyValuePairs) {\r\n    const [key, value] = keyValue.split(/:(.*)/);\r\n    if (value == null) {\r\n      throw new MongoParseError('Cannot have undefined values in key value pairs');\r\n    }\r\n\r\n    yield [key, value];\r\n  }\r\n}\r\n\r\nclass CaseInsensitiveMap<Value = any> extends Map<string, Value> {\r\n  constructor(entries: Array<[string, any]> = []) {\r\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\r\n  }\r\n  override has(k: string) {\r\n    return super.has(k.toLowerCase());\r\n  }\r\n  override get(k: string) {\r\n    return super.get(k.toLowerCase());\r\n  }\r\n  override set(k: string, v: any) {\r\n    return super.set(k.toLowerCase(), v);\r\n  }\r\n  override delete(k: string): boolean {\r\n    return super.delete(k.toLowerCase());\r\n  }\r\n}\r\n\r\nexport function parseOptions(\r\n  uri: string,\r\n  mongoClient: MongoClient | MongoClientOptions | undefined = undefined,\r\n  options: MongoClientOptions = {}\r\n): MongoOptions {\r\n  if (mongoClient != null && !(mongoClient instanceof MongoClient)) {\r\n    options = mongoClient;\r\n    mongoClient = undefined;\r\n  }\r\n\r\n  // validate BSONOptions\r\n  if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\r\n    throw new MongoAPIError('Must request either bigint or Long for int64 deserialization');\r\n  }\r\n\r\n  if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\r\n    throw new MongoAPIError('Must request either bigint or Long for int64 deserialization');\r\n  }\r\n\r\n  const url = new ConnectionString(uri);\r\n  const { hosts, isSRV } = url;\r\n\r\n  const mongoOptions = Object.create(null);\r\n\r\n  // Feature flags\r\n  for (const flag of Object.getOwnPropertySymbols(options)) {\r\n    if (FEATURE_FLAGS.has(flag)) {\r\n      mongoOptions[flag] = options[flag];\r\n    }\r\n  }\r\n\r\n  mongoOptions.hosts = isSRV ? [] : hosts.map(HostAddress.fromString);\r\n\r\n  const urlOptions = new CaseInsensitiveMap<unknown[]>();\r\n\r\n  if (url.pathname !== '/' && url.pathname !== '') {\r\n    const dbName = decodeURIComponent(\r\n      url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname\r\n    );\r\n    if (dbName) {\r\n      urlOptions.set('dbName', [dbName]);\r\n    }\r\n  }\r\n\r\n  if (url.username !== '') {\r\n    const auth: Document = {\r\n      username: decodeURIComponent(url.username)\r\n    };\r\n\r\n    if (typeof url.password === 'string') {\r\n      auth.password = decodeURIComponent(url.password);\r\n    }\r\n\r\n    urlOptions.set('auth', [auth]);\r\n  }\r\n\r\n  for (const key of url.searchParams.keys()) {\r\n    const values = [...url.searchParams.getAll(key)];\r\n\r\n    if (values.includes('')) {\r\n      throw new MongoAPIError('URI cannot contain options with no value');\r\n    }\r\n\r\n    if (!urlOptions.has(key)) {\r\n      urlOptions.set(key, values);\r\n    }\r\n  }\r\n\r\n  const objectOptions = new CaseInsensitiveMap<unknown>(\r\n    Object.entries(options).filter(([, v]) => v != null)\r\n  );\r\n\r\n  // Validate options that can only be provided by one of uri or object\r\n\r\n  if (urlOptions.has('serverApi')) {\r\n    throw new MongoParseError(\r\n      'URI cannot contain `serverApi`, it can only be passed to the client'\r\n    );\r\n  }\r\n\r\n  const uriMechanismProperties = urlOptions.get('authMechanismProperties');\r\n  if (uriMechanismProperties) {\r\n    for (const property of uriMechanismProperties) {\r\n      if (/(^|,)ALLOWED_HOSTS:/.test(property as string)) {\r\n        throw new MongoParseError(\r\n          'Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.'\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (objectOptions.has('loadBalanced')) {\r\n    throw new MongoParseError('loadBalanced is only a valid option in the URI');\r\n  }\r\n\r\n  // All option collection\r\n\r\n  const allProvidedOptions = new CaseInsensitiveMap<unknown[]>();\r\n\r\n  const allProvidedKeys = new Set<string>([...urlOptions.keys(), ...objectOptions.keys()]);\r\n\r\n  for (const key of allProvidedKeys) {\r\n    const values = [];\r\n    const objectOptionValue = objectOptions.get(key);\r\n    if (objectOptionValue != null) {\r\n      values.push(objectOptionValue);\r\n    }\r\n\r\n    const urlValues = urlOptions.get(key) ?? [];\r\n    values.push(...urlValues);\r\n    allProvidedOptions.set(key, values);\r\n  }\r\n\r\n  const didMapTLSCertificateFile =\r\n    allProvidedOptions.has('tlsCertificateKeyFile') &&\r\n    !allProvidedOptions.has('tlsCertificateFile');\r\n  if (didMapTLSCertificateFile) {\r\n    allProvidedOptions.set('tlsCertificateFile', allProvidedOptions.get('tlsCertificateKeyFile'));\r\n  }\r\n\r\n  if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\r\n    const tlsAndSslOpts = (allProvidedOptions.get('tls') || [])\r\n      .concat(allProvidedOptions.get('ssl') || [])\r\n      .map(getBoolean.bind(null, 'tls/ssl'));\r\n    if (new Set(tlsAndSslOpts).size !== 1) {\r\n      throw new MongoParseError('All values of tls/ssl must be the same.');\r\n    }\r\n  }\r\n\r\n  checkTLSOptions(allProvidedOptions);\r\n\r\n  const unsupportedOptions = setDifference(\r\n    allProvidedKeys,\r\n    Array.from(Object.keys(OPTIONS)).map(s => s.toLowerCase())\r\n  );\r\n  if (unsupportedOptions.size !== 0) {\r\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\r\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\r\n    throw new MongoParseError(\r\n      `${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`\r\n    );\r\n  }\r\n\r\n  // Option parsing and setting\r\n\r\n  for (const [key, descriptor] of Object.entries(OPTIONS)) {\r\n    const values = allProvidedOptions.get(key);\r\n    if (!values || values.length === 0) {\r\n      if (DEFAULT_OPTIONS.has(key)) {\r\n        setOption(mongoOptions, key, descriptor, [DEFAULT_OPTIONS.get(key)]);\r\n      }\r\n    } else {\r\n      const { deprecated } = descriptor;\r\n      const shouldEmitTLSCertificateFileDeprecation =\r\n        didMapTLSCertificateFile && key === 'tlsCertificateFile';\r\n      if (deprecated && !shouldEmitTLSCertificateFileDeprecation) {\r\n        const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\r\n        emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\r\n      }\r\n\r\n      setOption(mongoOptions, key, descriptor, values);\r\n    }\r\n  }\r\n\r\n  if (mongoOptions.credentials) {\r\n    const isGssapi = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_GSSAPI;\r\n    const isX509 = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_X509;\r\n    const isAws = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_AWS;\r\n    const isOidc = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_OIDC;\r\n    if (\r\n      (isGssapi || isX509) &&\r\n      allProvidedOptions.has('authSource') &&\r\n      mongoOptions.credentials.source !== '$external'\r\n    ) {\r\n      // If authSource was explicitly given and its incorrect, we error\r\n      throw new MongoParseError(\r\n        `authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`\r\n      );\r\n    }\r\n\r\n    if (\r\n      !(isGssapi || isX509 || isAws || isOidc) &&\r\n      mongoOptions.dbName &&\r\n      !allProvidedOptions.has('authSource')\r\n    ) {\r\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\r\n      // and there was no specific authSource given\r\n      mongoOptions.credentials = MongoCredentials.merge(mongoOptions.credentials, {\r\n        source: mongoOptions.dbName\r\n      });\r\n    }\r\n\r\n    if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\r\n      throw new MongoMissingCredentialsError(\r\n        `When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`\r\n      );\r\n    }\r\n\r\n    mongoOptions.credentials.validate();\r\n\r\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\r\n    if (\r\n      mongoOptions.credentials.password === '' &&\r\n      mongoOptions.credentials.username === '' &&\r\n      mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_DEFAULT &&\r\n      Object.keys(mongoOptions.credentials.mechanismProperties).length === 0\r\n    ) {\r\n      delete mongoOptions.credentials;\r\n    }\r\n  }\r\n\r\n  if (!mongoOptions.dbName) {\r\n    // dbName default is applied here because of the credential validation above\r\n    mongoOptions.dbName = 'test';\r\n  }\r\n\r\n  validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\r\n\r\n  if (mongoClient && mongoOptions.autoEncryption) {\r\n    Encrypter.checkForMongoCrypt();\r\n    mongoOptions.encrypter = new Encrypter(mongoClient, uri, options);\r\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\r\n  }\r\n\r\n  // Potential SRV Overrides and SRV connection string validations\r\n\r\n  mongoOptions.userSpecifiedAuthSource =\r\n    objectOptions.has('authSource') || urlOptions.has('authSource');\r\n  mongoOptions.userSpecifiedReplicaSet =\r\n    objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\r\n\r\n  if (isSRV) {\r\n    // SRV Record is resolved upon connecting\r\n    mongoOptions.srvHost = hosts[0];\r\n\r\n    if (mongoOptions.directConnection) {\r\n      throw new MongoAPIError('SRV URI does not support directConnection');\r\n    }\r\n\r\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\r\n      throw new MongoParseError('Cannot use srvMaxHosts option with replicaSet');\r\n    }\r\n\r\n    // SRV turns on TLS by default, but users can override and turn it off\r\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\r\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\r\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\r\n      mongoOptions.tls = true;\r\n    }\r\n  } else {\r\n    const userSpecifiedSrvOptions =\r\n      urlOptions.has('srvMaxHosts') ||\r\n      objectOptions.has('srvMaxHosts') ||\r\n      urlOptions.has('srvServiceName') ||\r\n      objectOptions.has('srvServiceName');\r\n\r\n    if (userSpecifiedSrvOptions) {\r\n      throw new MongoParseError(\r\n        'Cannot use srvMaxHosts or srvServiceName with a non-srv connection string'\r\n      );\r\n    }\r\n  }\r\n\r\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\r\n    throw new MongoParseError('directConnection option requires exactly one host');\r\n  }\r\n\r\n  if (\r\n    !mongoOptions.proxyHost &&\r\n    (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)\r\n  ) {\r\n    throw new MongoParseError('Must specify proxyHost if other proxy options are passed');\r\n  }\r\n\r\n  if (\r\n    (mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\r\n    (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)\r\n  ) {\r\n    throw new MongoParseError('Can only specify both of proxy username/password or neither');\r\n  }\r\n\r\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(\r\n    key => urlOptions.get(key) ?? []\r\n  );\r\n\r\n  if (proxyOptions.some(options => options.length > 1)) {\r\n    throw new MongoParseError(\r\n      'Proxy options cannot be specified multiple times in the connection string'\r\n    );\r\n  }\r\n\r\n  const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\r\n  mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\r\n\r\n  let loggerEnvOptions: MongoLoggerEnvOptions = {};\r\n  let loggerClientOptions: MongoLoggerMongoClientOptions = {};\r\n  if (mongoOptions[loggerFeatureFlag]) {\r\n    loggerEnvOptions = {\r\n      MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\r\n      MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\r\n      MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\r\n      MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\r\n      MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\r\n      MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\r\n      MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\r\n      ...mongoOptions[Symbol.for('@@mdb.internalLoggerConfig')]\r\n    };\r\n    loggerClientOptions = {\r\n      mongodbLogPath: mongoOptions.mongodbLogPath\r\n    };\r\n  }\r\n  mongoOptions.mongoLoggerOptions = MongoLogger.resolveOptions(\r\n    loggerEnvOptions,\r\n    loggerClientOptions\r\n  );\r\n\r\n  mongoOptions.metadata = makeClientMetadata(mongoOptions);\r\n\r\n  return mongoOptions;\r\n}\r\n\r\n/**\r\n * #### Throws if LB mode is true:\r\n * - hosts contains more than one host\r\n * - there is a replicaSet name set\r\n * - directConnection is set\r\n * - if srvMaxHosts is used when an srv connection string is passed in\r\n *\r\n * @throws MongoParseError\r\n */\r\nfunction validateLoadBalancedOptions(\r\n  hosts: HostAddress[] | string[],\r\n  mongoOptions: MongoOptions,\r\n  isSrv: boolean\r\n): void {\r\n  if (mongoOptions.loadBalanced) {\r\n    if (hosts.length > 1) {\r\n      throw new MongoParseError(LB_SINGLE_HOST_ERROR);\r\n    }\r\n    if (mongoOptions.replicaSet) {\r\n      throw new MongoParseError(LB_REPLICA_SET_ERROR);\r\n    }\r\n    if (mongoOptions.directConnection) {\r\n      throw new MongoParseError(LB_DIRECT_CONNECTION_ERROR);\r\n    }\r\n\r\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\r\n      throw new MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\r\n    }\r\n  }\r\n  return;\r\n}\r\n\r\nfunction setOption(\r\n  mongoOptions: any,\r\n  key: string,\r\n  descriptor: OptionDescriptor,\r\n  values: unknown[]\r\n) {\r\n  const { target, type, transform } = descriptor;\r\n  const name = target ?? key;\r\n\r\n  switch (type) {\r\n    case 'boolean':\r\n      mongoOptions[name] = getBoolean(name, values[0]);\r\n      break;\r\n    case 'int':\r\n      mongoOptions[name] = getIntFromOptions(name, values[0]);\r\n      break;\r\n    case 'uint':\r\n      mongoOptions[name] = getUIntFromOptions(name, values[0]);\r\n      break;\r\n    case 'string':\r\n      if (values[0] == null) {\r\n        break;\r\n      }\r\n      mongoOptions[name] = String(values[0]);\r\n      break;\r\n    case 'record':\r\n      if (!isRecord(values[0])) {\r\n        throw new MongoParseError(`${name} must be an object`);\r\n      }\r\n      mongoOptions[name] = values[0];\r\n      break;\r\n    case 'any':\r\n      mongoOptions[name] = values[0];\r\n      break;\r\n    default: {\r\n      if (!transform) {\r\n        throw new MongoParseError('Descriptors missing a type must define a transform');\r\n      }\r\n      const transformValue = transform({ name, options: mongoOptions, values });\r\n      mongoOptions[name] = transformValue;\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\ninterface OptionDescriptor {\r\n  target?: string;\r\n  type?: 'boolean' | 'int' | 'uint' | 'record' | 'string' | 'any';\r\n  default?: any;\r\n\r\n  deprecated?: boolean | string;\r\n  /**\r\n   * @param name - the original option name\r\n   * @param options - the options so far for resolution\r\n   * @param values - the possible values in precedence order\r\n   */\r\n  transform?: (args: { name: string; options: MongoOptions; values: unknown[] }) => unknown;\r\n}\r\n\r\nexport const OPTIONS = {\r\n  appName: {\r\n    type: 'string'\r\n  },\r\n  auth: {\r\n    target: 'credentials',\r\n    transform({ name, options, values: [value] }): MongoCredentials {\r\n      if (!isRecord(value, ['username', 'password'] as const)) {\r\n        throw new MongoParseError(\r\n          `${name} must be an object with 'username' and 'password' properties`\r\n        );\r\n      }\r\n      return MongoCredentials.merge(options.credentials, {\r\n        username: value.username,\r\n        password: value.password\r\n      });\r\n    }\r\n  },\r\n  authMechanism: {\r\n    target: 'credentials',\r\n    transform({ options, values: [value] }): MongoCredentials {\r\n      const mechanisms = Object.values(AuthMechanism);\r\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\r\n      if (!mechanism) {\r\n        throw new MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\r\n      }\r\n      let source = options.credentials?.source;\r\n      if (\r\n        mechanism === AuthMechanism.MONGODB_PLAIN ||\r\n        AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)\r\n      ) {\r\n        // some mechanisms have '$external' as the Auth Source\r\n        source = '$external';\r\n      }\r\n\r\n      let password = options.credentials?.password;\r\n      if (mechanism === AuthMechanism.MONGODB_X509 && password === '') {\r\n        password = undefined;\r\n      }\r\n      return MongoCredentials.merge(options.credentials, {\r\n        mechanism,\r\n        source,\r\n        password\r\n      });\r\n    }\r\n  },\r\n  authMechanismProperties: {\r\n    target: 'credentials',\r\n    transform({ options, values }): MongoCredentials {\r\n      // We can have a combination of options passed in the URI and options passed\r\n      // as an object to the MongoClient. So we must transform the string options\r\n      // as well as merge them together with a potentially provided object.\r\n      let mechanismProperties = Object.create(null);\r\n\r\n      for (const optionValue of values) {\r\n        if (typeof optionValue === 'string') {\r\n          for (const [key, value] of entriesFromString(optionValue)) {\r\n            try {\r\n              mechanismProperties[key] = getBoolean(key, value);\r\n            } catch {\r\n              mechanismProperties[key] = value;\r\n            }\r\n          }\r\n        } else {\r\n          if (!isRecord(optionValue)) {\r\n            throw new MongoParseError('AuthMechanismProperties must be an object');\r\n          }\r\n          mechanismProperties = { ...optionValue };\r\n        }\r\n      }\r\n      return MongoCredentials.merge(options.credentials, {\r\n        mechanismProperties\r\n      });\r\n    }\r\n  },\r\n  authSource: {\r\n    target: 'credentials',\r\n    transform({ options, values: [value] }): MongoCredentials {\r\n      const source = String(value);\r\n      return MongoCredentials.merge(options.credentials, { source });\r\n    }\r\n  },\r\n  autoEncryption: {\r\n    type: 'record'\r\n  },\r\n  bsonRegExp: {\r\n    type: 'boolean'\r\n  },\r\n  serverApi: {\r\n    target: 'serverApi',\r\n    transform({ values: [version] }): ServerApi {\r\n      const serverApiToValidate =\r\n        typeof version === 'string' ? ({ version } as ServerApi) : (version as ServerApi);\r\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\r\n      if (!versionToValidate) {\r\n        throw new MongoParseError(\r\n          `Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(\r\n            ServerApiVersion\r\n          ).join('\", \"')}\"]`\r\n        );\r\n      }\r\n      if (!Object.values(ServerApiVersion).some(v => v === versionToValidate)) {\r\n        throw new MongoParseError(\r\n          `Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(\r\n            ServerApiVersion\r\n          ).join('\", \"')}\"]`\r\n        );\r\n      }\r\n      return serverApiToValidate;\r\n    }\r\n  },\r\n  checkKeys: {\r\n    type: 'boolean'\r\n  },\r\n  compressors: {\r\n    default: 'none',\r\n    target: 'compressors',\r\n    transform({ values }) {\r\n      const compressionList = new Set();\r\n      for (const compVal of values as (CompressorName[] | string)[]) {\r\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\r\n        if (!Array.isArray(compValArray)) {\r\n          throw new MongoInvalidArgumentError(\r\n            'compressors must be an array or a comma-delimited list of strings'\r\n          );\r\n        }\r\n        for (const c of compValArray) {\r\n          if (Object.keys(Compressor).includes(String(c))) {\r\n            compressionList.add(String(c));\r\n          } else {\r\n            throw new MongoInvalidArgumentError(\r\n              `${c} is not a valid compression mechanism. Must be one of: ${Object.keys(\r\n                Compressor\r\n              )}.`\r\n            );\r\n          }\r\n        }\r\n      }\r\n      return [...compressionList];\r\n    }\r\n  },\r\n  connectTimeoutMS: {\r\n    default: 30000,\r\n    type: 'uint'\r\n  },\r\n  dbName: {\r\n    type: 'string'\r\n  },\r\n  directConnection: {\r\n    default: false,\r\n    type: 'boolean'\r\n  },\r\n  driverInfo: {\r\n    default: {},\r\n    type: 'record'\r\n  },\r\n  enableUtf8Validation: { type: 'boolean', default: true },\r\n  family: {\r\n    transform({ name, values: [value] }): 4 | 6 {\r\n      const transformValue = getIntFromOptions(name, value);\r\n      if (transformValue === 4 || transformValue === 6) {\r\n        return transformValue;\r\n      }\r\n      throw new MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\r\n    }\r\n  },\r\n  fieldsAsRaw: {\r\n    type: 'record'\r\n  },\r\n  forceServerObjectId: {\r\n    default: false,\r\n    type: 'boolean'\r\n  },\r\n  fsync: {\r\n    deprecated: 'Please use journal instead',\r\n    target: 'writeConcern',\r\n    transform({ name, options, values: [value] }): WriteConcern {\r\n      const wc = WriteConcern.fromOptions({\r\n        writeConcern: {\r\n          ...options.writeConcern,\r\n          fsync: getBoolean(name, value)\r\n        }\r\n      });\r\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\r\n      return wc;\r\n    }\r\n  } as OptionDescriptor,\r\n  heartbeatFrequencyMS: {\r\n    default: 10000,\r\n    type: 'uint'\r\n  },\r\n  ignoreUndefined: {\r\n    type: 'boolean'\r\n  },\r\n  j: {\r\n    deprecated: 'Please use journal instead',\r\n    target: 'writeConcern',\r\n    transform({ name, options, values: [value] }): WriteConcern {\r\n      const wc = WriteConcern.fromOptions({\r\n        writeConcern: {\r\n          ...options.writeConcern,\r\n          journal: getBoolean(name, value)\r\n        }\r\n      });\r\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\r\n      return wc;\r\n    }\r\n  } as OptionDescriptor,\r\n  journal: {\r\n    target: 'writeConcern',\r\n    transform({ name, options, values: [value] }): WriteConcern {\r\n      const wc = WriteConcern.fromOptions({\r\n        writeConcern: {\r\n          ...options.writeConcern,\r\n          journal: getBoolean(name, value)\r\n        }\r\n      });\r\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\r\n      return wc;\r\n    }\r\n  },\r\n  keepAlive: {\r\n    default: true,\r\n    type: 'boolean',\r\n    deprecated: 'Will not be able to turn off in the future.'\r\n  },\r\n  keepAliveInitialDelay: {\r\n    default: 120000,\r\n    type: 'uint',\r\n    deprecated: 'Will not be configurable in the future.'\r\n  },\r\n  loadBalanced: {\r\n    default: false,\r\n    type: 'boolean'\r\n  },\r\n  localThresholdMS: {\r\n    default: 15,\r\n    type: 'uint'\r\n  },\r\n  maxConnecting: {\r\n    default: 2,\r\n    transform({ name, values: [value] }): number {\r\n      const maxConnecting = getUIntFromOptions(name, value);\r\n      if (maxConnecting === 0) {\r\n        throw new MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\r\n      }\r\n      return maxConnecting;\r\n    }\r\n  },\r\n  maxIdleTimeMS: {\r\n    default: 0,\r\n    type: 'uint'\r\n  },\r\n  maxPoolSize: {\r\n    default: 100,\r\n    type: 'uint'\r\n  },\r\n  maxStalenessSeconds: {\r\n    target: 'readPreference',\r\n    transform({ name, options, values: [value] }) {\r\n      const maxStalenessSeconds = getUIntFromOptions(name, value);\r\n      if (options.readPreference) {\r\n        return ReadPreference.fromOptions({\r\n          readPreference: { ...options.readPreference, maxStalenessSeconds }\r\n        });\r\n      } else {\r\n        return new ReadPreference('secondary', undefined, { maxStalenessSeconds });\r\n      }\r\n    }\r\n  },\r\n  minInternalBufferSize: {\r\n    type: 'uint'\r\n  },\r\n  minPoolSize: {\r\n    default: 0,\r\n    type: 'uint'\r\n  },\r\n  minHeartbeatFrequencyMS: {\r\n    default: 500,\r\n    type: 'uint'\r\n  },\r\n  monitorCommands: {\r\n    default: false,\r\n    type: 'boolean'\r\n  },\r\n  name: {\r\n    target: 'driverInfo',\r\n    transform({ values: [value], options }) {\r\n      return { ...options.driverInfo, name: String(value) };\r\n    }\r\n  } as OptionDescriptor,\r\n  noDelay: {\r\n    default: true,\r\n    type: 'boolean'\r\n  },\r\n  pkFactory: {\r\n    default: DEFAULT_PK_FACTORY,\r\n    transform({ values: [value] }): PkFactory {\r\n      if (isRecord(value, ['createPk'] as const) && typeof value.createPk === 'function') {\r\n        return value as PkFactory;\r\n      }\r\n      throw new MongoParseError(\r\n        `Option pkFactory must be an object with a createPk function, got ${value}`\r\n      );\r\n    }\r\n  },\r\n  promoteBuffers: {\r\n    type: 'boolean'\r\n  },\r\n  promoteLongs: {\r\n    type: 'boolean'\r\n  },\r\n  promoteValues: {\r\n    type: 'boolean'\r\n  },\r\n  useBigInt64: {\r\n    type: 'boolean'\r\n  },\r\n  proxyHost: {\r\n    type: 'string'\r\n  },\r\n  proxyPassword: {\r\n    type: 'string'\r\n  },\r\n  proxyPort: {\r\n    type: 'uint'\r\n  },\r\n  proxyUsername: {\r\n    type: 'string'\r\n  },\r\n  raw: {\r\n    default: false,\r\n    type: 'boolean'\r\n  },\r\n  readConcern: {\r\n    transform({ values: [value], options }) {\r\n      if (value instanceof ReadConcern || isRecord(value, ['level'] as const)) {\r\n        return ReadConcern.fromOptions({ ...options.readConcern, ...value } as any);\r\n      }\r\n      throw new MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\r\n    }\r\n  },\r\n  readConcernLevel: {\r\n    target: 'readConcern',\r\n    transform({ values: [level], options }) {\r\n      return ReadConcern.fromOptions({\r\n        ...options.readConcern,\r\n        level: level as ReadConcernLevel\r\n      });\r\n    }\r\n  },\r\n  readPreference: {\r\n    default: ReadPreference.primary,\r\n    transform({ values: [value], options }) {\r\n      if (value instanceof ReadPreference) {\r\n        return ReadPreference.fromOptions({\r\n          readPreference: { ...options.readPreference, ...value },\r\n          ...value\r\n        } as any);\r\n      }\r\n      if (isRecord(value, ['mode'] as const)) {\r\n        const rp = ReadPreference.fromOptions({\r\n          readPreference: { ...options.readPreference, ...value },\r\n          ...value\r\n        } as any);\r\n        if (rp) return rp;\r\n        else throw new MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\r\n      }\r\n      if (typeof value === 'string') {\r\n        const rpOpts = {\r\n          hedge: options.readPreference?.hedge,\r\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\r\n        };\r\n        return new ReadPreference(\r\n          value as ReadPreferenceMode,\r\n          options.readPreference?.tags,\r\n          rpOpts\r\n        );\r\n      }\r\n      throw new MongoParseError(`Unknown ReadPreference value: ${value}`);\r\n    }\r\n  },\r\n  readPreferenceTags: {\r\n    target: 'readPreference',\r\n    transform({\r\n      values,\r\n      options\r\n    }: {\r\n      values: Array<string | Record<string, string>[]>;\r\n      options: MongoClientOptions;\r\n    }) {\r\n      const tags: Array<string | Record<string, string>> = Array.isArray(values[0])\r\n        ? values[0]\r\n        : (values as Array<string>);\r\n      const readPreferenceTags = [];\r\n      for (const tag of tags) {\r\n        const readPreferenceTag: TagSet = Object.create(null);\r\n        if (typeof tag === 'string') {\r\n          for (const [k, v] of entriesFromString(tag)) {\r\n            readPreferenceTag[k] = v;\r\n          }\r\n        }\r\n        if (isRecord(tag)) {\r\n          for (const [k, v] of Object.entries(tag)) {\r\n            readPreferenceTag[k] = v;\r\n          }\r\n        }\r\n        readPreferenceTags.push(readPreferenceTag);\r\n      }\r\n      return ReadPreference.fromOptions({\r\n        readPreference: options.readPreference,\r\n        readPreferenceTags\r\n      });\r\n    }\r\n  },\r\n  replicaSet: {\r\n    type: 'string'\r\n  },\r\n  retryReads: {\r\n    default: true,\r\n    type: 'boolean'\r\n  },\r\n  retryWrites: {\r\n    default: true,\r\n    type: 'boolean'\r\n  },\r\n  serializeFunctions: {\r\n    type: 'boolean'\r\n  },\r\n  serverSelectionTimeoutMS: {\r\n    default: 30000,\r\n    type: 'uint'\r\n  },\r\n  servername: {\r\n    type: 'string'\r\n  },\r\n  socketTimeoutMS: {\r\n    default: 0,\r\n    type: 'uint'\r\n  },\r\n  srvMaxHosts: {\r\n    type: 'uint',\r\n    default: 0\r\n  },\r\n  srvServiceName: {\r\n    type: 'string',\r\n    default: 'mongodb'\r\n  },\r\n  ssl: {\r\n    target: 'tls',\r\n    type: 'boolean'\r\n  },\r\n  sslCA: {\r\n    deprecated:\r\n      'sslCA is deprecated and will be removed in the next major version. Please use tlsCAFile instead.',\r\n    target: 'ca',\r\n    transform({ values: [value] }) {\r\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\r\n    }\r\n  },\r\n  sslCRL: {\r\n    deprecated:\r\n      'sslCRL is deprecated and will be removed in the next major version and be replaced by tlsCRLFile in that release.',\r\n    target: 'crl',\r\n    transform({ values: [value] }) {\r\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\r\n    }\r\n  },\r\n  sslCert: {\r\n    deprecated:\r\n      'sslCert is deprecated and will be removed in the next major version. Please use tlsCertificateKeyFile instead.',\r\n    target: 'cert',\r\n    transform({ values: [value] }) {\r\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\r\n    }\r\n  },\r\n  sslKey: {\r\n    deprecated:\r\n      'sslKey is deprecated and will be removed in the next major version. Please use tlsCertificateKeyFile instead.',\r\n    target: 'key',\r\n    transform({ values: [value] }) {\r\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\r\n    }\r\n  },\r\n  sslPass: {\r\n    deprecated:\r\n      'sslPass is deprecated and will be removed in the next major version. Please use tlsCertificateKeyFilePassword instead.',\r\n    target: 'passphrase',\r\n    type: 'string'\r\n  },\r\n  sslValidate: {\r\n    deprecated:\r\n      'sslValidate is deprecated and will be removed in the next major version. Please use tlsAllowInvalidCertificates instead.',\r\n    target: 'rejectUnauthorized',\r\n    type: 'boolean'\r\n  },\r\n  tls: {\r\n    type: 'boolean'\r\n  },\r\n  tlsAllowInvalidCertificates: {\r\n    target: 'rejectUnauthorized',\r\n    transform({ name, values: [value] }) {\r\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\r\n      return !getBoolean(name, value);\r\n    }\r\n  },\r\n  tlsAllowInvalidHostnames: {\r\n    target: 'checkServerIdentity',\r\n    transform({ name, values: [value] }) {\r\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\r\n      return getBoolean(name, value) ? () => undefined : undefined;\r\n    }\r\n  },\r\n  tlsCAFile: {\r\n    target: 'ca',\r\n    transform({ values: [value] }) {\r\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\r\n    }\r\n  },\r\n  tlsCertificateFile: {\r\n    deprecated:\r\n      'tlsCertificateFile is deprecated and will be removed in the next major version. Please use tlsCertificateKeyFile instead.',\r\n    target: 'cert',\r\n    transform({ values: [value] }) {\r\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\r\n    }\r\n  },\r\n  tlsCertificateKeyFile: {\r\n    target: 'key',\r\n    transform({ values: [value] }) {\r\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\r\n    }\r\n  },\r\n  tlsCertificateKeyFilePassword: {\r\n    target: 'passphrase',\r\n    type: 'any'\r\n  },\r\n  tlsInsecure: {\r\n    transform({ name, options, values: [value] }) {\r\n      const tlsInsecure = getBoolean(name, value);\r\n      if (tlsInsecure) {\r\n        options.checkServerIdentity = () => undefined;\r\n        options.rejectUnauthorized = false;\r\n      } else {\r\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames\r\n          ? () => undefined\r\n          : undefined;\r\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\r\n      }\r\n      return tlsInsecure;\r\n    }\r\n  },\r\n  w: {\r\n    target: 'writeConcern',\r\n    transform({ values: [value], options }) {\r\n      return WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value as W } });\r\n    }\r\n  },\r\n  waitQueueTimeoutMS: {\r\n    default: 0,\r\n    type: 'uint'\r\n  },\r\n  writeConcern: {\r\n    target: 'writeConcern',\r\n    transform({ values: [value], options }) {\r\n      if (isRecord(value) || value instanceof WriteConcern) {\r\n        return WriteConcern.fromOptions({\r\n          writeConcern: {\r\n            ...options.writeConcern,\r\n            ...value\r\n          }\r\n        });\r\n      } else if (value === 'majority' || typeof value === 'number') {\r\n        return WriteConcern.fromOptions({\r\n          writeConcern: {\r\n            ...options.writeConcern,\r\n            w: value\r\n          }\r\n        });\r\n      }\r\n\r\n      throw new MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\r\n    }\r\n  },\r\n  wtimeout: {\r\n    deprecated: 'Please use wtimeoutMS instead',\r\n    target: 'writeConcern',\r\n    transform({ values: [value], options }) {\r\n      const wc = WriteConcern.fromOptions({\r\n        writeConcern: {\r\n          ...options.writeConcern,\r\n          wtimeout: getUIntFromOptions('wtimeout', value)\r\n        }\r\n      });\r\n      if (wc) return wc;\r\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\r\n    }\r\n  } as OptionDescriptor,\r\n  wtimeoutMS: {\r\n    target: 'writeConcern',\r\n    transform({ values: [value], options }) {\r\n      const wc = WriteConcern.fromOptions({\r\n        writeConcern: {\r\n          ...options.writeConcern,\r\n          wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\r\n        }\r\n      });\r\n      if (wc) return wc;\r\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\r\n    }\r\n  },\r\n  zlibCompressionLevel: {\r\n    default: 0,\r\n    type: 'int'\r\n  },\r\n  // Custom types for modifying core behavior\r\n  connectionType: { type: 'any' },\r\n  srvPoller: { type: 'any' },\r\n  // Accepted NodeJS Options\r\n  minDHSize: { type: 'any' },\r\n  pskCallback: { type: 'any' },\r\n  secureContext: { type: 'any' },\r\n  enableTrace: { type: 'any' },\r\n  requestCert: { type: 'any' },\r\n  rejectUnauthorized: { type: 'any' },\r\n  checkServerIdentity: { type: 'any' },\r\n  ALPNProtocols: { type: 'any' },\r\n  SNICallback: { type: 'any' },\r\n  session: { type: 'any' },\r\n  requestOCSP: { type: 'any' },\r\n  localAddress: { type: 'any' },\r\n  localPort: { type: 'any' },\r\n  hints: { type: 'any' },\r\n  lookup: { type: 'any' },\r\n  ca: { type: 'any' },\r\n  cert: { type: 'any' },\r\n  ciphers: { type: 'any' },\r\n  crl: { type: 'any' },\r\n  ecdhCurve: { type: 'any' },\r\n  key: { type: 'any' },\r\n  passphrase: { type: 'any' },\r\n  pfx: { type: 'any' },\r\n  secureProtocol: { type: 'any' },\r\n  index: { type: 'any' },\r\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\r\n  useNewUrlParser: { type: 'boolean' } as OptionDescriptor,\r\n  useUnifiedTopology: { type: 'boolean' } as OptionDescriptor,\r\n  // MongoLogger\r\n  // TODO(NODE-4849): Tighten the type of mongodbLogPath\r\n  mongodbLogPath: { type: 'any' }\r\n} as Record<keyof MongoClientOptions, OptionDescriptor>;\r\n\r\nexport const DEFAULT_OPTIONS = new CaseInsensitiveMap(\r\n  Object.entries(OPTIONS)\r\n    .filter(([, descriptor]) => descriptor.default != null)\r\n    .map(([k, d]) => [k, d.default])\r\n);\r\n\r\n/**\r\n * Set of permitted feature flags\r\n * @internal\r\n */\r\nexport const FEATURE_FLAGS = new Set([\r\n  Symbol.for('@@mdb.skipPingOnConnect'),\r\n  Symbol.for('@@mdb.enableMongoLogger'),\r\n  Symbol.for('@@mdb.internalLoggerConfig')\r\n]);\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}