{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Cache = exports.ExpiringCacheEntry = void 0;\n/* 5 minutes in milliseconds */\nconst EXPIRATION_BUFFER_MS = 300000;\n/**\r\n * An entry in a cache that can expire in a certain amount of time.\r\n */\nclass ExpiringCacheEntry {\n  /**\r\n   * Create a new expiring token entry.\r\n   */\n  constructor(expiration) {\n    this.expiration = this.expirationTime(expiration);\n  }\n  /**\r\n   * The entry is still valid if the expiration is more than\r\n   * 5 minutes from the expiration time.\r\n   */\n  isValid() {\n    return this.expiration - Date.now() > EXPIRATION_BUFFER_MS;\n  }\n  /**\r\n   * Get an expiration time in milliseconds past epoch.\r\n   */\n  expirationTime(expiresInSeconds) {\n    return Date.now() + expiresInSeconds * 1000;\n  }\n}\nexports.ExpiringCacheEntry = ExpiringCacheEntry;\n/**\r\n * Base class for OIDC caches.\r\n */\nclass Cache {\n  /**\r\n   * Create a new cache.\r\n   */\n  constructor() {\n    this.entries = new Map();\n  }\n  /**\r\n   * Clear the cache.\r\n   */\n  clear() {\n    this.entries.clear();\n  }\n  /**\r\n   * Create a cache key from the address and username.\r\n   */\n  hashedCacheKey(address, username, callbackHash) {\n    return JSON.stringify([address, username, callbackHash]);\n  }\n}\nexports.Cache = Cache;","map":{"version":3,"mappings":";;;;;;AAAA;AACA,MAAMA,oBAAoB,GAAG,MAAM;AAEnC;;;AAGA,MAAsBC,kBAAkB;EAGtC;;;EAGAC,YAAYC,UAAkB;IAC5B,IAAI,CAACA,UAAU,GAAG,IAAI,CAACC,cAAc,CAACD,UAAU,CAAC;EACnD;EACA;;;;EAIAE,OAAO;IACL,OAAO,IAAI,CAACF,UAAU,GAAGG,IAAI,CAACC,GAAG,EAAE,GAAGP,oBAAoB;EAC5D;EAEA;;;EAGQI,cAAc,CAACI,gBAAwB;IAC7C,OAAOF,IAAI,CAACC,GAAG,EAAE,GAAGC,gBAAgB,GAAG,IAAI;EAC7C;;AAtBFC;AAyBA;;;AAGA,MAAsBC,KAAK;EAGzB;;;EAGAR;IACE,IAAI,CAACS,OAAO,GAAG,IAAIC,GAAG,EAAa;EACrC;EAEA;;;EAGAC,KAAK;IACH,IAAI,CAACF,OAAO,CAACE,KAAK,EAAE;EACtB;EAOA;;;EAGAC,cAAc,CAACC,OAAe,EAAEC,QAAgB,EAAEC,YAAoB;IACpE,OAAOC,IAAI,CAACC,SAAS,CAAC,CAACJ,OAAO,EAAEC,QAAQ,EAAEC,YAAY,CAAC,CAAC;EAC1D;;AA3BFR","names":["EXPIRATION_BUFFER_MS","ExpiringCacheEntry","constructor","expiration","expirationTime","isValid","Date","now","expiresInSeconds","exports","Cache","entries","Map","clear","hashedCacheKey","address","username","callbackHash","JSON","stringify"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\cmap\\auth\\mongodb_oidc\\cache.ts"],"sourcesContent":["/* 5 minutes in milliseconds */\r\nconst EXPIRATION_BUFFER_MS = 300000;\r\n\r\n/**\r\n * An entry in a cache that can expire in a certain amount of time.\r\n */\r\nexport abstract class ExpiringCacheEntry {\r\n  expiration: number;\r\n\r\n  /**\r\n   * Create a new expiring token entry.\r\n   */\r\n  constructor(expiration: number) {\r\n    this.expiration = this.expirationTime(expiration);\r\n  }\r\n  /**\r\n   * The entry is still valid if the expiration is more than\r\n   * 5 minutes from the expiration time.\r\n   */\r\n  isValid() {\r\n    return this.expiration - Date.now() > EXPIRATION_BUFFER_MS;\r\n  }\r\n\r\n  /**\r\n   * Get an expiration time in milliseconds past epoch.\r\n   */\r\n  private expirationTime(expiresInSeconds: number): number {\r\n    return Date.now() + expiresInSeconds * 1000;\r\n  }\r\n}\r\n\r\n/**\r\n * Base class for OIDC caches.\r\n */\r\nexport abstract class Cache<T> {\r\n  entries: Map<string, T>;\r\n\r\n  /**\r\n   * Create a new cache.\r\n   */\r\n  constructor() {\r\n    this.entries = new Map<string, T>();\r\n  }\r\n\r\n  /**\r\n   * Clear the cache.\r\n   */\r\n  clear() {\r\n    this.entries.clear();\r\n  }\r\n\r\n  /**\r\n   * Implement the cache key for the token.\r\n   */\r\n  abstract cacheKey(address: string, username: string, callbackHash: string): string;\r\n\r\n  /**\r\n   * Create a cache key from the address and username.\r\n   */\r\n  hashedCacheKey(address: string, username: string, callbackHash: string): string {\r\n    return JSON.stringify([address, username, callbackHash]);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}