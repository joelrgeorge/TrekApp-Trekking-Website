{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst delete_1 = require(\"../operations/delete\");\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst insert_1 = require(\"../operations/insert\");\nconst operation_1 = require(\"../operations/operation\");\nconst update_1 = require(\"../operations/update\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\n/** @internal */\nconst kServerError = Symbol('serverError');\n/** @public */\nexports.BatchType = Object.freeze({\n  INSERT: 1,\n  UPDATE: 2,\n  DELETE: 3\n});\n/**\r\n * Keeps the state of a unordered batch so we can rewrite the results\r\n * correctly after command execution\r\n *\r\n * @public\r\n */\nclass Batch {\n  constructor(batchType, originalZeroIndex) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n}\nexports.Batch = Batch;\n/**\r\n * @public\r\n * The result of a bulk write.\r\n */\nclass BulkWriteResult {\n  static generateIdMap(ids) {\n    const idMap = {};\n    for (const doc of ids) {\n      idMap[doc.index] = doc._id;\n    }\n    return idMap;\n  }\n  /**\r\n   * Create a new BulkWriteResult instance\r\n   * @internal\r\n   */\n  constructor(bulkResult) {\n    this.result = bulkResult;\n    this.insertedCount = this.result.nInserted ?? 0;\n    this.matchedCount = this.result.nMatched ?? 0;\n    this.modifiedCount = this.result.nModified ?? 0;\n    this.deletedCount = this.result.nRemoved ?? 0;\n    this.upsertedCount = this.result.upserted.length ?? 0;\n    this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n    this.insertedIds = BulkWriteResult.generateIdMap(this.result.insertedIds);\n    Object.defineProperty(this, 'result', {\n      value: this.result,\n      enumerable: false\n    });\n  }\n  /** Evaluates to true if the bulk operation correctly executes */\n  get ok() {\n    return this.result.ok;\n  }\n  /**\r\n   * The number of inserted documents\r\n   * @deprecated Use insertedCount instead.\r\n   */\n  get nInserted() {\n    return this.result.nInserted;\n  }\n  /**\r\n   * Number of upserted documents\r\n   * @deprecated User upsertedCount instead.\r\n   */\n  get nUpserted() {\n    return this.result.nUpserted;\n  }\n  /**\r\n   * Number of matched documents\r\n   * @deprecated Use matchedCount instead.\r\n   */\n  get nMatched() {\n    return this.result.nMatched;\n  }\n  /**\r\n   * Number of documents updated physically on disk\r\n   * @deprecated Use modifiedCount instead.\r\n   */\n  get nModified() {\n    return this.result.nModified;\n  }\n  /**\r\n   * Number of removed documents\r\n   * @deprecated Use deletedCount instead.\r\n   */\n  get nRemoved() {\n    return this.result.nRemoved;\n  }\n  /**\r\n   * Returns an array of all inserted ids\r\n   * @deprecated Use insertedIds instead.\r\n   */\n  getInsertedIds() {\n    return this.result.insertedIds;\n  }\n  /**\r\n   * Returns an array of all upserted ids\r\n   * @deprecated Use upsertedIds instead.\r\n   */\n  getUpsertedIds() {\n    return this.result.upserted;\n  }\n  /** Returns the upserted id at the given index */\n  getUpsertedIdAt(index) {\n    return this.result.upserted[index];\n  }\n  /** Returns raw internal result */\n  getRawResponse() {\n    return this.result;\n  }\n  /** Returns true if the bulk operation contains a write error */\n  hasWriteErrors() {\n    return this.result.writeErrors.length > 0;\n  }\n  /** Returns the number of write errors off the bulk operation */\n  getWriteErrorCount() {\n    return this.result.writeErrors.length;\n  }\n  /** Returns a specific write error object */\n  getWriteErrorAt(index) {\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n  }\n  /** Retrieve all write errors */\n  getWriteErrors() {\n    return this.result.writeErrors;\n  }\n  /** Retrieve the write concern error if one exists */\n  getWriteConcernError() {\n    if (this.result.writeConcernErrors.length === 0) {\n      return;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n        // TODO: Something better\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n      return new WriteConcernError({\n        errmsg,\n        code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed\n      });\n    }\n  }\n  toString() {\n    return `BulkWriteResult(${this.result})`;\n  }\n  isOk() {\n    return this.result.ok === 1;\n  }\n}\nexports.BulkWriteResult = BulkWriteResult;\n/**\r\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\r\n * @public\r\n * @category Error\r\n */\nclass WriteConcernError {\n  constructor(error) {\n    this[kServerError] = error;\n  }\n  /** Write concern error code. */\n  get code() {\n    return this[kServerError].code;\n  }\n  /** Write concern error message. */\n  get errmsg() {\n    return this[kServerError].errmsg;\n  }\n  /** Write concern error info. */\n  get errInfo() {\n    return this[kServerError].errInfo;\n  }\n  toJSON() {\n    return this[kServerError];\n  }\n  toString() {\n    return `WriteConcernError(${this.errmsg})`;\n  }\n}\nexports.WriteConcernError = WriteConcernError;\n/**\r\n * An error that occurred during a BulkWrite on the server.\r\n * @public\r\n * @category Error\r\n */\nclass WriteError {\n  constructor(err) {\n    this.err = err;\n  }\n  /** WriteError code. */\n  get code() {\n    return this.err.code;\n  }\n  /** WriteError original bulk operation index. */\n  get index() {\n    return this.err.index;\n  }\n  /** WriteError message. */\n  get errmsg() {\n    return this.err.errmsg;\n  }\n  /** WriteError details. */\n  get errInfo() {\n    return this.err.errInfo;\n  }\n  /** Returns the underlying operation that caused the error */\n  getOperation() {\n    return this.err.op;\n  }\n  toJSON() {\n    return {\n      code: this.err.code,\n      index: this.err.index,\n      errmsg: this.err.errmsg,\n      op: this.err.op\n    };\n  }\n  toString() {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n}\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  }\n  if (result == null) {\n    return;\n  }\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      errInfo: result.errInfo,\n      op: batch.operations[0]\n    };\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n  // If we have an insert Batch type\n  if (isInsertBatch(batch) && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n  // If we have an insert Batch type\n  if (isDeleteBatch(batch) && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n  let nUpserted = 0;\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n  // If we have an update Batch type\n  if (isUpdateBatch(batch) && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = 0;\n    }\n  }\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        errInfo: result.writeErrors[i].errInfo,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\nexports.mergeBatchResults = mergeBatchResults;\nfunction executeCommands(bulkOperation, options, callback) {\n  if (bulkOperation.s.batches.length === 0) {\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n  const batch = bulkOperation.s.batches.shift();\n  function resultHandler(err, result) {\n    // Error is a driver related error not a bulk op error, return early\n    if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n      return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult)));\n    }\n    if (err instanceof error_1.MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    }\n    // Merge the results together\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    if (bulkOperation.handleWriteError(callback, writeResult)) return;\n    // Execute the next command in line\n    executeCommands(bulkOperation, options, callback);\n  }\n  const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, {\n    ...options,\n    ordered: bulkOperation.isOrdered\n  });\n  if (finalOptions.bypassDocumentValidation !== true) {\n    delete finalOptions.bypassDocumentValidation;\n  }\n  // Set an operationIf if provided\n  if (bulkOperation.operationId) {\n    resultHandler.operationId = bulkOperation.operationId;\n  }\n  // Is the bypassDocumentValidation options specific\n  if (bulkOperation.s.bypassDocumentValidation === true) {\n    finalOptions.bypassDocumentValidation = true;\n  }\n  // Is the checkKeys option disabled\n  if (bulkOperation.s.checkKeys === false) {\n    finalOptions.checkKeys = false;\n  }\n  if (finalOptions.retryWrites) {\n    if (isUpdateBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n    }\n    if (isDeleteBatch(batch)) {\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n    }\n  }\n  try {\n    if (isInsertBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isUpdateBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    } else if (isDeleteBatch(batch)) {\n      (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n    }\n  } catch (err) {\n    // Force top level error\n    err.ok = 0;\n    // Merge top level error and return\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n    callback();\n  }\n}\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\n  callback(new MongoBulkWriteError({\n    message: err.result?.writeConcernError.errmsg,\n    code: err.result?.writeConcernError.result\n  }, new BulkWriteResult(bulkResult)));\n}\n/**\r\n * An error indicating an unsuccessful Bulk Write\r\n * @public\r\n * @category Error\r\n */\nclass MongoBulkWriteError extends error_1.MongoServerError {\n  /** Creates a new MongoBulkWriteError */\n  constructor(error, result) {\n    super(error);\n    this.writeErrors = [];\n    if (error instanceof WriteConcernError) this.err = error;else if (!(error instanceof Error)) {\n      this.message = error.message;\n      this.code = error.code;\n      this.writeErrors = error.writeErrors ?? [];\n    }\n    this.result = result;\n    Object.assign(this, error);\n  }\n  get name() {\n    return 'MongoBulkWriteError';\n  }\n  /** Number of documents inserted. */\n  get insertedCount() {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n  get matchedCount() {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n  get modifiedCount() {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n  get deletedCount() {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n  get upsertedCount() {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  get insertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  get upsertedIds() {\n    return this.result.upsertedIds;\n  }\n}\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\r\n * A builder object that is returned from {@link BulkOperationBase#find}.\r\n * Is used to build a write operation that involves a query filter.\r\n *\r\n * @public\r\n */\nclass FindOperators {\n  /**\r\n   * Creates a new FindOperators object.\r\n   * @internal\r\n   */\n  constructor(bulkOperation) {\n    this.bulkOperation = bulkOperation;\n  }\n  /** Add a multiple update operation to the bulk operation */\n  update(updateDocument) {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n      ...currentOp,\n      multi: true\n    }));\n  }\n  /** Add a single update operation to the bulk operation */\n  updateOne(updateDocument) {\n    if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n      throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n    }\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n      ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a replace one operation to the bulk operation */\n  replaceOne(replacement) {\n    if ((0, utils_1.hasAtomicOperators)(replacement)) {\n      throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n    }\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, {\n      ...currentOp,\n      multi: false\n    }));\n  }\n  /** Add a delete one operation to the bulk operation */\n  deleteOne() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, {\n      ...currentOp,\n      limit: 1\n    }));\n  }\n  /** Add a delete many operation to the bulk operation */\n  delete() {\n    const currentOp = buildCurrentOp(this.bulkOperation);\n    return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, {\n      ...currentOp,\n      limit: 0\n    }));\n  }\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n  upsert() {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n    this.bulkOperation.s.currentOp.upsert = true;\n    return this;\n  }\n  /** Specifies the collation for the query condition. */\n  collation(collation) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n    this.bulkOperation.s.currentOp.collation = collation;\n    return this;\n  }\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n  arrayFilters(arrayFilters) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n    return this;\n  }\n  /** Specifies hint for the bulk operation. */\n  hint(hint) {\n    if (!this.bulkOperation.s.currentOp) {\n      this.bulkOperation.s.currentOp = {};\n    }\n    this.bulkOperation.s.currentOp.hint = hint;\n    return this;\n  }\n}\nexports.FindOperators = FindOperators;\n/**\r\n * TODO(NODE-4063)\r\n * BulkWrites merge complexity is implemented in executeCommands\r\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\r\n * We would like this logic to simply live inside the BulkWriteOperation class\r\n * @internal\r\n */\nclass BulkWriteShimOperation extends operation_1.AbstractCallbackOperation {\n  constructor(bulkOperation, options) {\n    super(options);\n    this.bulkOperation = bulkOperation;\n  }\n  executeCallback(server, session, callback) {\n    if (this.options.session == null) {\n      // An implicit session could have been created by 'executeOperation'\n      // So if we stick it on finalOptions here, each bulk operation\n      // will use this same session, it'll be passed in the same way\n      // an explicit session would be\n      this.options.session = session;\n    }\n    return executeCommands(this.bulkOperation, this.options, callback);\n  }\n}\n/** @public */\nclass BulkOperationBase {\n  /**\r\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\r\n   * @internal\r\n   */\n  constructor(collection, options, isOrdered) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n    const topology = (0, utils_1.getTopology)(collection);\n    options = options == null ? {} : options;\n    // TODO Bring from driver information in hello\n    // Get the namespace for the write operations\n    const namespace = collection.s.namespace;\n    // Used to mark operation as executed\n    const executed = false;\n    // Current item\n    const currentOp = undefined;\n    // Set max byte size\n    const hello = topology.lastHello();\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n    // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n    // Final options for retryable writes\n    let finalOptions = Object.assign({}, options);\n    finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n    // Final results\n    const bulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    };\n    // Internal state\n    this.s = {\n      // Final result\n      bulkResult,\n      // Current batch state\n      currentBatch: undefined,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: undefined,\n      currentUpdateBatch: undefined,\n      currentRemoveBatch: undefined,\n      batches: [],\n      // Write concern\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace,\n      // Topology\n      topology,\n      // Options\n      options: finalOptions,\n      // BSON options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n      // Current operation\n      currentOp,\n      // Executed\n      executed,\n      // Collection\n      collection,\n      // Fundamental error\n      err: undefined,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n    };\n    // bypass Validation\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n  /**\r\n   * Add a single insert document to the bulk operation\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const bulkOp = collection.initializeOrderedBulkOp();\r\n   *\r\n   * // Adds three inserts to the bulkOp.\r\n   * bulkOp\r\n   *   .insert({ a: 1 })\r\n   *   .insert({ b: 2 })\r\n   *   .insert({ c: 3 });\r\n   * await bulkOp.execute();\r\n   * ```\r\n   */\n  insert(document) {\n    if (document._id == null && !shouldForceServerObjectId(this)) {\n      document._id = new bson_1.ObjectId();\n    }\n    return this.addToOperationsList(exports.BatchType.INSERT, document);\n  }\n  /**\r\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\r\n   * Returns a builder object used to complete the definition of the operation.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const bulkOp = collection.initializeOrderedBulkOp();\r\n   *\r\n   * // Add an updateOne to the bulkOp\r\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\r\n   *\r\n   * // Add an updateMany to the bulkOp\r\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\r\n   *\r\n   * // Add an upsert\r\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\r\n   *\r\n   * // Add a deletion\r\n   * bulkOp.find({ g: 7 }).deleteOne();\r\n   *\r\n   * // Add a multi deletion\r\n   * bulkOp.find({ h: 8 }).delete();\r\n   *\r\n   * // Add a replaceOne\r\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\r\n   *\r\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\r\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\r\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\r\n   * ]);\r\n   *\r\n   * // All of the ops will now be executed\r\n   * await bulkOp.execute();\r\n   * ```\r\n   */\n  find(selector) {\n    if (!selector) {\n      throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n    }\n    // Save a current selector\n    this.s.currentOp = {\n      selector: selector\n    };\n    return new FindOperators(this);\n  }\n  /** Specifies a raw operation to perform in the bulk write. */\n  raw(op) {\n    if (op == null || typeof op !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n    }\n    if ('insertOne' in op) {\n      const forceServerObjectId = shouldForceServerObjectId(this);\n      if (op.insertOne && op.insertOne.document == null) {\n        // NOTE: provided for legacy support, but this is a malformed operation\n        if (forceServerObjectId !== true && op.insertOne._id == null) {\n          op.insertOne._id = new bson_1.ObjectId();\n        }\n        return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n      }\n      if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n        op.insertOne.document._id = new bson_1.ObjectId();\n      }\n      return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n    }\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n      if ('replaceOne' in op) {\n        if ('q' in op.replaceOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, {\n          ...op.replaceOne,\n          multi: false\n        });\n        if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n      if ('updateOne' in op) {\n        if ('q' in op.updateOne) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, {\n          ...op.updateOne,\n          multi: false\n        });\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n      if ('updateMany' in op) {\n        if ('q' in op.updateMany) {\n          throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n        }\n        const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, {\n          ...op.updateMany,\n          multi: true\n        });\n        if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n          throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n      }\n    }\n    if ('deleteOne' in op) {\n      if ('q' in op.deleteOne) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, {\n        ...op.deleteOne,\n        limit: 1\n      }));\n    }\n    if ('deleteMany' in op) {\n      if ('q' in op.deleteMany) {\n        throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n      }\n      return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, {\n        ...op.deleteMany,\n        limit: 0\n      }));\n    }\n    // otherwise an unknown operation was provided\n    throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n  }\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n  get batches() {\n    const batches = [...this.s.batches];\n    if (this.isOrdered) {\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\n    }\n    return batches;\n  }\n  async execute(options = {}) {\n    if (this.s.executed) {\n      throw new error_1.MongoBatchReExecutionError();\n    }\n    const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n    if (writeConcern) {\n      this.s.writeConcern = writeConcern;\n    }\n    // If we have current batch\n    if (this.isOrdered) {\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n    }\n    // If we have no operations in the bulk raise an error\n    if (this.s.batches.length === 0) {\n      throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n    }\n    this.s.executed = true;\n    const finalOptions = {\n      ...this.s.options,\n      ...options\n    };\n    const operation = new BulkWriteShimOperation(this, finalOptions);\n    return (0, execute_operation_1.executeOperation)(this.s.collection.client, operation);\n  }\n  /**\r\n   * Handles the write error before executing commands\r\n   * @internal\r\n   */\n  handleWriteError(callback, writeResult) {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg ? this.s.bulkResult.writeErrors[0].errmsg : 'write operation failed';\n      callback(new MongoBulkWriteError({\n        message: msg,\n        code: this.s.bulkResult.writeErrors[0].code,\n        writeErrors: this.s.bulkResult.writeErrors\n      }, writeResult));\n      return true;\n    }\n    const writeConcernError = writeResult.getWriteConcernError();\n    if (writeConcernError) {\n      callback(new MongoBulkWriteError(writeConcernError, writeResult));\n      return true;\n    }\n    return false;\n  }\n}\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n  get() {\n    return this.s.currentIndex;\n  }\n});\nfunction shouldForceServerObjectId(bulkOperation) {\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.options.forceServerObjectId;\n  }\n  if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\n    return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n  }\n  return false;\n}\nfunction isInsertBatch(batch) {\n  return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n  return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n  return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n  let {\n    currentOp\n  } = bulkOp.s;\n  bulkOp.s.currentOp = undefined;\n  if (!currentOp) currentOp = {};\n  return currentOp;\n}","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AAUA;AACA;AACA;AACA;AACA;AAIA;AAQA;AAEA;AACA,MAAMA,YAAY,GAAGC,MAAM,CAAC,aAAa,CAAC;AAE1C;AACaC,iBAAS,GAAGC,MAAM,CAACC,MAAM,CAAC;EACrCC,MAAM,EAAE,CAAC;EACTC,MAAM,EAAE,CAAC;EACTC,MAAM,EAAE;CACA,CAAC;AAoGX;;;;;;AAMA,MAAaC,KAAK;EAShBC,YAAYC,SAAoB,EAAEC,iBAAyB;IACzD,IAAI,CAACA,iBAAiB,GAAGA,iBAAiB;IAC1C,IAAI,CAACC,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,eAAe,GAAG,EAAE;IACzB,IAAI,CAACH,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACI,UAAU,GAAG,EAAE;IACpB,IAAI,CAACC,IAAI,GAAG,CAAC;IACb,IAAI,CAACC,SAAS,GAAG,CAAC;EACpB;;AAjBFd;AAoBA;;;;AAIA,MAAae,eAAe;EAiBlB,OAAOC,aAAa,CAACC,GAAe;IAC1C,MAAMC,KAAK,GAA6B,EAAE;IAC1C,KAAK,MAAMC,GAAG,IAAIF,GAAG,EAAE;MACrBC,KAAK,CAACC,GAAG,CAACC,KAAK,CAAC,GAAGD,GAAG,CAACE,GAAG;;IAE5B,OAAOH,KAAK;EACd;EAEA;;;;EAIAX,YAAYe,UAAsB;IAChC,IAAI,CAACC,MAAM,GAAGD,UAAU;IACxB,IAAI,CAACE,aAAa,GAAG,IAAI,CAACD,MAAM,CAACE,SAAS,IAAI,CAAC;IAC/C,IAAI,CAACC,YAAY,GAAG,IAAI,CAACH,MAAM,CAACI,QAAQ,IAAI,CAAC;IAC7C,IAAI,CAACC,aAAa,GAAG,IAAI,CAACL,MAAM,CAACM,SAAS,IAAI,CAAC;IAC/C,IAAI,CAACC,YAAY,GAAG,IAAI,CAACP,MAAM,CAACQ,QAAQ,IAAI,CAAC;IAC7C,IAAI,CAACC,aAAa,GAAG,IAAI,CAACT,MAAM,CAACU,QAAQ,CAACC,MAAM,IAAI,CAAC;IACrD,IAAI,CAACC,WAAW,GAAGpB,eAAe,CAACC,aAAa,CAAC,IAAI,CAACO,MAAM,CAACU,QAAQ,CAAC;IACtE,IAAI,CAACG,WAAW,GAAGrB,eAAe,CAACC,aAAa,CAAC,IAAI,CAACO,MAAM,CAACa,WAAW,CAAC;IACzEnC,MAAM,CAACoC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;MAAEC,KAAK,EAAE,IAAI,CAACf,MAAM;MAAEgB,UAAU,EAAE;IAAK,CAAE,CAAC;EAClF;EAEA;EACA,IAAIC,EAAE;IACJ,OAAO,IAAI,CAACjB,MAAM,CAACiB,EAAE;EACvB;EAEA;;;;EAIA,IAAIf,SAAS;IACX,OAAO,IAAI,CAACF,MAAM,CAACE,SAAS;EAC9B;EAEA;;;;EAIA,IAAIgB,SAAS;IACX,OAAO,IAAI,CAAClB,MAAM,CAACkB,SAAS;EAC9B;EAEA;;;;EAIA,IAAId,QAAQ;IACV,OAAO,IAAI,CAACJ,MAAM,CAACI,QAAQ;EAC7B;EAEA;;;;EAIA,IAAIE,SAAS;IACX,OAAO,IAAI,CAACN,MAAM,CAACM,SAAS;EAC9B;EAEA;;;;EAIA,IAAIE,QAAQ;IACV,OAAO,IAAI,CAACR,MAAM,CAACQ,QAAQ;EAC7B;EAEA;;;;EAIAW,cAAc;IACZ,OAAO,IAAI,CAACnB,MAAM,CAACa,WAAW;EAChC;EAEA;;;;EAIAO,cAAc;IACZ,OAAO,IAAI,CAACpB,MAAM,CAACU,QAAQ;EAC7B;EAEA;EACAW,eAAe,CAACxB,KAAa;IAC3B,OAAO,IAAI,CAACG,MAAM,CAACU,QAAQ,CAACb,KAAK,CAAC;EACpC;EAEA;EACAyB,cAAc;IACZ,OAAO,IAAI,CAACtB,MAAM;EACpB;EAEA;EACAuB,cAAc;IACZ,OAAO,IAAI,CAACvB,MAAM,CAACwB,WAAW,CAACb,MAAM,GAAG,CAAC;EAC3C;EAEA;EACAc,kBAAkB;IAChB,OAAO,IAAI,CAACzB,MAAM,CAACwB,WAAW,CAACb,MAAM;EACvC;EAEA;EACAe,eAAe,CAAC7B,KAAa;IAC3B,OAAOA,KAAK,GAAG,IAAI,CAACG,MAAM,CAACwB,WAAW,CAACb,MAAM,GAAG,IAAI,CAACX,MAAM,CAACwB,WAAW,CAAC3B,KAAK,CAAC,GAAG8B,SAAS;EAC5F;EAEA;EACAC,cAAc;IACZ,OAAO,IAAI,CAAC5B,MAAM,CAACwB,WAAW;EAChC;EAEA;EACAK,oBAAoB;IAClB,IAAI,IAAI,CAAC7B,MAAM,CAAC8B,kBAAkB,CAACnB,MAAM,KAAK,CAAC,EAAE;MAC/C;KACD,MAAM,IAAI,IAAI,CAACX,MAAM,CAAC8B,kBAAkB,CAACnB,MAAM,KAAK,CAAC,EAAE;MACtD;MACA,OAAO,IAAI,CAACX,MAAM,CAAC8B,kBAAkB,CAAC,CAAC,CAAC;KACzC,MAAM;MACL;MACA,IAAIC,MAAM,GAAG,EAAE;MACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAChC,MAAM,CAAC8B,kBAAkB,CAACnB,MAAM,EAAEqB,CAAC,EAAE,EAAE;QAC9D,MAAMC,GAAG,GAAG,IAAI,CAACjC,MAAM,CAAC8B,kBAAkB,CAACE,CAAC,CAAC;QAC7CD,MAAM,GAAGA,MAAM,GAAGE,GAAG,CAACF,MAAM;QAE5B;QACA,IAAIC,CAAC,KAAK,CAAC,EAAED,MAAM,GAAGA,MAAM,GAAG,OAAO;;MAGxC,OAAO,IAAIG,iBAAiB,CAAC;QAAEH,MAAM;QAAEI,IAAI,EAAEC,2BAAmB,CAACC;MAAkB,CAAE,CAAC;;EAE1F;EAEAC,QAAQ;IACN,OAAO,mBAAmB,IAAI,CAACtC,MAAM,GAAG;EAC1C;EAEAuC,IAAI;IACF,OAAO,IAAI,CAACvC,MAAM,CAACiB,EAAE,KAAK,CAAC;EAC7B;;AAhKFxC;AA0KA;;;;;AAKA,MAAayD,iBAAiB;EAI5BlD,YAAYwD,KAA4B;IACtC,IAAI,CAACjE,YAAY,CAAC,GAAGiE,KAAK;EAC5B;EAEA;EACA,IAAIL,IAAI;IACN,OAAO,IAAI,CAAC5D,YAAY,CAAC,CAAC4D,IAAI;EAChC;EAEA;EACA,IAAIJ,MAAM;IACR,OAAO,IAAI,CAACxD,YAAY,CAAC,CAACwD,MAAM;EAClC;EAEA;EACA,IAAIU,OAAO;IACT,OAAO,IAAI,CAAClE,YAAY,CAAC,CAACkE,OAAO;EACnC;EAEAC,MAAM;IACJ,OAAO,IAAI,CAACnE,YAAY,CAAC;EAC3B;EAEA+D,QAAQ;IACN,OAAO,qBAAqB,IAAI,CAACP,MAAM,GAAG;EAC5C;;AA7BFtD;AAyCA;;;;;AAKA,MAAakE,UAAU;EAGrB3D,YAAYiD,GAA4B;IACtC,IAAI,CAACA,GAAG,GAAGA,GAAG;EAChB;EAEA;EACA,IAAIE,IAAI;IACN,OAAO,IAAI,CAACF,GAAG,CAACE,IAAI;EACtB;EAEA;EACA,IAAItC,KAAK;IACP,OAAO,IAAI,CAACoC,GAAG,CAACpC,KAAK;EACvB;EAEA;EACA,IAAIkC,MAAM;IACR,OAAO,IAAI,CAACE,GAAG,CAACF,MAAM;EACxB;EAEA;EACA,IAAIU,OAAO;IACT,OAAO,IAAI,CAACR,GAAG,CAACQ,OAAO;EACzB;EAEA;EACAG,YAAY;IACV,OAAO,IAAI,CAACX,GAAG,CAACY,EAAE;EACpB;EAEAH,MAAM;IACJ,OAAO;MAAEP,IAAI,EAAE,IAAI,CAACF,GAAG,CAACE,IAAI;MAAEtC,KAAK,EAAE,IAAI,CAACoC,GAAG,CAACpC,KAAK;MAAEkC,MAAM,EAAE,IAAI,CAACE,GAAG,CAACF,MAAM;MAAEc,EAAE,EAAE,IAAI,CAACZ,GAAG,CAACY;IAAE,CAAE;EACjG;EAEAP,QAAQ;IACN,OAAO,cAAcQ,IAAI,CAACC,SAAS,CAAC,IAAI,CAACL,MAAM,EAAE,CAAC,GAAG;EACvD;;AAtCFjE;AAyCA;AACA,SAAgBuE,iBAAiB,CAC/BC,KAAY,EACZlD,UAAsB,EACtBkC,GAAc,EACdjC,MAAiB;EAEjB;EACA,IAAIiC,GAAG,EAAE;IACPjC,MAAM,GAAGiC,GAAG;GACb,MAAM,IAAIjC,MAAM,IAAIA,MAAM,CAACA,MAAM,EAAE;IAClCA,MAAM,GAAGA,MAAM,CAACA,MAAM;;EAGxB,IAAIA,MAAM,IAAI,IAAI,EAAE;IAClB;;EAGF;EACA,IAAIA,MAAM,CAACiB,EAAE,KAAK,CAAC,IAAIlB,UAAU,CAACkB,EAAE,KAAK,CAAC,EAAE;IAC1ClB,UAAU,CAACkB,EAAE,GAAG,CAAC;IAEjB,MAAMiC,UAAU,GAAG;MACjBrD,KAAK,EAAE,CAAC;MACRsC,IAAI,EAAEnC,MAAM,CAACmC,IAAI,IAAI,CAAC;MACtBJ,MAAM,EAAE/B,MAAM,CAACmD,OAAO;MACtBV,OAAO,EAAEzC,MAAM,CAACyC,OAAO;MACvBI,EAAE,EAAEI,KAAK,CAAC5D,UAAU,CAAC,CAAC;KACvB;IAEDU,UAAU,CAACyB,WAAW,CAAC4B,IAAI,CAAC,IAAIT,UAAU,CAACO,UAAU,CAAC,CAAC;IACvD;GACD,MAAM,IAAIlD,MAAM,CAACiB,EAAE,KAAK,CAAC,IAAIlB,UAAU,CAACkB,EAAE,KAAK,CAAC,EAAE;IACjD;;EAGF;EACA,IAAIoC,aAAa,CAACJ,KAAK,CAAC,IAAIjD,MAAM,CAACsD,CAAC,EAAE;IACpCvD,UAAU,CAACG,SAAS,GAAGH,UAAU,CAACG,SAAS,GAAGF,MAAM,CAACsD,CAAC;;EAGxD;EACA,IAAIC,aAAa,CAACN,KAAK,CAAC,IAAIjD,MAAM,CAACsD,CAAC,EAAE;IACpCvD,UAAU,CAACS,QAAQ,GAAGT,UAAU,CAACS,QAAQ,GAAGR,MAAM,CAACsD,CAAC;;EAGtD,IAAIpC,SAAS,GAAG,CAAC;EAEjB;EACA,IAAIsC,KAAK,CAACC,OAAO,CAACzD,MAAM,CAACU,QAAQ,CAAC,EAAE;IAClCQ,SAAS,GAAGlB,MAAM,CAACU,QAAQ,CAACC,MAAM;IAElC,KAAK,IAAIqB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhC,MAAM,CAACU,QAAQ,CAACC,MAAM,EAAEqB,CAAC,EAAE,EAAE;MAC/CjC,UAAU,CAACW,QAAQ,CAAC0C,IAAI,CAAC;QACvBvD,KAAK,EAAEG,MAAM,CAACU,QAAQ,CAACsB,CAAC,CAAC,CAACnC,KAAK,GAAGoD,KAAK,CAAC/D,iBAAiB;QACzDY,GAAG,EAAEE,MAAM,CAACU,QAAQ,CAACsB,CAAC,CAAC,CAAClC;OACzB,CAAC;;GAEL,MAAM,IAAIE,MAAM,CAACU,QAAQ,EAAE;IAC1BQ,SAAS,GAAG,CAAC;IAEbnB,UAAU,CAACW,QAAQ,CAAC0C,IAAI,CAAC;MACvBvD,KAAK,EAAEoD,KAAK,CAAC/D,iBAAiB;MAC9BY,GAAG,EAAEE,MAAM,CAACU;KACb,CAAC;;EAGJ;EACA,IAAIgD,aAAa,CAACT,KAAK,CAAC,IAAIjD,MAAM,CAACsD,CAAC,EAAE;IACpC,MAAMhD,SAAS,GAAGN,MAAM,CAACM,SAAS;IAClCP,UAAU,CAACmB,SAAS,GAAGnB,UAAU,CAACmB,SAAS,GAAGA,SAAS;IACvDnB,UAAU,CAACK,QAAQ,GAAGL,UAAU,CAACK,QAAQ,IAAIJ,MAAM,CAACsD,CAAC,GAAGpC,SAAS,CAAC;IAElE,IAAI,OAAOZ,SAAS,KAAK,QAAQ,EAAE;MACjCP,UAAU,CAACO,SAAS,GAAGP,UAAU,CAACO,SAAS,GAAGA,SAAS;KACxD,MAAM;MACLP,UAAU,CAACO,SAAS,GAAG,CAAC;;;EAI5B,IAAIkD,KAAK,CAACC,OAAO,CAACzD,MAAM,CAACwB,WAAW,CAAC,EAAE;IACrC,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhC,MAAM,CAACwB,WAAW,CAACb,MAAM,EAAEqB,CAAC,EAAE,EAAE;MAClD,MAAMkB,UAAU,GAAG;QACjBrD,KAAK,EAAEoD,KAAK,CAAC7D,eAAe,CAACY,MAAM,CAACwB,WAAW,CAACQ,CAAC,CAAC,CAACnC,KAAK,CAAC;QACzDsC,IAAI,EAAEnC,MAAM,CAACwB,WAAW,CAACQ,CAAC,CAAC,CAACG,IAAI;QAChCJ,MAAM,EAAE/B,MAAM,CAACwB,WAAW,CAACQ,CAAC,CAAC,CAACD,MAAM;QACpCU,OAAO,EAAEzC,MAAM,CAACwB,WAAW,CAACQ,CAAC,CAAC,CAACS,OAAO;QACtCI,EAAE,EAAEI,KAAK,CAAC5D,UAAU,CAACW,MAAM,CAACwB,WAAW,CAACQ,CAAC,CAAC,CAACnC,KAAK;OACjD;MAEDE,UAAU,CAACyB,WAAW,CAAC4B,IAAI,CAAC,IAAIT,UAAU,CAACO,UAAU,CAAC,CAAC;;;EAI3D,IAAIlD,MAAM,CAAC2D,iBAAiB,EAAE;IAC5B5D,UAAU,CAAC+B,kBAAkB,CAACsB,IAAI,CAAC,IAAIlB,iBAAiB,CAAClC,MAAM,CAAC2D,iBAAiB,CAAC,CAAC;;AAEvF;AAhGAlF;AAkGA,SAASmF,eAAe,CACtBC,aAAgC,EAChCC,OAAyB,EACzBC,QAAmC;EAEnC,IAAIF,aAAa,CAACG,CAAC,CAACC,OAAO,CAACtD,MAAM,KAAK,CAAC,EAAE;IACxC,OAAOoD,QAAQ,CAACpC,SAAS,EAAE,IAAInC,eAAe,CAACqE,aAAa,CAACG,CAAC,CAACjE,UAAU,CAAC,CAAC;;EAG7E,MAAMkD,KAAK,GAAGY,aAAa,CAACG,CAAC,CAACC,OAAO,CAACC,KAAK,EAAW;EAEtD,SAASC,aAAa,CAAClC,GAAc,EAAEjC,MAAiB;IACtD;IACA,IAAIiC,GAAG,IAAI,SAAS,IAAIA,GAAG,IAAI,EAAEA,GAAG,YAAYG,8BAAsB,CAAC,EAAE;MACvE,OAAO2B,QAAQ,CACb,IAAIK,mBAAmB,CAACnC,GAAG,EAAE,IAAIzC,eAAe,CAACqE,aAAa,CAACG,CAAC,CAACjE,UAAU,CAAC,CAAC,CAC9E;;IAGH,IAAIkC,GAAG,YAAYG,8BAAsB,EAAE;MACzC,OAAOiC,4BAA4B,CAACpB,KAAK,EAAEY,aAAa,CAACG,CAAC,CAACjE,UAAU,EAAEkC,GAAG,EAAE8B,QAAQ,CAAC;;IAGvF;IACAf,iBAAiB,CAACC,KAAK,EAAEY,aAAa,CAACG,CAAC,CAACjE,UAAU,EAAEkC,GAAG,EAAEjC,MAAM,CAAC;IACjE,MAAMsE,WAAW,GAAG,IAAI9E,eAAe,CAACqE,aAAa,CAACG,CAAC,CAACjE,UAAU,CAAC;IACnE,IAAI8D,aAAa,CAACU,gBAAgB,CAACR,QAAQ,EAAEO,WAAW,CAAC,EAAE;IAE3D;IACAV,eAAe,CAACC,aAAa,EAAEC,OAAO,EAAEC,QAAQ,CAAC;EACnD;EAEA,MAAMS,YAAY,GAAG,0BAAc,EAACX,aAAa,EAAE;IACjD,GAAGC,OAAO;IACVW,OAAO,EAAEZ,aAAa,CAACa;GACxB,CAAC;EAEF,IAAIF,YAAY,CAACG,wBAAwB,KAAK,IAAI,EAAE;IAClD,OAAOH,YAAY,CAACG,wBAAwB;;EAG9C;EACA,IAAId,aAAa,CAACe,WAAW,EAAE;IAC7BT,aAAa,CAACS,WAAW,GAAGf,aAAa,CAACe,WAAW;;EAGvD;EACA,IAAIf,aAAa,CAACG,CAAC,CAACW,wBAAwB,KAAK,IAAI,EAAE;IACrDH,YAAY,CAACG,wBAAwB,GAAG,IAAI;;EAG9C;EACA,IAAId,aAAa,CAACG,CAAC,CAACa,SAAS,KAAK,KAAK,EAAE;IACvCL,YAAY,CAACK,SAAS,GAAG,KAAK;;EAGhC,IAAIL,YAAY,CAACM,WAAW,EAAE;IAC5B,IAAIpB,aAAa,CAACT,KAAK,CAAC,EAAE;MACxBuB,YAAY,CAACM,WAAW,GAAGN,YAAY,CAACM,WAAW,IAAI,CAAC7B,KAAK,CAAC5D,UAAU,CAAC0F,IAAI,CAAClC,EAAE,IAAIA,EAAE,CAACmC,KAAK,CAAC;;IAG/F,IAAIzB,aAAa,CAACN,KAAK,CAAC,EAAE;MACxBuB,YAAY,CAACM,WAAW,GACtBN,YAAY,CAACM,WAAW,IAAI,CAAC7B,KAAK,CAAC5D,UAAU,CAAC0F,IAAI,CAAClC,EAAE,IAAIA,EAAE,CAACoC,KAAK,KAAK,CAAC,CAAC;;;EAI9E,IAAI;IACF,IAAI5B,aAAa,CAACJ,KAAK,CAAC,EAAE;MACxB,wCAAgB,EACdY,aAAa,CAACG,CAAC,CAACkB,UAAU,CAACC,MAAM,EACjC,IAAIC,wBAAe,CAACvB,aAAa,CAACG,CAAC,CAACqB,SAAS,EAAEpC,KAAK,CAAC5D,UAAU,EAAEmF,YAAY,CAAC,EAC9EL,aAAa,CACd;KACF,MAAM,IAAIT,aAAa,CAACT,KAAK,CAAC,EAAE;MAC/B,wCAAgB,EACdY,aAAa,CAACG,CAAC,CAACkB,UAAU,CAACC,MAAM,EACjC,IAAIG,wBAAe,CAACzB,aAAa,CAACG,CAAC,CAACqB,SAAS,EAAEpC,KAAK,CAAC5D,UAAU,EAAEmF,YAAY,CAAC,EAC9EL,aAAa,CACd;KACF,MAAM,IAAIZ,aAAa,CAACN,KAAK,CAAC,EAAE;MAC/B,wCAAgB,EACdY,aAAa,CAACG,CAAC,CAACkB,UAAU,CAACC,MAAM,EACjC,IAAII,wBAAe,CAAC1B,aAAa,CAACG,CAAC,CAACqB,SAAS,EAAEpC,KAAK,CAAC5D,UAAU,EAAEmF,YAAY,CAAC,EAC9EL,aAAa,CACd;;GAEJ,CAAC,OAAOlC,GAAG,EAAE;IACZ;IACAA,GAAG,CAAChB,EAAE,GAAG,CAAC;IACV;IACA+B,iBAAiB,CAACC,KAAK,EAAEY,aAAa,CAACG,CAAC,CAACjE,UAAU,EAAEkC,GAAG,EAAEN,SAAS,CAAC;IACpEoC,QAAQ,EAAE;;AAEd;AAEA,SAASM,4BAA4B,CACnCpB,KAAY,EACZlD,UAAsB,EACtBkC,GAA2B,EAC3B8B,QAAmC;EAEnCf,iBAAiB,CAACC,KAAK,EAAElD,UAAU,EAAE4B,SAAS,EAAEM,GAAG,CAACjC,MAAM,CAAC;EAE3D+D,QAAQ,CACN,IAAIK,mBAAmB,CACrB;IACEjB,OAAO,EAAElB,GAAG,CAACjC,MAAM,EAAE2D,iBAAiB,CAAC5B,MAAM;IAC7CI,IAAI,EAAEF,GAAG,CAACjC,MAAM,EAAE2D,iBAAiB,CAAC3D;GACrC,EACD,IAAIR,eAAe,CAACO,UAAU,CAAC,CAChC,CACF;AACH;AAEA;;;;;AAKA,MAAaqE,mBAAoB,SAAQhC,wBAAgB;EAKvD;EACApD,YACEwD,KAGY,EACZxC,MAAuB;IAEvB,KAAK,CAACwC,KAAK,CAAC;IAXd,gBAAW,GAA0B,EAAE;IAarC,IAAIA,KAAK,YAAYN,iBAAiB,EAAE,IAAI,CAACD,GAAG,GAAGO,KAAK,CAAC,KACpD,IAAI,EAAEA,KAAK,YAAYgD,KAAK,CAAC,EAAE;MAClC,IAAI,CAACrC,OAAO,GAAGX,KAAK,CAACW,OAAO;MAC5B,IAAI,CAAChB,IAAI,GAAGK,KAAK,CAACL,IAAI;MACtB,IAAI,CAACX,WAAW,GAAGgB,KAAK,CAAChB,WAAW,IAAI,EAAE;;IAG5C,IAAI,CAACxB,MAAM,GAAGA,MAAM;IACpBtB,MAAM,CAAC+G,MAAM,CAAC,IAAI,EAAEjD,KAAK,CAAC;EAC5B;EAEA,IAAakD,IAAI;IACf,OAAO,qBAAqB;EAC9B;EAEA;EACA,IAAIzF,aAAa;IACf,OAAO,IAAI,CAACD,MAAM,CAACC,aAAa;EAClC;EACA;EACA,IAAIE,YAAY;IACd,OAAO,IAAI,CAACH,MAAM,CAACG,YAAY;EACjC;EACA;EACA,IAAIE,aAAa;IACf,OAAO,IAAI,CAACL,MAAM,CAACK,aAAa;EAClC;EACA;EACA,IAAIE,YAAY;IACd,OAAO,IAAI,CAACP,MAAM,CAACO,YAAY;EACjC;EACA;EACA,IAAIE,aAAa;IACf,OAAO,IAAI,CAACT,MAAM,CAACS,aAAa;EAClC;EACA;EACA,IAAII,WAAW;IACb,OAAO,IAAI,CAACb,MAAM,CAACa,WAAW;EAChC;EACA;EACA,IAAID,WAAW;IACb,OAAO,IAAI,CAACZ,MAAM,CAACY,WAAW;EAChC;;AAzDFnC;AA4DA;;;;;;AAMA,MAAakH,aAAa;EAGxB;;;;EAIA3G,YAAY6E,aAAgC;IAC1C,IAAI,CAACA,aAAa,GAAGA,aAAa;EACpC;EAEA;EACA+B,MAAM,CAACC,cAAqC;IAC1C,MAAMC,SAAS,GAAGC,cAAc,CAAC,IAAI,CAAClC,aAAa,CAAC;IACpD,OAAO,IAAI,CAACA,aAAa,CAACmC,mBAAmB,CAC3CvH,iBAAS,CAACI,MAAM,EAChB,gCAAmB,EAACiH,SAAS,CAACG,QAAQ,EAAEJ,cAAc,EAAE;MACtD,GAAGC,SAAS;MACZd,KAAK,EAAE;KACR,CAAC,CACH;EACH;EAEA;EACAkB,SAAS,CAACL,cAAqC;IAC7C,IAAI,CAAC,8BAAkB,EAACA,cAAc,CAAC,EAAE;MACvC,MAAM,IAAIzD,iCAAyB,CAAC,2CAA2C,CAAC;;IAGlF,MAAM0D,SAAS,GAAGC,cAAc,CAAC,IAAI,CAAClC,aAAa,CAAC;IACpD,OAAO,IAAI,CAACA,aAAa,CAACmC,mBAAmB,CAC3CvH,iBAAS,CAACI,MAAM,EAChB,gCAAmB,EAACiH,SAAS,CAACG,QAAQ,EAAEJ,cAAc,EAAE;MAAE,GAAGC,SAAS;MAAEd,KAAK,EAAE;IAAK,CAAE,CAAC,CACxF;EACH;EAEA;EACAmB,UAAU,CAACC,WAAqB;IAC9B,IAAI,8BAAkB,EAACA,WAAW,CAAC,EAAE;MACnC,MAAM,IAAIhE,iCAAyB,CAAC,oDAAoD,CAAC;;IAG3F,MAAM0D,SAAS,GAAGC,cAAc,CAAC,IAAI,CAAClC,aAAa,CAAC;IACpD,OAAO,IAAI,CAACA,aAAa,CAACmC,mBAAmB,CAC3CvH,iBAAS,CAACI,MAAM,EAChB,gCAAmB,EAACiH,SAAS,CAACG,QAAQ,EAAEG,WAAW,EAAE;MAAE,GAAGN,SAAS;MAAEd,KAAK,EAAE;IAAK,CAAE,CAAC,CACrF;EACH;EAEA;EACAqB,SAAS;IACP,MAAMP,SAAS,GAAGC,cAAc,CAAC,IAAI,CAAClC,aAAa,CAAC;IACpD,OAAO,IAAI,CAACA,aAAa,CAACmC,mBAAmB,CAC3CvH,iBAAS,CAACK,MAAM,EAChB,gCAAmB,EAACgH,SAAS,CAACG,QAAQ,EAAE;MAAE,GAAGH,SAAS;MAAEb,KAAK,EAAE;IAAC,CAAE,CAAC,CACpE;EACH;EAEA;EACAqB,MAAM;IACJ,MAAMR,SAAS,GAAGC,cAAc,CAAC,IAAI,CAAClC,aAAa,CAAC;IACpD,OAAO,IAAI,CAACA,aAAa,CAACmC,mBAAmB,CAC3CvH,iBAAS,CAACK,MAAM,EAChB,gCAAmB,EAACgH,SAAS,CAACG,QAAQ,EAAE;MAAE,GAAGH,SAAS;MAAEb,KAAK,EAAE;IAAC,CAAE,CAAC,CACpE;EACH;EAEA;EACAsB,MAAM;IACJ,IAAI,CAAC,IAAI,CAAC1C,aAAa,CAACG,CAAC,CAAC8B,SAAS,EAAE;MACnC,IAAI,CAACjC,aAAa,CAACG,CAAC,CAAC8B,SAAS,GAAG,EAAE;;IAGrC,IAAI,CAACjC,aAAa,CAACG,CAAC,CAAC8B,SAAS,CAACS,MAAM,GAAG,IAAI;IAC5C,OAAO,IAAI;EACb;EAEA;EACAC,SAAS,CAACA,SAA2B;IACnC,IAAI,CAAC,IAAI,CAAC3C,aAAa,CAACG,CAAC,CAAC8B,SAAS,EAAE;MACnC,IAAI,CAACjC,aAAa,CAACG,CAAC,CAAC8B,SAAS,GAAG,EAAE;;IAGrC,IAAI,CAACjC,aAAa,CAACG,CAAC,CAAC8B,SAAS,CAACU,SAAS,GAAGA,SAAS;IACpD,OAAO,IAAI;EACb;EAEA;EACAC,YAAY,CAACA,YAAwB;IACnC,IAAI,CAAC,IAAI,CAAC5C,aAAa,CAACG,CAAC,CAAC8B,SAAS,EAAE;MACnC,IAAI,CAACjC,aAAa,CAACG,CAAC,CAAC8B,SAAS,GAAG,EAAE;;IAGrC,IAAI,CAACjC,aAAa,CAACG,CAAC,CAAC8B,SAAS,CAACW,YAAY,GAAGA,YAAY;IAC1D,OAAO,IAAI;EACb;EAEA;EACAC,IAAI,CAACA,IAAU;IACb,IAAI,CAAC,IAAI,CAAC7C,aAAa,CAACG,CAAC,CAAC8B,SAAS,EAAE;MACnC,IAAI,CAACjC,aAAa,CAACG,CAAC,CAAC8B,SAAS,GAAG,EAAE;;IAGrC,IAAI,CAACjC,aAAa,CAACG,CAAC,CAAC8B,SAAS,CAACY,IAAI,GAAGA,IAAI;IAC1C,OAAO,IAAI;EACb;;AAzGFjI;AAiKA;;;;;;;AAOA,MAAMkI,sBAAuB,SAAQC,qCAAyB;EAE5D5H,YAAY6E,aAAgC,EAAEC,OAAyB;IACrE,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACD,aAAa,GAAGA,aAAa;EACpC;EAEAgD,eAAe,CACbC,MAAc,EACdC,OAAkC,EAClChD,QAAuB;IAEvB,IAAI,IAAI,CAACD,OAAO,CAACiD,OAAO,IAAI,IAAI,EAAE;MAChC;MACA;MACA;MACA;MACA,IAAI,CAACjD,OAAO,CAACiD,OAAO,GAAGA,OAAO;;IAEhC,OAAOnD,eAAe,CAAC,IAAI,CAACC,aAAa,EAAE,IAAI,CAACC,OAAO,EAAEC,QAAQ,CAAC;EACpE;;AAGF;AACA,MAAsBiD,iBAAiB;EAMrC;;;;EAIAhI,YAAYkG,UAAsB,EAAEpB,OAAyB,EAAEY,SAAkB;IAC/E;IACA,IAAI,CAACA,SAAS,GAAGA,SAAS;IAE1B,MAAMuC,QAAQ,GAAG,uBAAW,EAAC/B,UAAU,CAAC;IACxCpB,OAAO,GAAGA,OAAO,IAAI,IAAI,GAAG,EAAE,GAAGA,OAAO;IACxC;IACA;IACA,MAAMuB,SAAS,GAAGH,UAAU,CAAClB,CAAC,CAACqB,SAAS;IACxC;IACA,MAAM6B,QAAQ,GAAG,KAAK;IAEtB;IACA,MAAMpB,SAAS,GAAGnE,SAAS;IAE3B;IACA,MAAMwF,KAAK,GAAGF,QAAQ,CAACG,SAAS,EAAE;IAElC;IACA;IACA,MAAMC,mBAAmB,GAAG,CAAC,EAAEJ,QAAQ,CAACjD,CAAC,CAACF,OAAO,IAAImD,QAAQ,CAACjD,CAAC,CAACF,OAAO,CAACwD,aAAa,CAAC;IACtF,MAAMC,iBAAiB,GACrBJ,KAAK,IAAIA,KAAK,CAACI,iBAAiB,GAAGJ,KAAK,CAACI,iBAAiB,GAAG,IAAI,GAAG,IAAI,GAAG,EAAE;IAC/E,MAAMC,iBAAiB,GAAGH,mBAAmB,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,GAAGE,iBAAiB;IACnF,MAAME,iBAAiB,GAAGN,KAAK,IAAIA,KAAK,CAACM,iBAAiB,GAAGN,KAAK,CAACM,iBAAiB,GAAG,IAAI;IAE3F;IACA;IACA;IACA;IACA;IACA,MAAMC,UAAU,GAAG,CAACD,iBAAiB,GAAG,CAAC,EAAEnF,QAAQ,CAAC,EAAE,CAAC,CAAC3B,MAAM,GAAG,CAAC;IAElE;IACA,IAAI6D,YAAY,GAAG9F,MAAM,CAAC+G,MAAM,CAAC,EAAE,EAAE3B,OAAO,CAAC;IAC7CU,YAAY,GAAG,gCAAoB,EAACA,YAAY,EAAEU,UAAU,CAAClB,CAAC,CAAC2D,EAAE,CAAC;IAElE;IACA,MAAM5H,UAAU,GAAe;MAC7BkB,EAAE,EAAE,CAAC;MACLO,WAAW,EAAE,EAAE;MACfM,kBAAkB,EAAE,EAAE;MACtBjB,WAAW,EAAE,EAAE;MACfX,SAAS,EAAE,CAAC;MACZgB,SAAS,EAAE,CAAC;MACZd,QAAQ,EAAE,CAAC;MACXE,SAAS,EAAE,CAAC;MACZE,QAAQ,EAAE,CAAC;MACXE,QAAQ,EAAE;KACX;IAED;IACA,IAAI,CAACsD,CAAC,GAAG;MACP;MACAjE,UAAU;MACV;MACA6H,YAAY,EAAEjG,SAAS;MACvBxC,YAAY,EAAE,CAAC;MACf;MACA0I,gBAAgB,EAAE,CAAC;MACnBC,qBAAqB,EAAE,CAAC;MACxB;MACAC,kBAAkB,EAAEpG,SAAS;MAC7BqG,kBAAkB,EAAErG,SAAS;MAC7BsG,kBAAkB,EAAEtG,SAAS;MAC7BsC,OAAO,EAAE,EAAE;MACX;MACAiE,YAAY,EAAEC,4BAAY,CAACC,WAAW,CAACtE,OAAO,CAAC;MAC/C;MACAyD,iBAAiB;MACjBC,iBAAiB;MACjBC,iBAAiB;MACjBC,UAAU;MACV;MACArC,SAAS;MACT;MACA4B,QAAQ;MACR;MACAnD,OAAO,EAAEU,YAAY;MACrB;MACA6D,WAAW,EAAE,6BAAkB,EAACvE,OAAO,CAAC;MACxC;MACAgC,SAAS;MACT;MACAoB,QAAQ;MACR;MACAhC,UAAU;MACV;MACAjD,GAAG,EAAEN,SAAS;MACd;MACAkD,SAAS,EAAE,OAAOf,OAAO,CAACe,SAAS,KAAK,SAAS,GAAGf,OAAO,CAACe,SAAS,GAAG;KACzE;IAED;IACA,IAAIf,OAAO,CAACa,wBAAwB,KAAK,IAAI,EAAE;MAC7C,IAAI,CAACX,CAAC,CAACW,wBAAwB,GAAG,IAAI;;EAE1C;EAEA;;;;;;;;;;;;;;;EAeA2D,MAAM,CAACC,QAAkB;IACvB,IAAIA,QAAQ,CAACzI,GAAG,IAAI,IAAI,IAAI,CAAC0I,yBAAyB,CAAC,IAAI,CAAC,EAAE;MAC5DD,QAAQ,CAACzI,GAAG,GAAG,IAAI2I,eAAQ,EAAE;;IAG/B,OAAO,IAAI,CAACzC,mBAAmB,CAACvH,iBAAS,CAACG,MAAM,EAAE2J,QAAQ,CAAC;EAC7D;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmCAG,IAAI,CAACzC,QAAkB;IACrB,IAAI,CAACA,QAAQ,EAAE;MACb,MAAM,IAAI7D,iCAAyB,CAAC,6CAA6C,CAAC;;IAGpF;IACA,IAAI,CAAC4B,CAAC,CAAC8B,SAAS,GAAG;MACjBG,QAAQ,EAAEA;KACX;IAED,OAAO,IAAIN,aAAa,CAAC,IAAI,CAAC;EAChC;EAEA;EACAgD,GAAG,CAAC9F,EAAyB;IAC3B,IAAIA,EAAE,IAAI,IAAI,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;MACxC,MAAM,IAAIT,iCAAyB,CAAC,mDAAmD,CAAC;;IAE1F,IAAI,WAAW,IAAIS,EAAE,EAAE;MACrB,MAAM+F,mBAAmB,GAAGJ,yBAAyB,CAAC,IAAI,CAAC;MAC3D,IAAI3F,EAAE,CAACgG,SAAS,IAAIhG,EAAE,CAACgG,SAAS,CAACN,QAAQ,IAAI,IAAI,EAAE;QACjD;QACA,IAAIK,mBAAmB,KAAK,IAAI,IAAK/F,EAAE,CAACgG,SAAsB,CAAC/I,GAAG,IAAI,IAAI,EAAE;UACzE+C,EAAE,CAACgG,SAAsB,CAAC/I,GAAG,GAAG,IAAI2I,eAAQ,EAAE;;QAGjD,OAAO,IAAI,CAACzC,mBAAmB,CAACvH,iBAAS,CAACG,MAAM,EAAEiE,EAAE,CAACgG,SAAS,CAAC;;MAGjE,IAAID,mBAAmB,KAAK,IAAI,IAAI/F,EAAE,CAACgG,SAAS,CAACN,QAAQ,CAACzI,GAAG,IAAI,IAAI,EAAE;QACrE+C,EAAE,CAACgG,SAAS,CAACN,QAAQ,CAACzI,GAAG,GAAG,IAAI2I,eAAQ,EAAE;;MAG5C,OAAO,IAAI,CAACzC,mBAAmB,CAACvH,iBAAS,CAACG,MAAM,EAAEiE,EAAE,CAACgG,SAAS,CAACN,QAAQ,CAAC;;IAG1E,IAAI,YAAY,IAAI1F,EAAE,IAAI,WAAW,IAAIA,EAAE,IAAI,YAAY,IAAIA,EAAE,EAAE;MACjE,IAAI,YAAY,IAAIA,EAAE,EAAE;QACtB,IAAI,GAAG,IAAIA,EAAE,CAACsD,UAAU,EAAE;UACxB,MAAM,IAAI/D,iCAAyB,CAAC,gCAAgC,CAAC;;QAEvE,MAAM0G,eAAe,GAAG,gCAAmB,EACzCjG,EAAE,CAACsD,UAAU,CAAC4C,MAAM,EACpBlG,EAAE,CAACsD,UAAU,CAACC,WAAW,EACzB;UAAE,GAAGvD,EAAE,CAACsD,UAAU;UAAEnB,KAAK,EAAE;QAAK,CAAE,CACnC;QACD,IAAI,8BAAkB,EAAC8D,eAAe,CAACE,CAAC,CAAC,EAAE;UACzC,MAAM,IAAI5G,iCAAyB,CAAC,oDAAoD,CAAC;;QAE3F,OAAO,IAAI,CAAC4D,mBAAmB,CAACvH,iBAAS,CAACI,MAAM,EAAEiK,eAAe,CAAC;;MAGpE,IAAI,WAAW,IAAIjG,EAAE,EAAE;QACrB,IAAI,GAAG,IAAIA,EAAE,CAACqD,SAAS,EAAE;UACvB,MAAM,IAAI9D,iCAAyB,CAAC,gCAAgC,CAAC;;QAEvE,MAAM0G,eAAe,GAAG,gCAAmB,EAACjG,EAAE,CAACqD,SAAS,CAAC6C,MAAM,EAAElG,EAAE,CAACqD,SAAS,CAACN,MAAM,EAAE;UACpF,GAAG/C,EAAE,CAACqD,SAAS;UACflB,KAAK,EAAE;SACR,CAAC;QACF,IAAI,CAAC,8BAAkB,EAAC8D,eAAe,CAACE,CAAC,CAAC,EAAE;UAC1C,MAAM,IAAI5G,iCAAyB,CAAC,2CAA2C,CAAC;;QAElF,OAAO,IAAI,CAAC4D,mBAAmB,CAACvH,iBAAS,CAACI,MAAM,EAAEiK,eAAe,CAAC;;MAGpE,IAAI,YAAY,IAAIjG,EAAE,EAAE;QACtB,IAAI,GAAG,IAAIA,EAAE,CAACoG,UAAU,EAAE;UACxB,MAAM,IAAI7G,iCAAyB,CAAC,gCAAgC,CAAC;;QAEvE,MAAM0G,eAAe,GAAG,gCAAmB,EAACjG,EAAE,CAACoG,UAAU,CAACF,MAAM,EAAElG,EAAE,CAACoG,UAAU,CAACrD,MAAM,EAAE;UACtF,GAAG/C,EAAE,CAACoG,UAAU;UAChBjE,KAAK,EAAE;SACR,CAAC;QACF,IAAI,CAAC,8BAAkB,EAAC8D,eAAe,CAACE,CAAC,CAAC,EAAE;UAC1C,MAAM,IAAI5G,iCAAyB,CAAC,2CAA2C,CAAC;;QAElF,OAAO,IAAI,CAAC4D,mBAAmB,CAACvH,iBAAS,CAACI,MAAM,EAAEiK,eAAe,CAAC;;;IAItE,IAAI,WAAW,IAAIjG,EAAE,EAAE;MACrB,IAAI,GAAG,IAAIA,EAAE,CAACwD,SAAS,EAAE;QACvB,MAAM,IAAIjE,iCAAyB,CAAC,gCAAgC,CAAC;;MAEvE,OAAO,IAAI,CAAC4D,mBAAmB,CAC7BvH,iBAAS,CAACK,MAAM,EAChB,gCAAmB,EAAC+D,EAAE,CAACwD,SAAS,CAAC0C,MAAM,EAAE;QAAE,GAAGlG,EAAE,CAACwD,SAAS;QAAEpB,KAAK,EAAE;MAAC,CAAE,CAAC,CACxE;;IAGH,IAAI,YAAY,IAAIpC,EAAE,EAAE;MACtB,IAAI,GAAG,IAAIA,EAAE,CAACqG,UAAU,EAAE;QACxB,MAAM,IAAI9G,iCAAyB,CAAC,gCAAgC,CAAC;;MAEvE,OAAO,IAAI,CAAC4D,mBAAmB,CAC7BvH,iBAAS,CAACK,MAAM,EAChB,gCAAmB,EAAC+D,EAAE,CAACqG,UAAU,CAACH,MAAM,EAAE;QAAE,GAAGlG,EAAE,CAACqG,UAAU;QAAEjE,KAAK,EAAE;MAAC,CAAE,CAAC,CAC1E;;IAGH;IACA,MAAM,IAAI7C,iCAAyB,CACjC,iFAAiF,CAClF;EACH;EAEA,IAAIiG,WAAW;IACb,OAAO,IAAI,CAACrE,CAAC,CAACqE,WAAW;EAC3B;EAEA,IAAIH,YAAY;IACd,OAAO,IAAI,CAAClE,CAAC,CAACkE,YAAY;EAC5B;EAEA,IAAIjE,OAAO;IACT,MAAMA,OAAO,GAAG,CAAC,GAAG,IAAI,CAACD,CAAC,CAACC,OAAO,CAAC;IACnC,IAAI,IAAI,CAACS,SAAS,EAAE;MAClB,IAAI,IAAI,CAACV,CAAC,CAAC4D,YAAY,EAAE3D,OAAO,CAACb,IAAI,CAAC,IAAI,CAACY,CAAC,CAAC4D,YAAY,CAAC;KAC3D,MAAM;MACL,IAAI,IAAI,CAAC5D,CAAC,CAAC+D,kBAAkB,EAAE9D,OAAO,CAACb,IAAI,CAAC,IAAI,CAACY,CAAC,CAAC+D,kBAAkB,CAAC;MACtE,IAAI,IAAI,CAAC/D,CAAC,CAACgE,kBAAkB,EAAE/D,OAAO,CAACb,IAAI,CAAC,IAAI,CAACY,CAAC,CAACgE,kBAAkB,CAAC;MACtE,IAAI,IAAI,CAAChE,CAAC,CAACiE,kBAAkB,EAAEhE,OAAO,CAACb,IAAI,CAAC,IAAI,CAACY,CAAC,CAACiE,kBAAkB,CAAC;;IAExE,OAAOhE,OAAO;EAChB;EAEA,MAAMkF,OAAO,CAACrF,UAA4B,EAAE;IAC1C,IAAI,IAAI,CAACE,CAAC,CAACkD,QAAQ,EAAE;MACnB,MAAM,IAAI9E,kCAA0B,EAAE;;IAGxC,MAAM8F,YAAY,GAAGC,4BAAY,CAACC,WAAW,CAACtE,OAAO,CAAC;IACtD,IAAIoE,YAAY,EAAE;MAChB,IAAI,CAAClE,CAAC,CAACkE,YAAY,GAAGA,YAAY;;IAGpC;IACA,IAAI,IAAI,CAACxD,SAAS,EAAE;MAClB,IAAI,IAAI,CAACV,CAAC,CAAC4D,YAAY,EAAE,IAAI,CAAC5D,CAAC,CAACC,OAAO,CAACb,IAAI,CAAC,IAAI,CAACY,CAAC,CAAC4D,YAAY,CAAC;KAClE,MAAM;MACL,IAAI,IAAI,CAAC5D,CAAC,CAAC+D,kBAAkB,EAAE,IAAI,CAAC/D,CAAC,CAACC,OAAO,CAACb,IAAI,CAAC,IAAI,CAACY,CAAC,CAAC+D,kBAAkB,CAAC;MAC7E,IAAI,IAAI,CAAC/D,CAAC,CAACgE,kBAAkB,EAAE,IAAI,CAAChE,CAAC,CAACC,OAAO,CAACb,IAAI,CAAC,IAAI,CAACY,CAAC,CAACgE,kBAAkB,CAAC;MAC7E,IAAI,IAAI,CAAChE,CAAC,CAACiE,kBAAkB,EAAE,IAAI,CAACjE,CAAC,CAACC,OAAO,CAACb,IAAI,CAAC,IAAI,CAACY,CAAC,CAACiE,kBAAkB,CAAC;;IAE/E;IACA,IAAI,IAAI,CAACjE,CAAC,CAACC,OAAO,CAACtD,MAAM,KAAK,CAAC,EAAE;MAC/B,MAAM,IAAIyB,iCAAyB,CAAC,8CAA8C,CAAC;;IAGrF,IAAI,CAAC4B,CAAC,CAACkD,QAAQ,GAAG,IAAI;IACtB,MAAM1C,YAAY,GAAG;MAAE,GAAG,IAAI,CAACR,CAAC,CAACF,OAAO;MAAE,GAAGA;IAAO,CAAE;IACtD,MAAMsF,SAAS,GAAG,IAAIzC,sBAAsB,CAAC,IAAI,EAAEnC,YAAY,CAAC;IAEhE,OAAO,wCAAgB,EAAC,IAAI,CAACR,CAAC,CAACkB,UAAU,CAACC,MAAM,EAAEiE,SAAS,CAAC;EAC9D;EAEA;;;;EAIA7E,gBAAgB,CAACR,QAAmC,EAAEO,WAA4B;IAChF,IAAI,IAAI,CAACN,CAAC,CAACjE,UAAU,CAACyB,WAAW,CAACb,MAAM,GAAG,CAAC,EAAE;MAC5C,MAAM0I,GAAG,GAAG,IAAI,CAACrF,CAAC,CAACjE,UAAU,CAACyB,WAAW,CAAC,CAAC,CAAC,CAACO,MAAM,GAC/C,IAAI,CAACiC,CAAC,CAACjE,UAAU,CAACyB,WAAW,CAAC,CAAC,CAAC,CAACO,MAAM,GACvC,wBAAwB;MAE5BgC,QAAQ,CACN,IAAIK,mBAAmB,CACrB;QACEjB,OAAO,EAAEkG,GAAG;QACZlH,IAAI,EAAE,IAAI,CAAC6B,CAAC,CAACjE,UAAU,CAACyB,WAAW,CAAC,CAAC,CAAC,CAACW,IAAI;QAC3CX,WAAW,EAAE,IAAI,CAACwC,CAAC,CAACjE,UAAU,CAACyB;OAChC,EACD8C,WAAW,CACZ,CACF;MAED,OAAO,IAAI;;IAGb,MAAMX,iBAAiB,GAAGW,WAAW,CAACzC,oBAAoB,EAAE;IAC5D,IAAI8B,iBAAiB,EAAE;MACrBI,QAAQ,CAAC,IAAIK,mBAAmB,CAACT,iBAAiB,EAAEW,WAAW,CAAC,CAAC;MACjE,OAAO,IAAI;;IAGb,OAAO,KAAK;EACd;;AAnWF7F;AA2WAC,MAAM,CAACoC,cAAc,CAACkG,iBAAiB,CAACsC,SAAS,EAAE,QAAQ,EAAE;EAC3DtI,UAAU,EAAE,IAAI;EAChBuI,GAAG;IACD,OAAO,IAAI,CAACvF,CAAC,CAAC7E,YAAY;EAC5B;CACD,CAAC;AAEF,SAASqJ,yBAAyB,CAAC3E,aAAgC;EACjE,IAAI,OAAOA,aAAa,CAACG,CAAC,CAACF,OAAO,CAAC8E,mBAAmB,KAAK,SAAS,EAAE;IACpE,OAAO/E,aAAa,CAACG,CAAC,CAACF,OAAO,CAAC8E,mBAAmB;;EAGpD,IAAI,OAAO/E,aAAa,CAACG,CAAC,CAACkB,UAAU,CAAClB,CAAC,CAAC2D,EAAE,CAAC7D,OAAO,EAAE8E,mBAAmB,KAAK,SAAS,EAAE;IACrF,OAAO/E,aAAa,CAACG,CAAC,CAACkB,UAAU,CAAClB,CAAC,CAAC2D,EAAE,CAAC7D,OAAO,EAAE8E,mBAAmB;;EAGrE,OAAO,KAAK;AACd;AAEA,SAASvF,aAAa,CAACJ,KAAY;EACjC,OAAOA,KAAK,CAAChE,SAAS,KAAKR,iBAAS,CAACG,MAAM;AAC7C;AAEA,SAAS8E,aAAa,CAACT,KAAY;EACjC,OAAOA,KAAK,CAAChE,SAAS,KAAKR,iBAAS,CAACI,MAAM;AAC7C;AAEA,SAAS0E,aAAa,CAACN,KAAY;EACjC,OAAOA,KAAK,CAAChE,SAAS,KAAKR,iBAAS,CAACK,MAAM;AAC7C;AAEA,SAASiH,cAAc,CAACyD,MAAyB;EAC/C,IAAI;IAAE1D;EAAS,CAAE,GAAG0D,MAAM,CAACxF,CAAC;EAC5BwF,MAAM,CAACxF,CAAC,CAAC8B,SAAS,GAAGnE,SAAS;EAC9B,IAAI,CAACmE,SAAS,EAAEA,SAAS,GAAG,EAAE;EAC9B,OAAOA,SAAS;AAClB","names":["kServerError","Symbol","exports","Object","freeze","INSERT","UPDATE","DELETE","Batch","constructor","batchType","originalZeroIndex","currentIndex","originalIndexes","operations","size","sizeBytes","BulkWriteResult","generateIdMap","ids","idMap","doc","index","_id","bulkResult","result","insertedCount","nInserted","matchedCount","nMatched","modifiedCount","nModified","deletedCount","nRemoved","upsertedCount","upserted","length","upsertedIds","insertedIds","defineProperty","value","enumerable","ok","nUpserted","getInsertedIds","getUpsertedIds","getUpsertedIdAt","getRawResponse","hasWriteErrors","writeErrors","getWriteErrorCount","getWriteErrorAt","undefined","getWriteErrors","getWriteConcernError","writeConcernErrors","errmsg","i","err","WriteConcernError","code","error_1","WriteConcernFailed","toString","isOk","error","errInfo","toJSON","WriteError","getOperation","op","JSON","stringify","mergeBatchResults","batch","writeError","message","push","isInsertBatch","n","isDeleteBatch","Array","isArray","isUpdateBatch","writeConcernError","executeCommands","bulkOperation","options","callback","s","batches","shift","resultHandler","MongoBulkWriteError","handleMongoWriteConcernError","writeResult","handleWriteError","finalOptions","ordered","isOrdered","bypassDocumentValidation","operationId","checkKeys","retryWrites","some","multi","limit","collection","client","insert_1","namespace","update_1","delete_1","Error","assign","name","FindOperators","update","updateDocument","currentOp","buildCurrentOp","addToOperationsList","selector","updateOne","replaceOne","replacement","deleteOne","delete","upsert","collation","arrayFilters","hint","BulkWriteShimOperation","operation_1","executeCallback","server","session","BulkOperationBase","topology","executed","hello","lastHello","usingAutoEncryption","autoEncrypter","maxBsonObjectSize","maxBatchSizeBytes","maxWriteBatchSize","maxKeySize","db","currentBatch","currentBatchSize","currentBatchSizeBytes","currentInsertBatch","currentUpdateBatch","currentRemoveBatch","writeConcern","write_concern_1","fromOptions","bsonOptions","insert","document","shouldForceServerObjectId","bson_1","find","raw","forceServerObjectId","insertOne","updateStatement","filter","u","updateMany","deleteMany","execute","operation","msg","prototype","get","bulkOp"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\bulk\\common.ts"],"sourcesContent":["import { type BSONSerializeOptions, type Document, ObjectId, resolveBSONOptions } from '../bson';\r\nimport type { Collection } from '../collection';\r\nimport {\r\n  type AnyError,\r\n  MongoBatchReExecutionError,\r\n  MONGODB_ERROR_CODES,\r\n  MongoInvalidArgumentError,\r\n  MongoServerError,\r\n  MongoWriteConcernError\r\n} from '../error';\r\nimport type { Filter, OneOrMore, OptionalId, UpdateFilter, WithoutId } from '../mongo_types';\r\nimport type { CollationOptions, CommandOperationOptions } from '../operations/command';\r\nimport { DeleteOperation, type DeleteStatement, makeDeleteStatement } from '../operations/delete';\r\nimport { executeOperation } from '../operations/execute_operation';\r\nimport { InsertOperation } from '../operations/insert';\r\nimport { AbstractCallbackOperation, type Hint } from '../operations/operation';\r\nimport { makeUpdateStatement, UpdateOperation, type UpdateStatement } from '../operations/update';\r\nimport type { Server } from '../sdam/server';\r\nimport type { Topology } from '../sdam/topology';\r\nimport type { ClientSession } from '../sessions';\r\nimport {\r\n  applyRetryableWrites,\r\n  type Callback,\r\n  getTopology,\r\n  hasAtomicOperators,\r\n  type MongoDBNamespace,\r\n  resolveOptions\r\n} from '../utils';\r\nimport { WriteConcern } from '../write_concern';\r\n\r\n/** @internal */\r\nconst kServerError = Symbol('serverError');\r\n\r\n/** @public */\r\nexport const BatchType = Object.freeze({\r\n  INSERT: 1,\r\n  UPDATE: 2,\r\n  DELETE: 3\r\n} as const);\r\n\r\n/** @public */\r\nexport type BatchType = (typeof BatchType)[keyof typeof BatchType];\r\n\r\n/** @public */\r\nexport interface InsertOneModel<TSchema extends Document = Document> {\r\n  /** The document to insert. */\r\n  document: OptionalId<TSchema>;\r\n}\r\n\r\n/** @public */\r\nexport interface DeleteOneModel<TSchema extends Document = Document> {\r\n  /** The filter to limit the deleted documents. */\r\n  filter: Filter<TSchema>;\r\n  /** Specifies a collation. */\r\n  collation?: CollationOptions;\r\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\r\n  hint?: Hint;\r\n}\r\n\r\n/** @public */\r\nexport interface DeleteManyModel<TSchema extends Document = Document> {\r\n  /** The filter to limit the deleted documents. */\r\n  filter: Filter<TSchema>;\r\n  /** Specifies a collation. */\r\n  collation?: CollationOptions;\r\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\r\n  hint?: Hint;\r\n}\r\n\r\n/** @public */\r\nexport interface ReplaceOneModel<TSchema extends Document = Document> {\r\n  /** The filter to limit the replaced document. */\r\n  filter: Filter<TSchema>;\r\n  /** The document with which to replace the matched document. */\r\n  replacement: WithoutId<TSchema>;\r\n  /** Specifies a collation. */\r\n  collation?: CollationOptions;\r\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\r\n  hint?: Hint;\r\n  /** When true, creates a new document if no document matches the query. */\r\n  upsert?: boolean;\r\n}\r\n\r\n/** @public */\r\nexport interface UpdateOneModel<TSchema extends Document = Document> {\r\n  /** The filter to limit the updated documents. */\r\n  filter: Filter<TSchema>;\r\n  /** A document or pipeline containing update operators. */\r\n  update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[];\r\n  /** A set of filters specifying to which array elements an update should apply. */\r\n  arrayFilters?: Document[];\r\n  /** Specifies a collation. */\r\n  collation?: CollationOptions;\r\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\r\n  hint?: Hint;\r\n  /** When true, creates a new document if no document matches the query. */\r\n  upsert?: boolean;\r\n}\r\n\r\n/** @public */\r\nexport interface UpdateManyModel<TSchema extends Document = Document> {\r\n  /** The filter to limit the updated documents. */\r\n  filter: Filter<TSchema>;\r\n  /** A document or pipeline containing update operators. */\r\n  update: UpdateFilter<TSchema> | UpdateFilter<TSchema>[];\r\n  /** A set of filters specifying to which array elements an update should apply. */\r\n  arrayFilters?: Document[];\r\n  /** Specifies a collation. */\r\n  collation?: CollationOptions;\r\n  /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\r\n  hint?: Hint;\r\n  /** When true, creates a new document if no document matches the query. */\r\n  upsert?: boolean;\r\n}\r\n\r\n/** @public */\r\nexport type AnyBulkWriteOperation<TSchema extends Document = Document> =\r\n  | { insertOne: InsertOneModel<TSchema> }\r\n  | { replaceOne: ReplaceOneModel<TSchema> }\r\n  | { updateOne: UpdateOneModel<TSchema> }\r\n  | { updateMany: UpdateManyModel<TSchema> }\r\n  | { deleteOne: DeleteOneModel<TSchema> }\r\n  | { deleteMany: DeleteManyModel<TSchema> };\r\n\r\n/** @internal */\r\nexport interface BulkResult {\r\n  ok: number;\r\n  writeErrors: WriteError[];\r\n  writeConcernErrors: WriteConcernError[];\r\n  insertedIds: Document[];\r\n  nInserted: number;\r\n  nUpserted: number;\r\n  nMatched: number;\r\n  nModified: number;\r\n  nRemoved: number;\r\n  upserted: Document[];\r\n}\r\n\r\n/**\r\n * Keeps the state of a unordered batch so we can rewrite the results\r\n * correctly after command execution\r\n *\r\n * @public\r\n */\r\nexport class Batch<T = Document> {\r\n  originalZeroIndex: number;\r\n  currentIndex: number;\r\n  originalIndexes: number[];\r\n  batchType: BatchType;\r\n  operations: T[];\r\n  size: number;\r\n  sizeBytes: number;\r\n\r\n  constructor(batchType: BatchType, originalZeroIndex: number) {\r\n    this.originalZeroIndex = originalZeroIndex;\r\n    this.currentIndex = 0;\r\n    this.originalIndexes = [];\r\n    this.batchType = batchType;\r\n    this.operations = [];\r\n    this.size = 0;\r\n    this.sizeBytes = 0;\r\n  }\r\n}\r\n\r\n/**\r\n * @public\r\n * The result of a bulk write.\r\n */\r\nexport class BulkWriteResult {\r\n  private readonly result: BulkResult;\r\n  /** Number of documents inserted. */\r\n  readonly insertedCount: number;\r\n  /** Number of documents matched for update. */\r\n  readonly matchedCount: number;\r\n  /** Number of documents modified. */\r\n  readonly modifiedCount: number;\r\n  /** Number of documents deleted. */\r\n  readonly deletedCount: number;\r\n  /** Number of documents upserted. */\r\n  readonly upsertedCount: number;\r\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\r\n  readonly upsertedIds: { [key: number]: any };\r\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\r\n  readonly insertedIds: { [key: number]: any };\r\n\r\n  private static generateIdMap(ids: Document[]): { [key: number]: any } {\r\n    const idMap: { [index: number]: any } = {};\r\n    for (const doc of ids) {\r\n      idMap[doc.index] = doc._id;\r\n    }\r\n    return idMap;\r\n  }\r\n\r\n  /**\r\n   * Create a new BulkWriteResult instance\r\n   * @internal\r\n   */\r\n  constructor(bulkResult: BulkResult) {\r\n    this.result = bulkResult;\r\n    this.insertedCount = this.result.nInserted ?? 0;\r\n    this.matchedCount = this.result.nMatched ?? 0;\r\n    this.modifiedCount = this.result.nModified ?? 0;\r\n    this.deletedCount = this.result.nRemoved ?? 0;\r\n    this.upsertedCount = this.result.upserted.length ?? 0;\r\n    this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\r\n    this.insertedIds = BulkWriteResult.generateIdMap(this.result.insertedIds);\r\n    Object.defineProperty(this, 'result', { value: this.result, enumerable: false });\r\n  }\r\n\r\n  /** Evaluates to true if the bulk operation correctly executes */\r\n  get ok(): number {\r\n    return this.result.ok;\r\n  }\r\n\r\n  /**\r\n   * The number of inserted documents\r\n   * @deprecated Use insertedCount instead.\r\n   */\r\n  get nInserted(): number {\r\n    return this.result.nInserted;\r\n  }\r\n\r\n  /**\r\n   * Number of upserted documents\r\n   * @deprecated User upsertedCount instead.\r\n   */\r\n  get nUpserted(): number {\r\n    return this.result.nUpserted;\r\n  }\r\n\r\n  /**\r\n   * Number of matched documents\r\n   * @deprecated Use matchedCount instead.\r\n   */\r\n  get nMatched(): number {\r\n    return this.result.nMatched;\r\n  }\r\n\r\n  /**\r\n   * Number of documents updated physically on disk\r\n   * @deprecated Use modifiedCount instead.\r\n   */\r\n  get nModified(): number {\r\n    return this.result.nModified;\r\n  }\r\n\r\n  /**\r\n   * Number of removed documents\r\n   * @deprecated Use deletedCount instead.\r\n   */\r\n  get nRemoved(): number {\r\n    return this.result.nRemoved;\r\n  }\r\n\r\n  /**\r\n   * Returns an array of all inserted ids\r\n   * @deprecated Use insertedIds instead.\r\n   */\r\n  getInsertedIds(): Document[] {\r\n    return this.result.insertedIds;\r\n  }\r\n\r\n  /**\r\n   * Returns an array of all upserted ids\r\n   * @deprecated Use upsertedIds instead.\r\n   */\r\n  getUpsertedIds(): Document[] {\r\n    return this.result.upserted;\r\n  }\r\n\r\n  /** Returns the upserted id at the given index */\r\n  getUpsertedIdAt(index: number): Document | undefined {\r\n    return this.result.upserted[index];\r\n  }\r\n\r\n  /** Returns raw internal result */\r\n  getRawResponse(): Document {\r\n    return this.result;\r\n  }\r\n\r\n  /** Returns true if the bulk operation contains a write error */\r\n  hasWriteErrors(): boolean {\r\n    return this.result.writeErrors.length > 0;\r\n  }\r\n\r\n  /** Returns the number of write errors off the bulk operation */\r\n  getWriteErrorCount(): number {\r\n    return this.result.writeErrors.length;\r\n  }\r\n\r\n  /** Returns a specific write error object */\r\n  getWriteErrorAt(index: number): WriteError | undefined {\r\n    return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\r\n  }\r\n\r\n  /** Retrieve all write errors */\r\n  getWriteErrors(): WriteError[] {\r\n    return this.result.writeErrors;\r\n  }\r\n\r\n  /** Retrieve the write concern error if one exists */\r\n  getWriteConcernError(): WriteConcernError | undefined {\r\n    if (this.result.writeConcernErrors.length === 0) {\r\n      return;\r\n    } else if (this.result.writeConcernErrors.length === 1) {\r\n      // Return the error\r\n      return this.result.writeConcernErrors[0];\r\n    } else {\r\n      // Combine the errors\r\n      let errmsg = '';\r\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\r\n        const err = this.result.writeConcernErrors[i];\r\n        errmsg = errmsg + err.errmsg;\r\n\r\n        // TODO: Something better\r\n        if (i === 0) errmsg = errmsg + ' and ';\r\n      }\r\n\r\n      return new WriteConcernError({ errmsg, code: MONGODB_ERROR_CODES.WriteConcernFailed });\r\n    }\r\n  }\r\n\r\n  toString(): string {\r\n    return `BulkWriteResult(${this.result})`;\r\n  }\r\n\r\n  isOk(): boolean {\r\n    return this.result.ok === 1;\r\n  }\r\n}\r\n\r\n/** @public */\r\nexport interface WriteConcernErrorData {\r\n  code: number;\r\n  errmsg: string;\r\n  errInfo?: Document;\r\n}\r\n\r\n/**\r\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\r\n * @public\r\n * @category Error\r\n */\r\nexport class WriteConcernError {\r\n  /** @internal */\r\n  [kServerError]: WriteConcernErrorData;\r\n\r\n  constructor(error: WriteConcernErrorData) {\r\n    this[kServerError] = error;\r\n  }\r\n\r\n  /** Write concern error code. */\r\n  get code(): number | undefined {\r\n    return this[kServerError].code;\r\n  }\r\n\r\n  /** Write concern error message. */\r\n  get errmsg(): string | undefined {\r\n    return this[kServerError].errmsg;\r\n  }\r\n\r\n  /** Write concern error info. */\r\n  get errInfo(): Document | undefined {\r\n    return this[kServerError].errInfo;\r\n  }\r\n\r\n  toJSON(): WriteConcernErrorData {\r\n    return this[kServerError];\r\n  }\r\n\r\n  toString(): string {\r\n    return `WriteConcernError(${this.errmsg})`;\r\n  }\r\n}\r\n\r\n/** @public */\r\nexport interface BulkWriteOperationError {\r\n  index: number;\r\n  code: number;\r\n  errmsg: string;\r\n  errInfo: Document;\r\n  op: Document | UpdateStatement | DeleteStatement;\r\n}\r\n\r\n/**\r\n * An error that occurred during a BulkWrite on the server.\r\n * @public\r\n * @category Error\r\n */\r\nexport class WriteError {\r\n  err: BulkWriteOperationError;\r\n\r\n  constructor(err: BulkWriteOperationError) {\r\n    this.err = err;\r\n  }\r\n\r\n  /** WriteError code. */\r\n  get code(): number {\r\n    return this.err.code;\r\n  }\r\n\r\n  /** WriteError original bulk operation index. */\r\n  get index(): number {\r\n    return this.err.index;\r\n  }\r\n\r\n  /** WriteError message. */\r\n  get errmsg(): string | undefined {\r\n    return this.err.errmsg;\r\n  }\r\n\r\n  /** WriteError details. */\r\n  get errInfo(): Document | undefined {\r\n    return this.err.errInfo;\r\n  }\r\n\r\n  /** Returns the underlying operation that caused the error */\r\n  getOperation(): Document {\r\n    return this.err.op;\r\n  }\r\n\r\n  toJSON(): { code: number; index: number; errmsg?: string; op: Document } {\r\n    return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\r\n  }\r\n\r\n  toString(): string {\r\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\r\n  }\r\n}\r\n\r\n/** Merges results into shared data structure */\r\nexport function mergeBatchResults(\r\n  batch: Batch,\r\n  bulkResult: BulkResult,\r\n  err?: AnyError,\r\n  result?: Document\r\n): void {\r\n  // If we have an error set the result to be the err object\r\n  if (err) {\r\n    result = err;\r\n  } else if (result && result.result) {\r\n    result = result.result;\r\n  }\r\n\r\n  if (result == null) {\r\n    return;\r\n  }\r\n\r\n  // Do we have a top level error stop processing and return\r\n  if (result.ok === 0 && bulkResult.ok === 1) {\r\n    bulkResult.ok = 0;\r\n\r\n    const writeError = {\r\n      index: 0,\r\n      code: result.code || 0,\r\n      errmsg: result.message,\r\n      errInfo: result.errInfo,\r\n      op: batch.operations[0]\r\n    };\r\n\r\n    bulkResult.writeErrors.push(new WriteError(writeError));\r\n    return;\r\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\r\n    return;\r\n  }\r\n\r\n  // If we have an insert Batch type\r\n  if (isInsertBatch(batch) && result.n) {\r\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\r\n  }\r\n\r\n  // If we have an insert Batch type\r\n  if (isDeleteBatch(batch) && result.n) {\r\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\r\n  }\r\n\r\n  let nUpserted = 0;\r\n\r\n  // We have an array of upserted values, we need to rewrite the indexes\r\n  if (Array.isArray(result.upserted)) {\r\n    nUpserted = result.upserted.length;\r\n\r\n    for (let i = 0; i < result.upserted.length; i++) {\r\n      bulkResult.upserted.push({\r\n        index: result.upserted[i].index + batch.originalZeroIndex,\r\n        _id: result.upserted[i]._id\r\n      });\r\n    }\r\n  } else if (result.upserted) {\r\n    nUpserted = 1;\r\n\r\n    bulkResult.upserted.push({\r\n      index: batch.originalZeroIndex,\r\n      _id: result.upserted\r\n    });\r\n  }\r\n\r\n  // If we have an update Batch type\r\n  if (isUpdateBatch(batch) && result.n) {\r\n    const nModified = result.nModified;\r\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\r\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\r\n\r\n    if (typeof nModified === 'number') {\r\n      bulkResult.nModified = bulkResult.nModified + nModified;\r\n    } else {\r\n      bulkResult.nModified = 0;\r\n    }\r\n  }\r\n\r\n  if (Array.isArray(result.writeErrors)) {\r\n    for (let i = 0; i < result.writeErrors.length; i++) {\r\n      const writeError = {\r\n        index: batch.originalIndexes[result.writeErrors[i].index],\r\n        code: result.writeErrors[i].code,\r\n        errmsg: result.writeErrors[i].errmsg,\r\n        errInfo: result.writeErrors[i].errInfo,\r\n        op: batch.operations[result.writeErrors[i].index]\r\n      };\r\n\r\n      bulkResult.writeErrors.push(new WriteError(writeError));\r\n    }\r\n  }\r\n\r\n  if (result.writeConcernError) {\r\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\r\n  }\r\n}\r\n\r\nfunction executeCommands(\r\n  bulkOperation: BulkOperationBase,\r\n  options: BulkWriteOptions,\r\n  callback: Callback<BulkWriteResult>\r\n) {\r\n  if (bulkOperation.s.batches.length === 0) {\r\n    return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\r\n  }\r\n\r\n  const batch = bulkOperation.s.batches.shift() as Batch;\r\n\r\n  function resultHandler(err?: AnyError, result?: Document) {\r\n    // Error is a driver related error not a bulk op error, return early\r\n    if (err && 'message' in err && !(err instanceof MongoWriteConcernError)) {\r\n      return callback(\r\n        new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult))\r\n      );\r\n    }\r\n\r\n    if (err instanceof MongoWriteConcernError) {\r\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\r\n    }\r\n\r\n    // Merge the results together\r\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\r\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\r\n    if (bulkOperation.handleWriteError(callback, writeResult)) return;\r\n\r\n    // Execute the next command in line\r\n    executeCommands(bulkOperation, options, callback);\r\n  }\r\n\r\n  const finalOptions = resolveOptions(bulkOperation, {\r\n    ...options,\r\n    ordered: bulkOperation.isOrdered\r\n  });\r\n\r\n  if (finalOptions.bypassDocumentValidation !== true) {\r\n    delete finalOptions.bypassDocumentValidation;\r\n  }\r\n\r\n  // Set an operationIf if provided\r\n  if (bulkOperation.operationId) {\r\n    resultHandler.operationId = bulkOperation.operationId;\r\n  }\r\n\r\n  // Is the bypassDocumentValidation options specific\r\n  if (bulkOperation.s.bypassDocumentValidation === true) {\r\n    finalOptions.bypassDocumentValidation = true;\r\n  }\r\n\r\n  // Is the checkKeys option disabled\r\n  if (bulkOperation.s.checkKeys === false) {\r\n    finalOptions.checkKeys = false;\r\n  }\r\n\r\n  if (finalOptions.retryWrites) {\r\n    if (isUpdateBatch(batch)) {\r\n      finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\r\n    }\r\n\r\n    if (isDeleteBatch(batch)) {\r\n      finalOptions.retryWrites =\r\n        finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\r\n    }\r\n  }\r\n\r\n  try {\r\n    if (isInsertBatch(batch)) {\r\n      executeOperation(\r\n        bulkOperation.s.collection.client,\r\n        new InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\r\n        resultHandler\r\n      );\r\n    } else if (isUpdateBatch(batch)) {\r\n      executeOperation(\r\n        bulkOperation.s.collection.client,\r\n        new UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\r\n        resultHandler\r\n      );\r\n    } else if (isDeleteBatch(batch)) {\r\n      executeOperation(\r\n        bulkOperation.s.collection.client,\r\n        new DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions),\r\n        resultHandler\r\n      );\r\n    }\r\n  } catch (err) {\r\n    // Force top level error\r\n    err.ok = 0;\r\n    // Merge top level error and return\r\n    mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\r\n    callback();\r\n  }\r\n}\r\n\r\nfunction handleMongoWriteConcernError(\r\n  batch: Batch,\r\n  bulkResult: BulkResult,\r\n  err: MongoWriteConcernError,\r\n  callback: Callback<BulkWriteResult>\r\n) {\r\n  mergeBatchResults(batch, bulkResult, undefined, err.result);\r\n\r\n  callback(\r\n    new MongoBulkWriteError(\r\n      {\r\n        message: err.result?.writeConcernError.errmsg,\r\n        code: err.result?.writeConcernError.result\r\n      },\r\n      new BulkWriteResult(bulkResult)\r\n    )\r\n  );\r\n}\r\n\r\n/**\r\n * An error indicating an unsuccessful Bulk Write\r\n * @public\r\n * @category Error\r\n */\r\nexport class MongoBulkWriteError extends MongoServerError {\r\n  result: BulkWriteResult;\r\n  writeErrors: OneOrMore<WriteError> = [];\r\n  err?: WriteConcernError;\r\n\r\n  /** Creates a new MongoBulkWriteError */\r\n  constructor(\r\n    error:\r\n      | { message: string; code: number; writeErrors?: WriteError[] }\r\n      | WriteConcernError\r\n      | AnyError,\r\n    result: BulkWriteResult\r\n  ) {\r\n    super(error);\r\n\r\n    if (error instanceof WriteConcernError) this.err = error;\r\n    else if (!(error instanceof Error)) {\r\n      this.message = error.message;\r\n      this.code = error.code;\r\n      this.writeErrors = error.writeErrors ?? [];\r\n    }\r\n\r\n    this.result = result;\r\n    Object.assign(this, error);\r\n  }\r\n\r\n  override get name(): string {\r\n    return 'MongoBulkWriteError';\r\n  }\r\n\r\n  /** Number of documents inserted. */\r\n  get insertedCount(): number {\r\n    return this.result.insertedCount;\r\n  }\r\n  /** Number of documents matched for update. */\r\n  get matchedCount(): number {\r\n    return this.result.matchedCount;\r\n  }\r\n  /** Number of documents modified. */\r\n  get modifiedCount(): number {\r\n    return this.result.modifiedCount;\r\n  }\r\n  /** Number of documents deleted. */\r\n  get deletedCount(): number {\r\n    return this.result.deletedCount;\r\n  }\r\n  /** Number of documents upserted. */\r\n  get upsertedCount(): number {\r\n    return this.result.upsertedCount;\r\n  }\r\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\r\n  get insertedIds(): { [key: number]: any } {\r\n    return this.result.insertedIds;\r\n  }\r\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\r\n  get upsertedIds(): { [key: number]: any } {\r\n    return this.result.upsertedIds;\r\n  }\r\n}\r\n\r\n/**\r\n * A builder object that is returned from {@link BulkOperationBase#find}.\r\n * Is used to build a write operation that involves a query filter.\r\n *\r\n * @public\r\n */\r\nexport class FindOperators {\r\n  bulkOperation: BulkOperationBase;\r\n\r\n  /**\r\n   * Creates a new FindOperators object.\r\n   * @internal\r\n   */\r\n  constructor(bulkOperation: BulkOperationBase) {\r\n    this.bulkOperation = bulkOperation;\r\n  }\r\n\r\n  /** Add a multiple update operation to the bulk operation */\r\n  update(updateDocument: Document | Document[]): BulkOperationBase {\r\n    const currentOp = buildCurrentOp(this.bulkOperation);\r\n    return this.bulkOperation.addToOperationsList(\r\n      BatchType.UPDATE,\r\n      makeUpdateStatement(currentOp.selector, updateDocument, {\r\n        ...currentOp,\r\n        multi: true\r\n      })\r\n    );\r\n  }\r\n\r\n  /** Add a single update operation to the bulk operation */\r\n  updateOne(updateDocument: Document | Document[]): BulkOperationBase {\r\n    if (!hasAtomicOperators(updateDocument)) {\r\n      throw new MongoInvalidArgumentError('Update document requires atomic operators');\r\n    }\r\n\r\n    const currentOp = buildCurrentOp(this.bulkOperation);\r\n    return this.bulkOperation.addToOperationsList(\r\n      BatchType.UPDATE,\r\n      makeUpdateStatement(currentOp.selector, updateDocument, { ...currentOp, multi: false })\r\n    );\r\n  }\r\n\r\n  /** Add a replace one operation to the bulk operation */\r\n  replaceOne(replacement: Document): BulkOperationBase {\r\n    if (hasAtomicOperators(replacement)) {\r\n      throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\r\n    }\r\n\r\n    const currentOp = buildCurrentOp(this.bulkOperation);\r\n    return this.bulkOperation.addToOperationsList(\r\n      BatchType.UPDATE,\r\n      makeUpdateStatement(currentOp.selector, replacement, { ...currentOp, multi: false })\r\n    );\r\n  }\r\n\r\n  /** Add a delete one operation to the bulk operation */\r\n  deleteOne(): BulkOperationBase {\r\n    const currentOp = buildCurrentOp(this.bulkOperation);\r\n    return this.bulkOperation.addToOperationsList(\r\n      BatchType.DELETE,\r\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 1 })\r\n    );\r\n  }\r\n\r\n  /** Add a delete many operation to the bulk operation */\r\n  delete(): BulkOperationBase {\r\n    const currentOp = buildCurrentOp(this.bulkOperation);\r\n    return this.bulkOperation.addToOperationsList(\r\n      BatchType.DELETE,\r\n      makeDeleteStatement(currentOp.selector, { ...currentOp, limit: 0 })\r\n    );\r\n  }\r\n\r\n  /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\r\n  upsert(): this {\r\n    if (!this.bulkOperation.s.currentOp) {\r\n      this.bulkOperation.s.currentOp = {};\r\n    }\r\n\r\n    this.bulkOperation.s.currentOp.upsert = true;\r\n    return this;\r\n  }\r\n\r\n  /** Specifies the collation for the query condition. */\r\n  collation(collation: CollationOptions): this {\r\n    if (!this.bulkOperation.s.currentOp) {\r\n      this.bulkOperation.s.currentOp = {};\r\n    }\r\n\r\n    this.bulkOperation.s.currentOp.collation = collation;\r\n    return this;\r\n  }\r\n\r\n  /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\r\n  arrayFilters(arrayFilters: Document[]): this {\r\n    if (!this.bulkOperation.s.currentOp) {\r\n      this.bulkOperation.s.currentOp = {};\r\n    }\r\n\r\n    this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\r\n    return this;\r\n  }\r\n\r\n  /** Specifies hint for the bulk operation. */\r\n  hint(hint: Hint): this {\r\n    if (!this.bulkOperation.s.currentOp) {\r\n      this.bulkOperation.s.currentOp = {};\r\n    }\r\n\r\n    this.bulkOperation.s.currentOp.hint = hint;\r\n    return this;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport interface BulkOperationPrivate {\r\n  bulkResult: BulkResult;\r\n  currentBatch?: Batch;\r\n  currentIndex: number;\r\n  // ordered specific\r\n  currentBatchSize: number;\r\n  currentBatchSizeBytes: number;\r\n  // unordered specific\r\n  currentInsertBatch?: Batch;\r\n  currentUpdateBatch?: Batch;\r\n  currentRemoveBatch?: Batch;\r\n  batches: Batch[];\r\n  // Write concern\r\n  writeConcern?: WriteConcern;\r\n  // Max batch size options\r\n  maxBsonObjectSize: number;\r\n  maxBatchSizeBytes: number;\r\n  maxWriteBatchSize: number;\r\n  maxKeySize: number;\r\n  // Namespace\r\n  namespace: MongoDBNamespace;\r\n  // Topology\r\n  topology: Topology;\r\n  // Options\r\n  options: BulkWriteOptions;\r\n  // BSON options\r\n  bsonOptions: BSONSerializeOptions;\r\n  // Document used to build a bulk operation\r\n  currentOp?: Document;\r\n  // Executed\r\n  executed: boolean;\r\n  // Collection\r\n  collection: Collection;\r\n  // Fundamental error\r\n  err?: AnyError;\r\n  // check keys\r\n  checkKeys: boolean;\r\n  bypassDocumentValidation?: boolean;\r\n}\r\n\r\n/** @public */\r\nexport interface BulkWriteOptions extends CommandOperationOptions {\r\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\r\n  bypassDocumentValidation?: boolean;\r\n  /** If true, when an insert fails, don't execute the remaining writes. If false, continue with remaining inserts when one fails. */\r\n  ordered?: boolean;\r\n  /** Force server to assign _id values instead of driver. */\r\n  forceServerObjectId?: boolean;\r\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\r\n  let?: Document;\r\n}\r\n\r\n/**\r\n * TODO(NODE-4063)\r\n * BulkWrites merge complexity is implemented in executeCommands\r\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\r\n * We would like this logic to simply live inside the BulkWriteOperation class\r\n * @internal\r\n */\r\nclass BulkWriteShimOperation extends AbstractCallbackOperation {\r\n  bulkOperation: BulkOperationBase;\r\n  constructor(bulkOperation: BulkOperationBase, options: BulkWriteOptions) {\r\n    super(options);\r\n    this.bulkOperation = bulkOperation;\r\n  }\r\n\r\n  executeCallback(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<any>\r\n  ): void {\r\n    if (this.options.session == null) {\r\n      // An implicit session could have been created by 'executeOperation'\r\n      // So if we stick it on finalOptions here, each bulk operation\r\n      // will use this same session, it'll be passed in the same way\r\n      // an explicit session would be\r\n      this.options.session = session;\r\n    }\r\n    return executeCommands(this.bulkOperation, this.options, callback);\r\n  }\r\n}\r\n\r\n/** @public */\r\nexport abstract class BulkOperationBase {\r\n  isOrdered: boolean;\r\n  /** @internal */\r\n  s: BulkOperationPrivate;\r\n  operationId?: number;\r\n\r\n  /**\r\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\r\n   * @internal\r\n   */\r\n  constructor(collection: Collection, options: BulkWriteOptions, isOrdered: boolean) {\r\n    // determine whether bulkOperation is ordered or unordered\r\n    this.isOrdered = isOrdered;\r\n\r\n    const topology = getTopology(collection);\r\n    options = options == null ? {} : options;\r\n    // TODO Bring from driver information in hello\r\n    // Get the namespace for the write operations\r\n    const namespace = collection.s.namespace;\r\n    // Used to mark operation as executed\r\n    const executed = false;\r\n\r\n    // Current item\r\n    const currentOp = undefined;\r\n\r\n    // Set max byte size\r\n    const hello = topology.lastHello();\r\n\r\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\r\n    // over 2mb are still allowed\r\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\r\n    const maxBsonObjectSize =\r\n      hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\r\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\r\n    const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\r\n\r\n    // Calculates the largest possible size of an Array key, represented as a BSON string\r\n    // element. This calculation:\r\n    //     1 byte for BSON type\r\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\r\n    //   + 1 bytes for null terminator\r\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\r\n\r\n    // Final options for retryable writes\r\n    let finalOptions = Object.assign({}, options);\r\n    finalOptions = applyRetryableWrites(finalOptions, collection.s.db);\r\n\r\n    // Final results\r\n    const bulkResult: BulkResult = {\r\n      ok: 1,\r\n      writeErrors: [],\r\n      writeConcernErrors: [],\r\n      insertedIds: [],\r\n      nInserted: 0,\r\n      nUpserted: 0,\r\n      nMatched: 0,\r\n      nModified: 0,\r\n      nRemoved: 0,\r\n      upserted: []\r\n    };\r\n\r\n    // Internal state\r\n    this.s = {\r\n      // Final result\r\n      bulkResult,\r\n      // Current batch state\r\n      currentBatch: undefined,\r\n      currentIndex: 0,\r\n      // ordered specific\r\n      currentBatchSize: 0,\r\n      currentBatchSizeBytes: 0,\r\n      // unordered specific\r\n      currentInsertBatch: undefined,\r\n      currentUpdateBatch: undefined,\r\n      currentRemoveBatch: undefined,\r\n      batches: [],\r\n      // Write concern\r\n      writeConcern: WriteConcern.fromOptions(options),\r\n      // Max batch size options\r\n      maxBsonObjectSize,\r\n      maxBatchSizeBytes,\r\n      maxWriteBatchSize,\r\n      maxKeySize,\r\n      // Namespace\r\n      namespace,\r\n      // Topology\r\n      topology,\r\n      // Options\r\n      options: finalOptions,\r\n      // BSON options\r\n      bsonOptions: resolveBSONOptions(options),\r\n      // Current operation\r\n      currentOp,\r\n      // Executed\r\n      executed,\r\n      // Collection\r\n      collection,\r\n      // Fundamental error\r\n      err: undefined,\r\n      // check keys\r\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\r\n    };\r\n\r\n    // bypass Validation\r\n    if (options.bypassDocumentValidation === true) {\r\n      this.s.bypassDocumentValidation = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a single insert document to the bulk operation\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const bulkOp = collection.initializeOrderedBulkOp();\r\n   *\r\n   * // Adds three inserts to the bulkOp.\r\n   * bulkOp\r\n   *   .insert({ a: 1 })\r\n   *   .insert({ b: 2 })\r\n   *   .insert({ c: 3 });\r\n   * await bulkOp.execute();\r\n   * ```\r\n   */\r\n  insert(document: Document): BulkOperationBase {\r\n    if (document._id == null && !shouldForceServerObjectId(this)) {\r\n      document._id = new ObjectId();\r\n    }\r\n\r\n    return this.addToOperationsList(BatchType.INSERT, document);\r\n  }\r\n\r\n  /**\r\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\r\n   * Returns a builder object used to complete the definition of the operation.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const bulkOp = collection.initializeOrderedBulkOp();\r\n   *\r\n   * // Add an updateOne to the bulkOp\r\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\r\n   *\r\n   * // Add an updateMany to the bulkOp\r\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\r\n   *\r\n   * // Add an upsert\r\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\r\n   *\r\n   * // Add a deletion\r\n   * bulkOp.find({ g: 7 }).deleteOne();\r\n   *\r\n   * // Add a multi deletion\r\n   * bulkOp.find({ h: 8 }).delete();\r\n   *\r\n   * // Add a replaceOne\r\n   * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\r\n   *\r\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\r\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\r\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\r\n   * ]);\r\n   *\r\n   * // All of the ops will now be executed\r\n   * await bulkOp.execute();\r\n   * ```\r\n   */\r\n  find(selector: Document): FindOperators {\r\n    if (!selector) {\r\n      throw new MongoInvalidArgumentError('Bulk find operation must specify a selector');\r\n    }\r\n\r\n    // Save a current selector\r\n    this.s.currentOp = {\r\n      selector: selector\r\n    };\r\n\r\n    return new FindOperators(this);\r\n  }\r\n\r\n  /** Specifies a raw operation to perform in the bulk write. */\r\n  raw(op: AnyBulkWriteOperation): this {\r\n    if (op == null || typeof op !== 'object') {\r\n      throw new MongoInvalidArgumentError('Operation must be an object with an operation key');\r\n    }\r\n    if ('insertOne' in op) {\r\n      const forceServerObjectId = shouldForceServerObjectId(this);\r\n      if (op.insertOne && op.insertOne.document == null) {\r\n        // NOTE: provided for legacy support, but this is a malformed operation\r\n        if (forceServerObjectId !== true && (op.insertOne as Document)._id == null) {\r\n          (op.insertOne as Document)._id = new ObjectId();\r\n        }\r\n\r\n        return this.addToOperationsList(BatchType.INSERT, op.insertOne);\r\n      }\r\n\r\n      if (forceServerObjectId !== true && op.insertOne.document._id == null) {\r\n        op.insertOne.document._id = new ObjectId();\r\n      }\r\n\r\n      return this.addToOperationsList(BatchType.INSERT, op.insertOne.document);\r\n    }\r\n\r\n    if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\r\n      if ('replaceOne' in op) {\r\n        if ('q' in op.replaceOne) {\r\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\r\n        }\r\n        const updateStatement = makeUpdateStatement(\r\n          op.replaceOne.filter,\r\n          op.replaceOne.replacement,\r\n          { ...op.replaceOne, multi: false }\r\n        );\r\n        if (hasAtomicOperators(updateStatement.u)) {\r\n          throw new MongoInvalidArgumentError('Replacement document must not use atomic operators');\r\n        }\r\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\r\n      }\r\n\r\n      if ('updateOne' in op) {\r\n        if ('q' in op.updateOne) {\r\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\r\n        }\r\n        const updateStatement = makeUpdateStatement(op.updateOne.filter, op.updateOne.update, {\r\n          ...op.updateOne,\r\n          multi: false\r\n        });\r\n        if (!hasAtomicOperators(updateStatement.u)) {\r\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\r\n        }\r\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\r\n      }\r\n\r\n      if ('updateMany' in op) {\r\n        if ('q' in op.updateMany) {\r\n          throw new MongoInvalidArgumentError('Raw operations are not allowed');\r\n        }\r\n        const updateStatement = makeUpdateStatement(op.updateMany.filter, op.updateMany.update, {\r\n          ...op.updateMany,\r\n          multi: true\r\n        });\r\n        if (!hasAtomicOperators(updateStatement.u)) {\r\n          throw new MongoInvalidArgumentError('Update document requires atomic operators');\r\n        }\r\n        return this.addToOperationsList(BatchType.UPDATE, updateStatement);\r\n      }\r\n    }\r\n\r\n    if ('deleteOne' in op) {\r\n      if ('q' in op.deleteOne) {\r\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\r\n      }\r\n      return this.addToOperationsList(\r\n        BatchType.DELETE,\r\n        makeDeleteStatement(op.deleteOne.filter, { ...op.deleteOne, limit: 1 })\r\n      );\r\n    }\r\n\r\n    if ('deleteMany' in op) {\r\n      if ('q' in op.deleteMany) {\r\n        throw new MongoInvalidArgumentError('Raw operations are not allowed');\r\n      }\r\n      return this.addToOperationsList(\r\n        BatchType.DELETE,\r\n        makeDeleteStatement(op.deleteMany.filter, { ...op.deleteMany, limit: 0 })\r\n      );\r\n    }\r\n\r\n    // otherwise an unknown operation was provided\r\n    throw new MongoInvalidArgumentError(\r\n      'bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany'\r\n    );\r\n  }\r\n\r\n  get bsonOptions(): BSONSerializeOptions {\r\n    return this.s.bsonOptions;\r\n  }\r\n\r\n  get writeConcern(): WriteConcern | undefined {\r\n    return this.s.writeConcern;\r\n  }\r\n\r\n  get batches(): Batch[] {\r\n    const batches = [...this.s.batches];\r\n    if (this.isOrdered) {\r\n      if (this.s.currentBatch) batches.push(this.s.currentBatch);\r\n    } else {\r\n      if (this.s.currentInsertBatch) batches.push(this.s.currentInsertBatch);\r\n      if (this.s.currentUpdateBatch) batches.push(this.s.currentUpdateBatch);\r\n      if (this.s.currentRemoveBatch) batches.push(this.s.currentRemoveBatch);\r\n    }\r\n    return batches;\r\n  }\r\n\r\n  async execute(options: BulkWriteOptions = {}): Promise<BulkWriteResult> {\r\n    if (this.s.executed) {\r\n      throw new MongoBatchReExecutionError();\r\n    }\r\n\r\n    const writeConcern = WriteConcern.fromOptions(options);\r\n    if (writeConcern) {\r\n      this.s.writeConcern = writeConcern;\r\n    }\r\n\r\n    // If we have current batch\r\n    if (this.isOrdered) {\r\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\r\n    } else {\r\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\r\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\r\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\r\n    }\r\n    // If we have no operations in the bulk raise an error\r\n    if (this.s.batches.length === 0) {\r\n      throw new MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\r\n    }\r\n\r\n    this.s.executed = true;\r\n    const finalOptions = { ...this.s.options, ...options };\r\n    const operation = new BulkWriteShimOperation(this, finalOptions);\r\n\r\n    return executeOperation(this.s.collection.client, operation);\r\n  }\r\n\r\n  /**\r\n   * Handles the write error before executing commands\r\n   * @internal\r\n   */\r\n  handleWriteError(callback: Callback<BulkWriteResult>, writeResult: BulkWriteResult): boolean {\r\n    if (this.s.bulkResult.writeErrors.length > 0) {\r\n      const msg = this.s.bulkResult.writeErrors[0].errmsg\r\n        ? this.s.bulkResult.writeErrors[0].errmsg\r\n        : 'write operation failed';\r\n\r\n      callback(\r\n        new MongoBulkWriteError(\r\n          {\r\n            message: msg,\r\n            code: this.s.bulkResult.writeErrors[0].code,\r\n            writeErrors: this.s.bulkResult.writeErrors\r\n          },\r\n          writeResult\r\n        )\r\n      );\r\n\r\n      return true;\r\n    }\r\n\r\n    const writeConcernError = writeResult.getWriteConcernError();\r\n    if (writeConcernError) {\r\n      callback(new MongoBulkWriteError(writeConcernError, writeResult));\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  abstract addToOperationsList(\r\n    batchType: BatchType,\r\n    document: Document | UpdateStatement | DeleteStatement\r\n  ): this;\r\n}\r\n\r\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\r\n  enumerable: true,\r\n  get() {\r\n    return this.s.currentIndex;\r\n  }\r\n});\r\n\r\nfunction shouldForceServerObjectId(bulkOperation: BulkOperationBase): boolean {\r\n  if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\r\n    return bulkOperation.s.options.forceServerObjectId;\r\n  }\r\n\r\n  if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\r\n    return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction isInsertBatch(batch: Batch): boolean {\r\n  return batch.batchType === BatchType.INSERT;\r\n}\r\n\r\nfunction isUpdateBatch(batch: Batch): batch is Batch<UpdateStatement> {\r\n  return batch.batchType === BatchType.UPDATE;\r\n}\r\n\r\nfunction isDeleteBatch(batch: Batch): batch is Batch<DeleteStatement> {\r\n  return batch.batchType === BatchType.DELETE;\r\n}\r\n\r\nfunction buildCurrentOp(bulkOp: BulkOperationBase): Document {\r\n  let { currentOp } = bulkOp.s;\r\n  bulkOp.s.currentOp = undefined;\r\n  if (!currentOp) currentOp = {};\r\n  return currentOp;\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}