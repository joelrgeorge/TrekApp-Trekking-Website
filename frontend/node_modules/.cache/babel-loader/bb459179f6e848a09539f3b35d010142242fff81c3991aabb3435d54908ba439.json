{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoDBAWS = void 0;\nconst crypto = require(\"crypto\");\nconst util_1 = require(\"util\");\nconst BSON = require(\"../../bson\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst mongo_credentials_1 = require(\"./mongo_credentials\");\nconst providers_1 = require(\"./providers\");\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n  useBigInt64: false,\n  promoteLongs: true,\n  promoteValues: true,\n  promoteBuffers: false,\n  bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n  constructor() {\n    super();\n    this.randomBytesAsync = (0, util_1.promisify)(crypto.randomBytes);\n  }\n  async auth(authContext) {\n    const {\n      connection\n    } = authContext;\n    if (!authContext.credentials) {\n      throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if ('kModuleError' in deps_1.aws4) {\n      throw deps_1.aws4['kModuleError'];\n    }\n    const {\n      sign\n    } = deps_1.aws4;\n    if ((0, utils_1.maxWireVersion)(connection) < 9) {\n      throw new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later');\n    }\n    if (!authContext.credentials.username) {\n      authContext.credentials = await makeTempCredentials(authContext.credentials);\n    }\n    const {\n      credentials\n    } = authContext;\n    const accessKeyId = credentials.username;\n    const secretAccessKey = credentials.password;\n    const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n    // If all three defined, include sessionToken, else include username and pass, else no credentials\n    const awsCredentials = accessKeyId && secretAccessKey && sessionToken ? {\n      accessKeyId,\n      secretAccessKey,\n      sessionToken\n    } : accessKeyId && secretAccessKey ? {\n      accessKeyId,\n      secretAccessKey\n    } : undefined;\n    const db = credentials.source;\n    const nonce = await this.randomBytesAsync(32);\n    const saslStart = {\n      saslStart: 1,\n      mechanism: 'MONGODB-AWS',\n      payload: BSON.serialize({\n        r: nonce,\n        p: ASCII_N\n      }, bsonOptions)\n    };\n    const saslStartResponse = await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined);\n    const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);\n    const host = serverResponse.h;\n    const serverNonce = serverResponse.s.buffer;\n    if (serverNonce.length !== 64) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n    }\n    if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n      // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n      // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('Server nonce does not begin with client nonce');\n    }\n    if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n    }\n    const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n    const options = sign({\n      method: 'POST',\n      host,\n      region: deriveRegion(serverResponse.h),\n      service: 'sts',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Content-Length': body.length,\n        'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),\n        'X-MongoDB-GS2-CB-Flag': 'n'\n      },\n      path: '/',\n      body\n    }, awsCredentials);\n    const payload = {\n      a: options.headers.Authorization,\n      d: options.headers['X-Amz-Date']\n    };\n    if (sessionToken) {\n      payload.t = sessionToken;\n    }\n    const saslContinue = {\n      saslContinue: 1,\n      conversationId: 1,\n      payload: BSON.serialize(payload, bsonOptions)\n    };\n    await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined);\n  }\n}\nexports.MongoDBAWS = MongoDBAWS;\nasync function makeTempCredentials(credentials) {\n  function makeMongoCredentialsFromAWSTemp(creds) {\n    if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n      throw new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\n    }\n    return new mongo_credentials_1.MongoCredentials({\n      username: creds.AccessKeyId,\n      password: creds.SecretAccessKey,\n      source: credentials.source,\n      mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n      mechanismProperties: {\n        AWS_SESSION_TOKEN: creds.Token\n      }\n    });\n  }\n  const credentialProvider = (0, deps_1.getAwsCredentialProvider)();\n  // Check if the AWS credential provider from the SDK is present. If not,\n  // use the old method.\n  if ('kModuleError' in credentialProvider) {\n    // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n    // is set then drivers MUST assume that it was set by an AWS ECS agent\n    if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n      return makeMongoCredentialsFromAWSTemp(await (0, utils_1.request)(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`));\n    }\n    // Otherwise assume we are on an EC2 instance\n    // get a token\n    const token = await (0, utils_1.request)(`${AWS_EC2_URI}/latest/api/token`, {\n      method: 'PUT',\n      json: false,\n      headers: {\n        'X-aws-ec2-metadata-token-ttl-seconds': 30\n      }\n    });\n    // get role name\n    const roleName = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n      json: false,\n      headers: {\n        'X-aws-ec2-metadata-token': token\n      }\n    });\n    // get temp credentials\n    const creds = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n      headers: {\n        'X-aws-ec2-metadata-token': token\n      }\n    });\n    return makeMongoCredentialsFromAWSTemp(creds);\n  } else {\n    /*\r\n     * Creates a credential provider that will attempt to find credentials from the\r\n     * following sources (listed in order of precedence):\r\n     *\r\n     * - Environment variables exposed via process.env\r\n     * - SSO credentials from token cache\r\n     * - Web identity token credentials\r\n     * - Shared credentials and config ini files\r\n     * - The EC2/ECS Instance Metadata Service\r\n     */\n    const {\n      fromNodeProviderChain\n    } = credentialProvider;\n    const provider = fromNodeProviderChain();\n    try {\n      const creds = await provider();\n      return makeMongoCredentialsFromAWSTemp({\n        AccessKeyId: creds.accessKeyId,\n        SecretAccessKey: creds.secretAccessKey,\n        Token: creds.sessionToken,\n        Expiration: creds.expiration\n      });\n    } catch (error) {\n      throw new error_1.MongoAWSError(error.message);\n    }\n  }\n}\nfunction deriveRegion(host) {\n  const parts = host.split('.');\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n  return parts[1];\n}","map":{"version":3,"mappings":"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","names":["ASCII_N","AWS_RELATIVE_URI","AWS_EC2_URI","AWS_EC2_PATH","bsonOptions","useBigInt64","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","MongoDBAWS","auth_provider_1","constructor","randomBytesAsync","crypto","randomBytes","auth","authContext","connection","credentials","error_1","deps_1","sign","username","makeTempCredentials","accessKeyId","secretAccessKey","password","sessionToken","mechanismProperties","AWS_SESSION_TOKEN","awsCredentials","undefined","db","source","nonce","saslStart","mechanism","payload","BSON","serialize","r","p","saslStartResponse","commandAsync","serverResponse","deserialize","buffer","host","h","serverNonce","s","length","utils_1","equals","subarray","byteLength","indexOf","body","options","method","region","deriveRegion","service","headers","toBase64","path","a","Authorization","d","t","saslContinue","conversationId","exports","makeMongoCredentialsFromAWSTemp","creds","AccessKeyId","SecretAccessKey","Token","mongo_credentials_1","providers_1","MONGODB_AWS","credentialProvider","process","env","AWS_CONTAINER_CREDENTIALS_RELATIVE_URI","token","json","roleName","fromNodeProviderChain","provider","Expiration","expiration","error","message","parts","split"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\cmap\\auth\\mongodb_aws.ts"],"sourcesContent":["import * as crypto from 'crypto';\r\nimport { promisify } from 'util';\r\n\r\nimport type { Binary, BSONSerializeOptions } from '../../bson';\r\nimport * as BSON from '../../bson';\r\nimport { aws4, getAwsCredentialProvider } from '../../deps';\r\nimport {\r\n  MongoAWSError,\r\n  MongoCompatibilityError,\r\n  MongoMissingCredentialsError,\r\n  MongoRuntimeError\r\n} from '../../error';\r\nimport { ByteUtils, maxWireVersion, ns, request } from '../../utils';\r\nimport { type AuthContext, AuthProvider } from './auth_provider';\r\nimport { MongoCredentials } from './mongo_credentials';\r\nimport { AuthMechanism } from './providers';\r\n\r\nconst ASCII_N = 110;\r\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\r\nconst AWS_EC2_URI = 'http://169.254.169.254';\r\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\r\nconst bsonOptions: BSONSerializeOptions = {\r\n  useBigInt64: false,\r\n  promoteLongs: true,\r\n  promoteValues: true,\r\n  promoteBuffers: false,\r\n  bsonRegExp: false\r\n};\r\n\r\ninterface AWSSaslContinuePayload {\r\n  a: string;\r\n  d: string;\r\n  t?: string;\r\n}\r\n\r\nexport class MongoDBAWS extends AuthProvider {\r\n  randomBytesAsync: (size: number) => Promise<Buffer>;\r\n\r\n  constructor() {\r\n    super();\r\n    this.randomBytesAsync = promisify(crypto.randomBytes);\r\n  }\r\n\r\n  override async auth(authContext: AuthContext): Promise<void> {\r\n    const { connection } = authContext;\r\n    if (!authContext.credentials) {\r\n      throw new MongoMissingCredentialsError('AuthContext must provide credentials.');\r\n    }\r\n\r\n    if ('kModuleError' in aws4) {\r\n      throw aws4['kModuleError'];\r\n    }\r\n    const { sign } = aws4;\r\n\r\n    if (maxWireVersion(connection) < 9) {\r\n      throw new MongoCompatibilityError(\r\n        'MONGODB-AWS authentication requires MongoDB version 4.4 or later'\r\n      );\r\n    }\r\n\r\n    if (!authContext.credentials.username) {\r\n      authContext.credentials = await makeTempCredentials(authContext.credentials);\r\n    }\r\n\r\n    const { credentials } = authContext;\r\n\r\n    const accessKeyId = credentials.username;\r\n    const secretAccessKey = credentials.password;\r\n    const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\r\n\r\n    // If all three defined, include sessionToken, else include username and pass, else no credentials\r\n    const awsCredentials =\r\n      accessKeyId && secretAccessKey && sessionToken\r\n        ? { accessKeyId, secretAccessKey, sessionToken }\r\n        : accessKeyId && secretAccessKey\r\n        ? { accessKeyId, secretAccessKey }\r\n        : undefined;\r\n\r\n    const db = credentials.source;\r\n    const nonce = await this.randomBytesAsync(32);\r\n\r\n    const saslStart = {\r\n      saslStart: 1,\r\n      mechanism: 'MONGODB-AWS',\r\n      payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\r\n    };\r\n\r\n    const saslStartResponse = await connection.commandAsync(ns(`${db}.$cmd`), saslStart, undefined);\r\n\r\n    const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions) as {\r\n      s: Binary;\r\n      h: string;\r\n    };\r\n    const host = serverResponse.h;\r\n    const serverNonce = serverResponse.s.buffer;\r\n    if (serverNonce.length !== 64) {\r\n      // TODO(NODE-3483)\r\n      throw new MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\r\n    }\r\n\r\n    if (!ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\r\n      // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\r\n      // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\r\n\r\n      // TODO(NODE-3483)\r\n      throw new MongoRuntimeError('Server nonce does not begin with client nonce');\r\n    }\r\n\r\n    if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\r\n      // TODO(NODE-3483)\r\n      throw new MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\r\n    }\r\n\r\n    const body = 'Action=GetCallerIdentity&Version=2011-06-15';\r\n    const options = sign(\r\n      {\r\n        method: 'POST',\r\n        host,\r\n        region: deriveRegion(serverResponse.h),\r\n        service: 'sts',\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n          'Content-Length': body.length,\r\n          'X-MongoDB-Server-Nonce': ByteUtils.toBase64(serverNonce),\r\n          'X-MongoDB-GS2-CB-Flag': 'n'\r\n        },\r\n        path: '/',\r\n        body\r\n      },\r\n      awsCredentials\r\n    );\r\n\r\n    const payload: AWSSaslContinuePayload = {\r\n      a: options.headers.Authorization,\r\n      d: options.headers['X-Amz-Date']\r\n    };\r\n\r\n    if (sessionToken) {\r\n      payload.t = sessionToken;\r\n    }\r\n\r\n    const saslContinue = {\r\n      saslContinue: 1,\r\n      conversationId: 1,\r\n      payload: BSON.serialize(payload, bsonOptions)\r\n    };\r\n\r\n    await connection.commandAsync(ns(`${db}.$cmd`), saslContinue, undefined);\r\n  }\r\n}\r\n\r\ninterface AWSTempCredentials {\r\n  AccessKeyId?: string;\r\n  SecretAccessKey?: string;\r\n  Token?: string;\r\n  RoleArn?: string;\r\n  Expiration?: Date;\r\n}\r\n\r\n/* @internal */\r\nexport interface AWSCredentials {\r\n  accessKeyId?: string;\r\n  secretAccessKey?: string;\r\n  sessionToken?: string;\r\n  expiration?: Date;\r\n}\r\n\r\nasync function makeTempCredentials(credentials: MongoCredentials): Promise<MongoCredentials> {\r\n  function makeMongoCredentialsFromAWSTemp(creds: AWSTempCredentials) {\r\n    if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\r\n      throw new MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\r\n    }\r\n\r\n    return new MongoCredentials({\r\n      username: creds.AccessKeyId,\r\n      password: creds.SecretAccessKey,\r\n      source: credentials.source,\r\n      mechanism: AuthMechanism.MONGODB_AWS,\r\n      mechanismProperties: {\r\n        AWS_SESSION_TOKEN: creds.Token\r\n      }\r\n    });\r\n  }\r\n\r\n  const credentialProvider = getAwsCredentialProvider();\r\n\r\n  // Check if the AWS credential provider from the SDK is present. If not,\r\n  // use the old method.\r\n  if ('kModuleError' in credentialProvider) {\r\n    // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\r\n    // is set then drivers MUST assume that it was set by an AWS ECS agent\r\n    if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\r\n      return makeMongoCredentialsFromAWSTemp(\r\n        await request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`)\r\n      );\r\n    }\r\n\r\n    // Otherwise assume we are on an EC2 instance\r\n\r\n    // get a token\r\n    const token = await request(`${AWS_EC2_URI}/latest/api/token`, {\r\n      method: 'PUT',\r\n      json: false,\r\n      headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 }\r\n    });\r\n\r\n    // get role name\r\n    const roleName = await request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\r\n      json: false,\r\n      headers: { 'X-aws-ec2-metadata-token': token }\r\n    });\r\n\r\n    // get temp credentials\r\n    const creds = await request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\r\n      headers: { 'X-aws-ec2-metadata-token': token }\r\n    });\r\n\r\n    return makeMongoCredentialsFromAWSTemp(creds);\r\n  } else {\r\n    /*\r\n     * Creates a credential provider that will attempt to find credentials from the\r\n     * following sources (listed in order of precedence):\r\n     *\r\n     * - Environment variables exposed via process.env\r\n     * - SSO credentials from token cache\r\n     * - Web identity token credentials\r\n     * - Shared credentials and config ini files\r\n     * - The EC2/ECS Instance Metadata Service\r\n     */\r\n    const { fromNodeProviderChain } = credentialProvider;\r\n    const provider = fromNodeProviderChain();\r\n    try {\r\n      const creds = await provider();\r\n      return makeMongoCredentialsFromAWSTemp({\r\n        AccessKeyId: creds.accessKeyId,\r\n        SecretAccessKey: creds.secretAccessKey,\r\n        Token: creds.sessionToken,\r\n        Expiration: creds.expiration\r\n      });\r\n    } catch (error) {\r\n      throw new MongoAWSError(error.message);\r\n    }\r\n  }\r\n}\r\n\r\nfunction deriveRegion(host: string) {\r\n  const parts = host.split('.');\r\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\r\n    return 'us-east-1';\r\n  }\r\n\r\n  return parts[1];\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}