{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FindOperation = void 0;\nconst error_1 = require(\"../error\");\nconst read_concern_1 = require(\"../read_concern\");\nconst sort_1 = require(\"../sort\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass FindOperation extends command_1.CommandCallbackOperation {\n  constructor(collection, ns, filter = {}, options = {}) {\n    super(collection, options);\n    this.options = {\n      ...options\n    };\n    delete this.options.writeConcern;\n    this.ns = ns;\n    if (typeof filter !== 'object' || Array.isArray(filter)) {\n      throw new error_1.MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');\n    }\n    // special case passing in an ObjectId as a filter\n    this.filter = filter != null && filter._bsontype === 'ObjectId' ? {\n      _id: filter\n    } : filter;\n  }\n  executeCallback(server, session, callback) {\n    this.server = server;\n    const options = this.options;\n    let findCommand = makeFindCommand(this.ns, this.filter, options);\n    if (this.explain) {\n      findCommand = (0, utils_1.decorateWithExplain)(findCommand, this.explain);\n    }\n    server.command(this.ns, findCommand, {\n      ...this.options,\n      ...this.bsonOptions,\n      documentsReturnedIn: 'firstBatch',\n      session\n    }, callback);\n  }\n}\nexports.FindOperation = FindOperation;\nfunction makeFindCommand(ns, filter, options) {\n  const findCommand = {\n    find: ns.collection,\n    filter\n  };\n  if (options.sort) {\n    findCommand.sort = (0, sort_1.formatSort)(options.sort);\n  }\n  if (options.projection) {\n    let projection = options.projection;\n    if (projection && Array.isArray(projection)) {\n      projection = projection.length ? projection.reduce((result, field) => {\n        result[field] = 1;\n        return result;\n      }, {}) : {\n        _id: 1\n      };\n    }\n    findCommand.projection = projection;\n  }\n  if (options.hint) {\n    findCommand.hint = (0, utils_1.normalizeHintField)(options.hint);\n  }\n  if (typeof options.skip === 'number') {\n    findCommand.skip = options.skip;\n  }\n  if (typeof options.limit === 'number') {\n    if (options.limit < 0) {\n      findCommand.limit = -options.limit;\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.limit = options.limit;\n    }\n  }\n  if (typeof options.batchSize === 'number') {\n    if (options.batchSize < 0) {\n      if (options.limit && options.limit !== 0 && Math.abs(options.batchSize) < Math.abs(options.limit)) {\n        findCommand.limit = -options.batchSize;\n      }\n      findCommand.singleBatch = true;\n    } else {\n      findCommand.batchSize = options.batchSize;\n    }\n  }\n  if (typeof options.singleBatch === 'boolean') {\n    findCommand.singleBatch = options.singleBatch;\n  }\n  // we check for undefined specifically here to allow falsy values\n  // eslint-disable-next-line no-restricted-syntax\n  if (options.comment !== undefined) {\n    findCommand.comment = options.comment;\n  }\n  if (typeof options.maxTimeMS === 'number') {\n    findCommand.maxTimeMS = options.maxTimeMS;\n  }\n  const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n  if (readConcern) {\n    findCommand.readConcern = readConcern.toJSON();\n  }\n  if (options.max) {\n    findCommand.max = options.max;\n  }\n  if (options.min) {\n    findCommand.min = options.min;\n  }\n  if (typeof options.returnKey === 'boolean') {\n    findCommand.returnKey = options.returnKey;\n  }\n  if (typeof options.showRecordId === 'boolean') {\n    findCommand.showRecordId = options.showRecordId;\n  }\n  if (typeof options.tailable === 'boolean') {\n    findCommand.tailable = options.tailable;\n  }\n  if (typeof options.oplogReplay === 'boolean') {\n    findCommand.oplogReplay = options.oplogReplay;\n  }\n  if (typeof options.timeout === 'boolean') {\n    findCommand.noCursorTimeout = !options.timeout;\n  } else if (typeof options.noCursorTimeout === 'boolean') {\n    findCommand.noCursorTimeout = options.noCursorTimeout;\n  }\n  if (typeof options.awaitData === 'boolean') {\n    findCommand.awaitData = options.awaitData;\n  }\n  if (typeof options.allowPartialResults === 'boolean') {\n    findCommand.allowPartialResults = options.allowPartialResults;\n  }\n  if (options.collation) {\n    findCommand.collation = options.collation;\n  }\n  if (typeof options.allowDiskUse === 'boolean') {\n    findCommand.allowDiskUse = options.allowDiskUse;\n  }\n  if (options.let) {\n    findCommand.let = options.let;\n  }\n  return findCommand;\n}\n(0, operation_1.defineAspects)(FindOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.CURSOR_CREATING]);","map":{"version":3,"mappings":"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","names":["FindOperation","command_1","constructor","collection","ns","filter","options","writeConcern","Array","isArray","error_1","_bsontype","_id","executeCallback","server","session","callback","findCommand","makeFindCommand","explain","command","bsonOptions","documentsReturnedIn","exports","find","sort","projection","length","reduce","result","field","hint","skip","limit","singleBatch","batchSize","Math","abs","comment","undefined","maxTimeMS","readConcern","read_concern_1","fromOptions","toJSON","max","min","returnKey","showRecordId","tailable","oplogReplay","timeout","noCursorTimeout","awaitData","allowPartialResults","collation","allowDiskUse","let","operation_1","READ_OPERATION","RETRYABLE","EXPLAINABLE","CURSOR_CREATING"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\operations\\find.ts"],"sourcesContent":["import type { Document } from '../bson';\r\nimport type { Collection } from '../collection';\r\nimport { MongoInvalidArgumentError } from '../error';\r\nimport { ReadConcern } from '../read_concern';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport { formatSort, type Sort } from '../sort';\r\nimport {\r\n  type Callback,\r\n  decorateWithExplain,\r\n  type MongoDBNamespace,\r\n  normalizeHintField\r\n} from '../utils';\r\nimport {\r\n  type CollationOptions,\r\n  CommandCallbackOperation,\r\n  type CommandOperationOptions\r\n} from './command';\r\nimport { Aspect, defineAspects, type Hint } from './operation';\r\n\r\n/**\r\n * @public\r\n * @typeParam TSchema - Unused schema definition, deprecated usage, only specify `FindOptions` with no generic\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport interface FindOptions<TSchema extends Document = Document>\r\n  extends Omit<CommandOperationOptions, 'writeConcern'> {\r\n  /** Sets the limit of documents returned in the query. */\r\n  limit?: number;\r\n  /** Set to sort the documents coming back from the query. Array of indexes, `[['a', 1]]` etc. */\r\n  sort?: Sort;\r\n  /** The fields to return in the query. Object of fields to either include or exclude (one of, not both), `{'a':1, 'b': 1}` **or** `{'a': 0, 'b': 0}` */\r\n  projection?: Document;\r\n  /** Set to skip N documents ahead in your query (useful for pagination). */\r\n  skip?: number;\r\n  /** Tell the query to use specific indexes in the query. Object of indexes to use, `{'_id':1}` */\r\n  hint?: Hint;\r\n  /** Specify if the cursor can timeout. */\r\n  timeout?: boolean;\r\n  /** Specify if the cursor is tailable. */\r\n  tailable?: boolean;\r\n  /** Specify if the cursor is a tailable-await cursor. Requires `tailable` to be true */\r\n  awaitData?: boolean;\r\n  /** Set the batchSize for the getMoreCommand when iterating over the query results. */\r\n  batchSize?: number;\r\n  /** If true, returns only the index keys in the resulting documents. */\r\n  returnKey?: boolean;\r\n  /** The inclusive lower bound for a specific index */\r\n  min?: Document;\r\n  /** The exclusive upper bound for a specific index */\r\n  max?: Document;\r\n  /** Number of milliseconds to wait before aborting the query. */\r\n  maxTimeMS?: number;\r\n  /** The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. Requires `tailable` and `awaitData` to be true */\r\n  maxAwaitTimeMS?: number;\r\n  /** The server normally times out idle cursors after an inactivity period (10 minutes) to prevent excess memory use. Set this option to prevent that. */\r\n  noCursorTimeout?: boolean;\r\n  /** Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields). */\r\n  collation?: CollationOptions;\r\n  /** Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher) */\r\n  allowDiskUse?: boolean;\r\n  /** Determines whether to close the cursor after the first batch. Defaults to false. */\r\n  singleBatch?: boolean;\r\n  /** For queries against a sharded collection, allows the command (or subsequent getMore commands) to return partial results, rather than an error, if one or more queried shards are unavailable. */\r\n  allowPartialResults?: boolean;\r\n  /** Determines whether to return the record identifier for each document. If true, adds a field $recordId to the returned documents. */\r\n  showRecordId?: boolean;\r\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\r\n  let?: Document;\r\n  /**\r\n   * Option to enable an optimized code path for queries looking for a particular range of `ts` values in the oplog. Requires `tailable` to be true.\r\n   * @deprecated Starting from MongoDB 4.4 this flag is not needed and will be ignored.\r\n   */\r\n  oplogReplay?: boolean;\r\n}\r\n\r\n/** @internal */\r\nexport class FindOperation extends CommandCallbackOperation<Document> {\r\n  /**\r\n   * @remarks WriteConcern can still be present on the options because\r\n   * we inherit options from the client/db/collection.  The\r\n   * key must be present on the options in order to delete it.\r\n   * This allows typescript to delete the key but will\r\n   * not allow a writeConcern to be assigned as a property on options.\r\n   */\r\n  override options: FindOptions & { writeConcern?: never };\r\n  filter: Document;\r\n\r\n  constructor(\r\n    collection: Collection | undefined,\r\n    ns: MongoDBNamespace,\r\n    filter: Document = {},\r\n    options: FindOptions = {}\r\n  ) {\r\n    super(collection, options);\r\n\r\n    this.options = { ...options };\r\n    delete this.options.writeConcern;\r\n    this.ns = ns;\r\n\r\n    if (typeof filter !== 'object' || Array.isArray(filter)) {\r\n      throw new MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');\r\n    }\r\n\r\n    // special case passing in an ObjectId as a filter\r\n    this.filter = filter != null && filter._bsontype === 'ObjectId' ? { _id: filter } : filter;\r\n  }\r\n\r\n  override executeCallback(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<Document>\r\n  ): void {\r\n    this.server = server;\r\n\r\n    const options = this.options;\r\n\r\n    let findCommand = makeFindCommand(this.ns, this.filter, options);\r\n    if (this.explain) {\r\n      findCommand = decorateWithExplain(findCommand, this.explain);\r\n    }\r\n\r\n    server.command(\r\n      this.ns,\r\n      findCommand,\r\n      {\r\n        ...this.options,\r\n        ...this.bsonOptions,\r\n        documentsReturnedIn: 'firstBatch',\r\n        session\r\n      },\r\n      callback\r\n    );\r\n  }\r\n}\r\n\r\nfunction makeFindCommand(ns: MongoDBNamespace, filter: Document, options: FindOptions): Document {\r\n  const findCommand: Document = {\r\n    find: ns.collection,\r\n    filter\r\n  };\r\n\r\n  if (options.sort) {\r\n    findCommand.sort = formatSort(options.sort);\r\n  }\r\n\r\n  if (options.projection) {\r\n    let projection = options.projection;\r\n    if (projection && Array.isArray(projection)) {\r\n      projection = projection.length\r\n        ? projection.reduce((result, field) => {\r\n            result[field] = 1;\r\n            return result;\r\n          }, {})\r\n        : { _id: 1 };\r\n    }\r\n\r\n    findCommand.projection = projection;\r\n  }\r\n\r\n  if (options.hint) {\r\n    findCommand.hint = normalizeHintField(options.hint);\r\n  }\r\n\r\n  if (typeof options.skip === 'number') {\r\n    findCommand.skip = options.skip;\r\n  }\r\n\r\n  if (typeof options.limit === 'number') {\r\n    if (options.limit < 0) {\r\n      findCommand.limit = -options.limit;\r\n      findCommand.singleBatch = true;\r\n    } else {\r\n      findCommand.limit = options.limit;\r\n    }\r\n  }\r\n\r\n  if (typeof options.batchSize === 'number') {\r\n    if (options.batchSize < 0) {\r\n      if (\r\n        options.limit &&\r\n        options.limit !== 0 &&\r\n        Math.abs(options.batchSize) < Math.abs(options.limit)\r\n      ) {\r\n        findCommand.limit = -options.batchSize;\r\n      }\r\n\r\n      findCommand.singleBatch = true;\r\n    } else {\r\n      findCommand.batchSize = options.batchSize;\r\n    }\r\n  }\r\n\r\n  if (typeof options.singleBatch === 'boolean') {\r\n    findCommand.singleBatch = options.singleBatch;\r\n  }\r\n\r\n  // we check for undefined specifically here to allow falsy values\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  if (options.comment !== undefined) {\r\n    findCommand.comment = options.comment;\r\n  }\r\n\r\n  if (typeof options.maxTimeMS === 'number') {\r\n    findCommand.maxTimeMS = options.maxTimeMS;\r\n  }\r\n\r\n  const readConcern = ReadConcern.fromOptions(options);\r\n  if (readConcern) {\r\n    findCommand.readConcern = readConcern.toJSON();\r\n  }\r\n\r\n  if (options.max) {\r\n    findCommand.max = options.max;\r\n  }\r\n\r\n  if (options.min) {\r\n    findCommand.min = options.min;\r\n  }\r\n\r\n  if (typeof options.returnKey === 'boolean') {\r\n    findCommand.returnKey = options.returnKey;\r\n  }\r\n\r\n  if (typeof options.showRecordId === 'boolean') {\r\n    findCommand.showRecordId = options.showRecordId;\r\n  }\r\n\r\n  if (typeof options.tailable === 'boolean') {\r\n    findCommand.tailable = options.tailable;\r\n  }\r\n\r\n  if (typeof options.oplogReplay === 'boolean') {\r\n    findCommand.oplogReplay = options.oplogReplay;\r\n  }\r\n\r\n  if (typeof options.timeout === 'boolean') {\r\n    findCommand.noCursorTimeout = !options.timeout;\r\n  } else if (typeof options.noCursorTimeout === 'boolean') {\r\n    findCommand.noCursorTimeout = options.noCursorTimeout;\r\n  }\r\n\r\n  if (typeof options.awaitData === 'boolean') {\r\n    findCommand.awaitData = options.awaitData;\r\n  }\r\n\r\n  if (typeof options.allowPartialResults === 'boolean') {\r\n    findCommand.allowPartialResults = options.allowPartialResults;\r\n  }\r\n\r\n  if (options.collation) {\r\n    findCommand.collation = options.collation;\r\n  }\r\n\r\n  if (typeof options.allowDiskUse === 'boolean') {\r\n    findCommand.allowDiskUse = options.allowDiskUse;\r\n  }\r\n\r\n  if (options.let) {\r\n    findCommand.let = options.let;\r\n  }\r\n\r\n  return findCommand;\r\n}\r\n\r\ndefineAspects(FindOperation, [\r\n  Aspect.READ_OPERATION,\r\n  Aspect.RETRYABLE,\r\n  Aspect.EXPLAINABLE,\r\n  Aspect.CURSOR_CREATING\r\n]);\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}