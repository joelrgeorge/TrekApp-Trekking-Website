{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AzureTokenCache = exports.AzureTokenEntry = void 0;\nconst cache_1 = require(\"./cache\");\n/** @internal */\nclass AzureTokenEntry extends cache_1.ExpiringCacheEntry {\n  /**\r\n   * Instantiate the entry.\r\n   */\n  constructor(token, expiration) {\n    super(expiration);\n    this.token = token;\n  }\n}\nexports.AzureTokenEntry = AzureTokenEntry;\n/**\r\n * A cache of access tokens from Azure.\r\n * @internal\r\n */\nclass AzureTokenCache extends cache_1.Cache {\n  /**\r\n   * Add an entry to the cache.\r\n   */\n  addEntry(tokenAudience, token) {\n    const entry = new AzureTokenEntry(token.access_token, token.expires_in);\n    this.entries.set(tokenAudience, entry);\n    return entry;\n  }\n  /**\r\n   * Create a cache key.\r\n   */\n  cacheKey(tokenAudience) {\n    return tokenAudience;\n  }\n  /**\r\n   * Delete an entry from the cache.\r\n   */\n  deleteEntry(tokenAudience) {\n    this.entries.delete(tokenAudience);\n  }\n  /**\r\n   * Get an Azure token entry from the cache.\r\n   */\n  getEntry(tokenAudience) {\n    return this.entries.get(tokenAudience);\n  }\n}\nexports.AzureTokenCache = AzureTokenCache;","map":{"version":3,"mappings":";;;;;;AACA;AAEA;AACA,MAAaA,eAAgB,SAAQC,0BAAkB;EAGrD;;;EAGAC,YAAYC,KAAa,EAAEC,UAAkB;IAC3C,KAAK,CAACA,UAAU,CAAC;IACjB,IAAI,CAACD,KAAK,GAAGA,KAAK;EACpB;;AATFE;AAYA;;;;AAIA,MAAaC,eAAgB,SAAQL,aAAsB;EACzD;;;EAGAM,QAAQ,CAACC,aAAqB,EAAEL,KAAuB;IACrD,MAAMM,KAAK,GAAG,IAAIT,eAAe,CAACG,KAAK,CAACO,YAAY,EAAEP,KAAK,CAACQ,UAAU,CAAC;IACvE,IAAI,CAACC,OAAO,CAACC,GAAG,CAACL,aAAa,EAAEC,KAAK,CAAC;IACtC,OAAOA,KAAK;EACd;EAEA;;;EAGAK,QAAQ,CAACN,aAAqB;IAC5B,OAAOA,aAAa;EACtB;EAEA;;;EAGAO,WAAW,CAACP,aAAqB;IAC/B,IAAI,CAACI,OAAO,CAACI,MAAM,CAACR,aAAa,CAAC;EACpC;EAEA;;;EAGAS,QAAQ,CAACT,aAAqB;IAC5B,OAAO,IAAI,CAACI,OAAO,CAACM,GAAG,CAACV,aAAa,CAAC;EACxC;;AA7BFH","names":["AzureTokenEntry","cache_1","constructor","token","expiration","exports","AzureTokenCache","addEntry","tokenAudience","entry","access_token","expires_in","entries","set","cacheKey","deleteEntry","delete","getEntry","get"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\cmap\\auth\\mongodb_oidc\\azure_token_cache.ts"],"sourcesContent":["import type { AzureAccessToken } from './azure_service_workflow';\r\nimport { Cache, ExpiringCacheEntry } from './cache';\r\n\r\n/** @internal */\r\nexport class AzureTokenEntry extends ExpiringCacheEntry {\r\n  token: string;\r\n\r\n  /**\r\n   * Instantiate the entry.\r\n   */\r\n  constructor(token: string, expiration: number) {\r\n    super(expiration);\r\n    this.token = token;\r\n  }\r\n}\r\n\r\n/**\r\n * A cache of access tokens from Azure.\r\n * @internal\r\n */\r\nexport class AzureTokenCache extends Cache<AzureTokenEntry> {\r\n  /**\r\n   * Add an entry to the cache.\r\n   */\r\n  addEntry(tokenAudience: string, token: AzureAccessToken): AzureTokenEntry {\r\n    const entry = new AzureTokenEntry(token.access_token, token.expires_in);\r\n    this.entries.set(tokenAudience, entry);\r\n    return entry;\r\n  }\r\n\r\n  /**\r\n   * Create a cache key.\r\n   */\r\n  cacheKey(tokenAudience: string): string {\r\n    return tokenAudience;\r\n  }\r\n\r\n  /**\r\n   * Delete an entry from the cache.\r\n   */\r\n  deleteEntry(tokenAudience: string): void {\r\n    this.entries.delete(tokenAudience);\r\n  }\r\n\r\n  /**\r\n   * Get an Azure token entry from the cache.\r\n   */\r\n  getEntry(tokenAudience: string): AzureTokenEntry | undefined {\r\n    return this.entries.get(tokenAudience);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}