{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFAASEnv = exports.makeClientMetadata = exports.LimitedSizeDocument = void 0;\nconst os = require(\"os\");\nconst process = require(\"process\");\nconst bson_1 = require(\"../../bson\");\nconst error_1 = require(\"../../error\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = require('../../../package.json').version;\n/** @internal */\nclass LimitedSizeDocument {\n  constructor(maxSize) {\n    this.maxSize = maxSize;\n    this.document = new Map();\n    /** BSON overhead: Int32 + Null byte */\n    this.documentSize = 5;\n  }\n  /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */\n  ifItFitsItSits(key, value) {\n    // The BSON byteLength of the new element is the same as serializing it to its own document\n    // subtracting the document size int32 and the null terminator.\n    const newElementSize = bson_1.BSON.serialize(new Map().set(key, value)).byteLength - 5;\n    if (newElementSize + this.documentSize > this.maxSize) {\n      return false;\n    }\n    this.documentSize += newElementSize;\n    this.document.set(key, value);\n    return true;\n  }\n  toObject() {\n    return bson_1.BSON.deserialize(bson_1.BSON.serialize(this.document), {\n      promoteLongs: false,\n      promoteBuffers: false,\n      promoteValues: false,\n      useBigInt64: false\n    });\n  }\n}\nexports.LimitedSizeDocument = LimitedSizeDocument;\n/**\r\n * From the specs:\r\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\r\n * 1. Omit fields from `env` except `env.name`.\r\n * 2. Omit fields from `os` except `os.type`.\r\n * 3. Omit the `env` document entirely.\r\n * 4. Truncate `platform`. -- special we do not truncate this field\r\n */\nfunction makeClientMetadata(options) {\n  const metadataDocument = new LimitedSizeDocument(512);\n  const {\n    appName = ''\n  } = options;\n  // Add app name first, it must be sent\n  if (appName.length > 0) {\n    const name = Buffer.byteLength(appName, 'utf8') <= 128 ? options.appName : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');\n    metadataDocument.ifItFitsItSits('application', {\n      name\n    });\n  }\n  const {\n    name = '',\n    version = '',\n    platform = ''\n  } = options.driverInfo;\n  const driverInfo = {\n    name: name.length > 0 ? `nodejs|${name}` : 'nodejs',\n    version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\n  };\n  if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {\n    throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo name and version, metadata cannot exceed 512 bytes');\n  }\n  let runtimeInfo = getRuntimeInfo();\n  if (platform.length > 0) {\n    runtimeInfo = `${runtimeInfo}|${platform}`;\n  }\n  if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {\n    throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo platform, metadata cannot exceed 512 bytes');\n  }\n  // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n  const osInfo = new Map().set('name', process.platform).set('architecture', process.arch).set('version', os.release()).set('type', os.type());\n  if (!metadataDocument.ifItFitsItSits('os', osInfo)) {\n    for (const key of osInfo.keys()) {\n      osInfo.delete(key);\n      if (osInfo.size === 0) break;\n      if (metadataDocument.ifItFitsItSits('os', osInfo)) break;\n    }\n  }\n  const faasEnv = getFAASEnv();\n  if (faasEnv != null) {\n    if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {\n      for (const key of faasEnv.keys()) {\n        faasEnv.delete(key);\n        if (faasEnv.size === 0) break;\n        if (metadataDocument.ifItFitsItSits('env', faasEnv)) break;\n      }\n    }\n  }\n  return metadataDocument.toObject();\n}\nexports.makeClientMetadata = makeClientMetadata;\n/**\r\n * Collects FaaS metadata.\r\n * - `name` MUST be the last key in the Map returned.\r\n */\nfunction getFAASEnv() {\n  const {\n    AWS_EXECUTION_ENV = '',\n    AWS_LAMBDA_RUNTIME_API = '',\n    FUNCTIONS_WORKER_RUNTIME = '',\n    K_SERVICE = '',\n    FUNCTION_NAME = '',\n    VERCEL = '',\n    AWS_LAMBDA_FUNCTION_MEMORY_SIZE = '',\n    AWS_REGION = '',\n    FUNCTION_MEMORY_MB = '',\n    FUNCTION_REGION = '',\n    FUNCTION_TIMEOUT_SEC = '',\n    VERCEL_REGION = ''\n  } = process.env;\n  const isAWSFaaS = AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;\n  const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n  const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n  const isVercelFaaS = VERCEL.length > 0;\n  // Note: order matters, name must always be the last key\n  const faasEnv = new Map();\n  // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n  if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n    if (VERCEL_REGION.length > 0) {\n      faasEnv.set('region', VERCEL_REGION);\n    }\n    faasEnv.set('name', 'vercel');\n    return faasEnv;\n  }\n  if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n    if (AWS_REGION.length > 0) {\n      faasEnv.set('region', AWS_REGION);\n    }\n    if (AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 && Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)) {\n      faasEnv.set('memory_mb', new bson_1.Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n    }\n    faasEnv.set('name', 'aws.lambda');\n    return faasEnv;\n  }\n  if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n    faasEnv.set('name', 'azure.func');\n    return faasEnv;\n  }\n  if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n    if (FUNCTION_REGION.length > 0) {\n      faasEnv.set('region', FUNCTION_REGION);\n    }\n    if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n      faasEnv.set('memory_mb', new bson_1.Int32(FUNCTION_MEMORY_MB));\n    }\n    if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n      faasEnv.set('timeout_sec', new bson_1.Int32(FUNCTION_TIMEOUT_SEC));\n    }\n    faasEnv.set('name', 'gcp.func');\n    return faasEnv;\n  }\n  return null;\n}\nexports.getFAASEnv = getFAASEnv;\n/**\r\n * @internal\r\n * Get current JavaScript runtime platform\r\n *\r\n * NOTE: The version information fetching is intentionally written defensively\r\n * to avoid having a released driver version that becomes incompatible\r\n * with a future change to these global objects.\r\n */\nfunction getRuntimeInfo() {\n  if ('Deno' in globalThis) {\n    const version = typeof Deno?.version?.deno === 'string' ? Deno?.version?.deno : '0.0.0-unknown';\n    return `Deno v${version}, ${os.endianness()}`;\n  }\n  if ('Bun' in globalThis) {\n    const version = typeof Bun?.version === 'string' ? Bun?.version : '0.0.0-unknown';\n    return `Bun v${version}, ${os.endianness()}`;\n  }\n  return `Node.js ${process.version}, ${os.endianness()}`;\n}","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEA;AACA;AAGA;AACA,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,uBAAuB,CAAC,CAACC,OAAO;AAyCpE;AACA,MAAaC,mBAAmB;EAI9BC,YAAoBC,OAAe;IAAf,YAAO,GAAPA,OAAO;IAHnB,aAAQ,GAAG,IAAIC,GAAG,EAAE;IAC5B;IACQ,iBAAY,GAAG,CAAC;EACc;EAEtC;EACOC,cAAc,CAACC,GAAW,EAAEC,KAAmC;IACpE;IACA;IACA,MAAMC,cAAc,GAAGC,WAAI,CAACC,SAAS,CAAC,IAAIN,GAAG,EAAE,CAACO,GAAG,CAACL,GAAG,EAAEC,KAAK,CAAC,CAAC,CAACK,UAAU,GAAG,CAAC;IAE/E,IAAIJ,cAAc,GAAG,IAAI,CAACK,YAAY,GAAG,IAAI,CAACV,OAAO,EAAE;MACrD,OAAO,KAAK;;IAGd,IAAI,CAACU,YAAY,IAAIL,cAAc;IAEnC,IAAI,CAACM,QAAQ,CAACH,GAAG,CAACL,GAAG,EAAEC,KAAK,CAAC;IAE7B,OAAO,IAAI;EACb;EAEAQ,QAAQ;IACN,OAAON,WAAI,CAACO,WAAW,CAACP,WAAI,CAACC,SAAS,CAAC,IAAI,CAACI,QAAQ,CAAC,EAAE;MACrDG,YAAY,EAAE,KAAK;MACnBC,cAAc,EAAE,KAAK;MACrBC,aAAa,EAAE,KAAK;MACpBC,WAAW,EAAE;KACd,CAAmB;EACtB;;AA9BFC;AAkCA;;;;;;;;AAQA,SAAgBC,kBAAkB,CAACC,OAAkC;EACnE,MAAMC,gBAAgB,GAAG,IAAIvB,mBAAmB,CAAC,GAAG,CAAC;EAErD,MAAM;IAAEwB,OAAO,GAAG;EAAE,CAAE,GAAGF,OAAO;EAChC;EACA,IAAIE,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;IACtB,MAAMC,IAAI,GACRC,MAAM,CAAChB,UAAU,CAACa,OAAO,EAAE,MAAM,CAAC,IAAI,GAAG,GACrCF,OAAO,CAACE,OAAO,GACfG,MAAM,CAACC,IAAI,CAACJ,OAAO,EAAE,MAAM,CAAC,CAACK,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC;IACpEP,gBAAgB,CAACnB,cAAc,CAAC,aAAa,EAAE;MAAEsB;IAAI,CAAE,CAAC;;EAG1D,MAAM;IAAEA,IAAI,GAAG,EAAE;IAAE3B,OAAO,GAAG,EAAE;IAAEgC,QAAQ,GAAG;EAAE,CAAE,GAAGT,OAAO,CAACU,UAAU;EAErE,MAAMA,UAAU,GAAG;IACjBN,IAAI,EAAEA,IAAI,CAACD,MAAM,GAAG,CAAC,GAAG,UAAUC,IAAI,EAAE,GAAG,QAAQ;IACnD3B,OAAO,EAAEA,OAAO,CAAC0B,MAAM,GAAG,CAAC,GAAG,GAAG5B,mBAAmB,IAAIE,OAAO,EAAE,GAAGF;GACrE;EAED,IAAI,CAAC0B,gBAAgB,CAACnB,cAAc,CAAC,QAAQ,EAAE4B,UAAU,CAAC,EAAE;IAC1D,MAAM,IAAIC,iCAAyB,CACjC,iFAAiF,CAClF;;EAGH,IAAIC,WAAW,GAAGC,cAAc,EAAE;EAClC,IAAIJ,QAAQ,CAACN,MAAM,GAAG,CAAC,EAAE;IACvBS,WAAW,GAAG,GAAGA,WAAW,IAAIH,QAAQ,EAAE;;EAG5C,IAAI,CAACR,gBAAgB,CAACnB,cAAc,CAAC,UAAU,EAAE8B,WAAW,CAAC,EAAE;IAC7D,MAAM,IAAID,iCAAyB,CACjC,yEAAyE,CAC1E;;EAGH;EACA,MAAMG,MAAM,GAAG,IAAIjC,GAAG,EAAE,CACrBO,GAAG,CAAC,MAAM,EAAE2B,OAAO,CAACN,QAAQ,CAAC,CAC7BrB,GAAG,CAAC,cAAc,EAAE2B,OAAO,CAACC,IAAI,CAAC,CACjC5B,GAAG,CAAC,SAAS,EAAE6B,EAAE,CAACC,OAAO,EAAE,CAAC,CAC5B9B,GAAG,CAAC,MAAM,EAAE6B,EAAE,CAACE,IAAI,EAAE,CAAC;EAEzB,IAAI,CAAClB,gBAAgB,CAACnB,cAAc,CAAC,IAAI,EAAEgC,MAAM,CAAC,EAAE;IAClD,KAAK,MAAM/B,GAAG,IAAI+B,MAAM,CAACM,IAAI,EAAE,EAAE;MAC/BN,MAAM,CAACO,MAAM,CAACtC,GAAG,CAAC;MAClB,IAAI+B,MAAM,CAACQ,IAAI,KAAK,CAAC,EAAE;MACvB,IAAIrB,gBAAgB,CAACnB,cAAc,CAAC,IAAI,EAAEgC,MAAM,CAAC,EAAE;;;EAIvD,MAAMS,OAAO,GAAGC,UAAU,EAAE;EAC5B,IAAID,OAAO,IAAI,IAAI,EAAE;IACnB,IAAI,CAACtB,gBAAgB,CAACnB,cAAc,CAAC,KAAK,EAAEyC,OAAO,CAAC,EAAE;MACpD,KAAK,MAAMxC,GAAG,IAAIwC,OAAO,CAACH,IAAI,EAAE,EAAE;QAChCG,OAAO,CAACF,MAAM,CAACtC,GAAG,CAAC;QACnB,IAAIwC,OAAO,CAACD,IAAI,KAAK,CAAC,EAAE;QACxB,IAAIrB,gBAAgB,CAACnB,cAAc,CAAC,KAAK,EAAEyC,OAAO,CAAC,EAAE;;;;EAK3D,OAAOtB,gBAAgB,CAACT,QAAQ,EAAE;AACpC;AAhEAM;AAkEA;;;;AAIA,SAAgB0B,UAAU;EACxB,MAAM;IACJC,iBAAiB,GAAG,EAAE;IACtBC,sBAAsB,GAAG,EAAE;IAC3BC,wBAAwB,GAAG,EAAE;IAC7BC,SAAS,GAAG,EAAE;IACdC,aAAa,GAAG,EAAE;IAClBC,MAAM,GAAG,EAAE;IACXC,+BAA+B,GAAG,EAAE;IACpCC,UAAU,GAAG,EAAE;IACfC,kBAAkB,GAAG,EAAE;IACvBC,eAAe,GAAG,EAAE;IACpBC,oBAAoB,GAAG,EAAE;IACzBC,aAAa,GAAG;EAAE,CACnB,GAAGrB,OAAO,CAACsB,GAAG;EAEf,MAAMC,SAAS,GACbb,iBAAiB,CAACc,UAAU,CAAC,aAAa,CAAC,IAAIb,sBAAsB,CAACvB,MAAM,GAAG,CAAC;EAClF,MAAMqC,WAAW,GAAGb,wBAAwB,CAACxB,MAAM,GAAG,CAAC;EACvD,MAAMsC,SAAS,GAAGb,SAAS,CAACzB,MAAM,GAAG,CAAC,IAAI0B,aAAa,CAAC1B,MAAM,GAAG,CAAC;EAClE,MAAMuC,YAAY,GAAGZ,MAAM,CAAC3B,MAAM,GAAG,CAAC;EAEtC;EACA,MAAMoB,OAAO,GAAG,IAAI1C,GAAG,EAAE;EAEzB;EACA,IAAI6D,YAAY,IAAI,EAAEF,WAAW,IAAIC,SAAS,CAAC,EAAE;IAC/C,IAAIL,aAAa,CAACjC,MAAM,GAAG,CAAC,EAAE;MAC5BoB,OAAO,CAACnC,GAAG,CAAC,QAAQ,EAAEgD,aAAa,CAAC;;IAGtCb,OAAO,CAACnC,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC7B,OAAOmC,OAAO;;EAGhB,IAAIe,SAAS,IAAI,EAAEE,WAAW,IAAIC,SAAS,IAAIC,YAAY,CAAC,EAAE;IAC5D,IAAIV,UAAU,CAAC7B,MAAM,GAAG,CAAC,EAAE;MACzBoB,OAAO,CAACnC,GAAG,CAAC,QAAQ,EAAE4C,UAAU,CAAC;;IAGnC,IACED,+BAA+B,CAAC5B,MAAM,GAAG,CAAC,IAC1CwC,MAAM,CAACC,SAAS,CAAC,CAACb,+BAA+B,CAAC,EAClD;MACAR,OAAO,CAACnC,GAAG,CAAC,WAAW,EAAE,IAAIF,YAAK,CAAC6C,+BAA+B,CAAC,CAAC;;IAGtER,OAAO,CAACnC,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC;IACjC,OAAOmC,OAAO;;EAGhB,IAAIiB,WAAW,IAAI,EAAEC,SAAS,IAAIH,SAAS,IAAII,YAAY,CAAC,EAAE;IAC5DnB,OAAO,CAACnC,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC;IACjC,OAAOmC,OAAO;;EAGhB,IAAIkB,SAAS,IAAI,EAAED,WAAW,IAAIF,SAAS,IAAII,YAAY,CAAC,EAAE;IAC5D,IAAIR,eAAe,CAAC/B,MAAM,GAAG,CAAC,EAAE;MAC9BoB,OAAO,CAACnC,GAAG,CAAC,QAAQ,EAAE8C,eAAe,CAAC;;IAGxC,IAAID,kBAAkB,CAAC9B,MAAM,GAAG,CAAC,IAAIwC,MAAM,CAACC,SAAS,CAAC,CAACX,kBAAkB,CAAC,EAAE;MAC1EV,OAAO,CAACnC,GAAG,CAAC,WAAW,EAAE,IAAIF,YAAK,CAAC+C,kBAAkB,CAAC,CAAC;;IAGzD,IAAIE,oBAAoB,CAAChC,MAAM,GAAG,CAAC,IAAIwC,MAAM,CAACC,SAAS,CAAC,CAACT,oBAAoB,CAAC,EAAE;MAC9EZ,OAAO,CAACnC,GAAG,CAAC,aAAa,EAAE,IAAIF,YAAK,CAACiD,oBAAoB,CAAC,CAAC;;IAG7DZ,OAAO,CAACnC,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC;IAC/B,OAAOmC,OAAO;;EAGhB,OAAO,IAAI;AACb;AA1EAzB;AAwFA;;;;;;;;AAQA,SAASe,cAAc;EACrB,IAAI,MAAM,IAAIgC,UAAU,EAAE;IACxB,MAAMpE,OAAO,GAAG,OAAOqE,IAAI,EAAErE,OAAO,EAAEsE,IAAI,KAAK,QAAQ,GAAGD,IAAI,EAAErE,OAAO,EAAEsE,IAAI,GAAG,eAAe;IAE/F,OAAO,SAAStE,OAAO,KAAKwC,EAAE,CAAC+B,UAAU,EAAE,EAAE;;EAG/C,IAAI,KAAK,IAAIH,UAAU,EAAE;IACvB,MAAMpE,OAAO,GAAG,OAAOwE,GAAG,EAAExE,OAAO,KAAK,QAAQ,GAAGwE,GAAG,EAAExE,OAAO,GAAG,eAAe;IAEjF,OAAO,QAAQA,OAAO,KAAKwC,EAAE,CAAC+B,UAAU,EAAE,EAAE;;EAG9C,OAAO,WAAWjC,OAAO,CAACtC,OAAO,KAAKwC,EAAE,CAAC+B,UAAU,EAAE,EAAE;AACzD","names":["NODE_DRIVER_VERSION","require","version","LimitedSizeDocument","constructor","maxSize","Map","ifItFitsItSits","key","value","newElementSize","bson_1","serialize","set","byteLength","documentSize","document","toObject","deserialize","promoteLongs","promoteBuffers","promoteValues","useBigInt64","exports","makeClientMetadata","options","metadataDocument","appName","length","name","Buffer","from","subarray","toString","platform","driverInfo","error_1","runtimeInfo","getRuntimeInfo","osInfo","process","arch","os","release","type","keys","delete","size","faasEnv","getFAASEnv","AWS_EXECUTION_ENV","AWS_LAMBDA_RUNTIME_API","FUNCTIONS_WORKER_RUNTIME","K_SERVICE","FUNCTION_NAME","VERCEL","AWS_LAMBDA_FUNCTION_MEMORY_SIZE","AWS_REGION","FUNCTION_MEMORY_MB","FUNCTION_REGION","FUNCTION_TIMEOUT_SEC","VERCEL_REGION","env","isAWSFaaS","startsWith","isAzureFaaS","isGCPFaaS","isVercelFaaS","Number","isInteger","globalThis","Deno","deno","endianness","Bun"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\cmap\\handshake\\client_metadata.ts"],"sourcesContent":["import * as os from 'os';\r\nimport * as process from 'process';\r\n\r\nimport { BSON, Int32 } from '../../bson';\r\nimport { MongoInvalidArgumentError } from '../../error';\r\nimport type { MongoOptions } from '../../mongo_client';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst NODE_DRIVER_VERSION = require('../../../package.json').version;\r\n\r\n/**\r\n * @public\r\n * @see https://github.com/mongodb/specifications/blob/master/source/mongodb-handshake/handshake.rst#hello-command\r\n */\r\nexport interface ClientMetadata {\r\n  driver: {\r\n    name: string;\r\n    version: string;\r\n  };\r\n  os: {\r\n    type: string;\r\n    name?: NodeJS.Platform;\r\n    architecture?: string;\r\n    version?: string;\r\n  };\r\n  platform: string;\r\n  application?: {\r\n    name: string;\r\n  };\r\n  /** FaaS environment information */\r\n  env?: {\r\n    name: 'aws.lambda' | 'gcp.func' | 'azure.func' | 'vercel';\r\n    timeout_sec?: Int32;\r\n    memory_mb?: Int32;\r\n    region?: string;\r\n    url?: string;\r\n  };\r\n}\r\n\r\n/** @public */\r\nexport interface ClientMetadataOptions {\r\n  driverInfo?: {\r\n    name?: string;\r\n    version?: string;\r\n    platform?: string;\r\n  };\r\n  appName?: string;\r\n}\r\n\r\n/** @internal */\r\nexport class LimitedSizeDocument {\r\n  private document = new Map();\r\n  /** BSON overhead: Int32 + Null byte */\r\n  private documentSize = 5;\r\n  constructor(private maxSize: number) {}\r\n\r\n  /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */\r\n  public ifItFitsItSits(key: string, value: Record<string, any> | string): boolean {\r\n    // The BSON byteLength of the new element is the same as serializing it to its own document\r\n    // subtracting the document size int32 and the null terminator.\r\n    const newElementSize = BSON.serialize(new Map().set(key, value)).byteLength - 5;\r\n\r\n    if (newElementSize + this.documentSize > this.maxSize) {\r\n      return false;\r\n    }\r\n\r\n    this.documentSize += newElementSize;\r\n\r\n    this.document.set(key, value);\r\n\r\n    return true;\r\n  }\r\n\r\n  toObject(): ClientMetadata {\r\n    return BSON.deserialize(BSON.serialize(this.document), {\r\n      promoteLongs: false,\r\n      promoteBuffers: false,\r\n      promoteValues: false,\r\n      useBigInt64: false\r\n    }) as ClientMetadata;\r\n  }\r\n}\r\n\r\ntype MakeClientMetadataOptions = Pick<MongoOptions, 'appName' | 'driverInfo'>;\r\n/**\r\n * From the specs:\r\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\r\n * 1. Omit fields from `env` except `env.name`.\r\n * 2. Omit fields from `os` except `os.type`.\r\n * 3. Omit the `env` document entirely.\r\n * 4. Truncate `platform`. -- special we do not truncate this field\r\n */\r\nexport function makeClientMetadata(options: MakeClientMetadataOptions): ClientMetadata {\r\n  const metadataDocument = new LimitedSizeDocument(512);\r\n\r\n  const { appName = '' } = options;\r\n  // Add app name first, it must be sent\r\n  if (appName.length > 0) {\r\n    const name =\r\n      Buffer.byteLength(appName, 'utf8') <= 128\r\n        ? options.appName\r\n        : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');\r\n    metadataDocument.ifItFitsItSits('application', { name });\r\n  }\r\n\r\n  const { name = '', version = '', platform = '' } = options.driverInfo;\r\n\r\n  const driverInfo = {\r\n    name: name.length > 0 ? `nodejs|${name}` : 'nodejs',\r\n    version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\r\n  };\r\n\r\n  if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {\r\n    throw new MongoInvalidArgumentError(\r\n      'Unable to include driverInfo name and version, metadata cannot exceed 512 bytes'\r\n    );\r\n  }\r\n\r\n  let runtimeInfo = getRuntimeInfo();\r\n  if (platform.length > 0) {\r\n    runtimeInfo = `${runtimeInfo}|${platform}`;\r\n  }\r\n\r\n  if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {\r\n    throw new MongoInvalidArgumentError(\r\n      'Unable to include driverInfo platform, metadata cannot exceed 512 bytes'\r\n    );\r\n  }\r\n\r\n  // Note: order matters, os.type is last so it will be removed last if we're at maxSize\r\n  const osInfo = new Map()\r\n    .set('name', process.platform)\r\n    .set('architecture', process.arch)\r\n    .set('version', os.release())\r\n    .set('type', os.type());\r\n\r\n  if (!metadataDocument.ifItFitsItSits('os', osInfo)) {\r\n    for (const key of osInfo.keys()) {\r\n      osInfo.delete(key);\r\n      if (osInfo.size === 0) break;\r\n      if (metadataDocument.ifItFitsItSits('os', osInfo)) break;\r\n    }\r\n  }\r\n\r\n  const faasEnv = getFAASEnv();\r\n  if (faasEnv != null) {\r\n    if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {\r\n      for (const key of faasEnv.keys()) {\r\n        faasEnv.delete(key);\r\n        if (faasEnv.size === 0) break;\r\n        if (metadataDocument.ifItFitsItSits('env', faasEnv)) break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return metadataDocument.toObject();\r\n}\r\n\r\n/**\r\n * Collects FaaS metadata.\r\n * - `name` MUST be the last key in the Map returned.\r\n */\r\nexport function getFAASEnv(): Map<string, string | Int32> | null {\r\n  const {\r\n    AWS_EXECUTION_ENV = '',\r\n    AWS_LAMBDA_RUNTIME_API = '',\r\n    FUNCTIONS_WORKER_RUNTIME = '',\r\n    K_SERVICE = '',\r\n    FUNCTION_NAME = '',\r\n    VERCEL = '',\r\n    AWS_LAMBDA_FUNCTION_MEMORY_SIZE = '',\r\n    AWS_REGION = '',\r\n    FUNCTION_MEMORY_MB = '',\r\n    FUNCTION_REGION = '',\r\n    FUNCTION_TIMEOUT_SEC = '',\r\n    VERCEL_REGION = ''\r\n  } = process.env;\r\n\r\n  const isAWSFaaS =\r\n    AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;\r\n  const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\r\n  const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\r\n  const isVercelFaaS = VERCEL.length > 0;\r\n\r\n  // Note: order matters, name must always be the last key\r\n  const faasEnv = new Map();\r\n\r\n  // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\r\n  if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\r\n    if (VERCEL_REGION.length > 0) {\r\n      faasEnv.set('region', VERCEL_REGION);\r\n    }\r\n\r\n    faasEnv.set('name', 'vercel');\r\n    return faasEnv;\r\n  }\r\n\r\n  if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\r\n    if (AWS_REGION.length > 0) {\r\n      faasEnv.set('region', AWS_REGION);\r\n    }\r\n\r\n    if (\r\n      AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 &&\r\n      Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)\r\n    ) {\r\n      faasEnv.set('memory_mb', new Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\r\n    }\r\n\r\n    faasEnv.set('name', 'aws.lambda');\r\n    return faasEnv;\r\n  }\r\n\r\n  if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\r\n    faasEnv.set('name', 'azure.func');\r\n    return faasEnv;\r\n  }\r\n\r\n  if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\r\n    if (FUNCTION_REGION.length > 0) {\r\n      faasEnv.set('region', FUNCTION_REGION);\r\n    }\r\n\r\n    if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\r\n      faasEnv.set('memory_mb', new Int32(FUNCTION_MEMORY_MB));\r\n    }\r\n\r\n    if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\r\n      faasEnv.set('timeout_sec', new Int32(FUNCTION_TIMEOUT_SEC));\r\n    }\r\n\r\n    faasEnv.set('name', 'gcp.func');\r\n    return faasEnv;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * @internal\r\n * This type represents the global Deno object and the minimal type contract we expect it to satisfy.\r\n */\r\ndeclare const Deno: { version?: { deno?: string } } | undefined;\r\n\r\n/**\r\n * @internal\r\n * This type represents the global Bun object and the minimal type contract we expect it to satisfy.\r\n */\r\ndeclare const Bun: { (): void; version?: string } | undefined;\r\n\r\n/**\r\n * @internal\r\n * Get current JavaScript runtime platform\r\n *\r\n * NOTE: The version information fetching is intentionally written defensively\r\n * to avoid having a released driver version that becomes incompatible\r\n * with a future change to these global objects.\r\n */\r\nfunction getRuntimeInfo(): string {\r\n  if ('Deno' in globalThis) {\r\n    const version = typeof Deno?.version?.deno === 'string' ? Deno?.version?.deno : '0.0.0-unknown';\r\n\r\n    return `Deno v${version}, ${os.endianness()}`;\r\n  }\r\n\r\n  if ('Bun' in globalThis) {\r\n    const version = typeof Bun?.version === 'string' ? Bun?.version : '0.0.0-unknown';\r\n\r\n    return `Bun v${version}, ${os.endianness()}`;\r\n  }\r\n\r\n  return `Node.js ${process.version}, ${os.endianness()}`;\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}