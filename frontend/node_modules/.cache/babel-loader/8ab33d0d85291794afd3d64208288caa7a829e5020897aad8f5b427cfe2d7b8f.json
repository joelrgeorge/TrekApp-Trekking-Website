{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Db = void 0;\nconst admin_1 = require(\"./admin\");\nconst bson_1 = require(\"./bson\");\nconst change_stream_1 = require(\"./change_stream\");\nconst collection_1 = require(\"./collection\");\nconst CONSTANTS = require(\"./constants\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\nconst run_command_cursor_1 = require(\"./cursor/run_command_cursor\");\nconst error_1 = require(\"./error\");\nconst add_user_1 = require(\"./operations/add_user\");\nconst collections_1 = require(\"./operations/collections\");\nconst create_collection_1 = require(\"./operations/create_collection\");\nconst drop_1 = require(\"./operations/drop\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst profiling_level_1 = require(\"./operations/profiling_level\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst rename_1 = require(\"./operations/rename\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\nconst stats_1 = require(\"./operations/stats\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = ['writeConcern', 'readPreference', 'readPreferenceTags', 'native_parser', 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'authSource', 'ignoreUndefined', 'readConcern', 'retryMiliSeconds', 'numberOfRetries', 'useBigInt64', 'promoteBuffers', 'promoteLongs', 'bsonRegExp', 'enableUtf8Validation', 'promoteValues', 'compression', 'retryWrites'];\n/**\r\n * The **Db** class is a class that represents a MongoDB Database.\r\n * @public\r\n *\r\n * @example\r\n * ```ts\r\n * import { MongoClient } from 'mongodb';\r\n *\r\n * interface Pet {\r\n *   name: string;\r\n *   kind: 'dog' | 'cat' | 'fish';\r\n * }\r\n *\r\n * const client = new MongoClient('mongodb://localhost:27017');\r\n * const db = client.db();\r\n *\r\n * // Create a collection that validates our union\r\n * await db.createCollection<Pet>('pets', {\r\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\r\n * })\r\n * ```\r\n */\nclass Db {\n  /**\r\n   * Creates a new Db instance\r\n   *\r\n   * @param client - The MongoClient for the database.\r\n   * @param databaseName - The name of the database this instance represents.\r\n   * @param options - Optional settings for Db construction\r\n   */\n  constructor(client, databaseName, options) {\n    options = options ?? {};\n    // Filter the options\n    options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n    // Ensure we have a valid db name\n    validateDatabaseName(databaseName);\n    // Internal state of the db object\n    this.s = {\n      // Options\n      options,\n      // Unpack read preference\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new utils_1.MongoDBNamespace(databaseName)\n    };\n    this.client = client;\n  }\n  get databaseName() {\n    return this.s.namespace.db;\n  }\n  // Options\n  get options() {\n    return this.s.options;\n  }\n  /**\r\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\r\n   */\n  get secondaryOk() {\n    return this.s.readPreference?.preference !== 'primary' || false;\n  }\n  get readConcern() {\n    return this.s.readConcern;\n  }\n  /**\r\n   * The current readPreference of the Db. If not explicitly defined for\r\n   * this Db, will be inherited from the parent MongoClient\r\n   */\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.client.readPreference;\n    }\n    return this.s.readPreference;\n  }\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  // get the write Concern\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n  /**\r\n   * Create a new collection on a server with the specified options. Use this to create capped collections.\r\n   * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\r\n   *\r\n   * @param name - The name of the collection to create\r\n   * @param options - Optional settings for the command\r\n   */\n  async createCollection(name, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\r\n   * Execute a command\r\n   *\r\n   * @remarks\r\n   * This command does not inherit options from the MongoClient.\r\n   *\r\n   * The driver will ensure the following fields are attached to the command sent to the server:\r\n   * - `lsid` - sourced from an implicit session or options.session\r\n   * - `$readPreference` - defaults to primary or can be configured by options.readPreference\r\n   * - `$db` - sourced from the name of this database\r\n   *\r\n   * If the client has a serverApi setting:\r\n   * - `apiVersion`\r\n   * - `apiStrict`\r\n   * - `apiDeprecationErrors`\r\n   *\r\n   * When in a transaction:\r\n   * - `readConcern` - sourced from readConcern set on the TransactionOptions\r\n   * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\r\n   *\r\n   * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\r\n   *\r\n   * @param command - The command to run\r\n   * @param options - Optional settings for the command\r\n   */\n  async command(command, options) {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunCommandOperation(this, command, options));\n  }\n  /**\r\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\r\n   *\r\n   * @param pipeline - An array of aggregation stages to be executed\r\n   * @param options - Optional settings for the command\r\n   */\n  aggregate(pipeline = [], options) {\n    return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Return the Admin db instance */\n  admin() {\n    return new admin_1.Admin(this);\n  }\n  /**\r\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\r\n   *\r\n   * @param name - the collection name we wish to access.\r\n   * @returns return the new Collection instance\r\n   */\n  collection(name, options = {}) {\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n    return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\r\n   * Get all the db statistics.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\n  async stats(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  listCollections(filter = {}, options = {}) {\n    return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\r\n   * Rename a collection.\r\n   *\r\n   * @remarks\r\n   * This operation does not inherit options from the MongoClient.\r\n   *\r\n   * @param fromCollection - Name of current collection to rename\r\n   * @param toCollection - New name of of the collection\r\n   * @param options - Optional settings for the command\r\n   */\n  async renameCollection(fromCollection, toCollection, options) {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, {\n      ...options,\n      new_collection: true,\n      readPreference: read_preference_1.ReadPreference.primary\n    }));\n  }\n  /**\r\n   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\r\n   *\r\n   * @param name - Name of collection to drop\r\n   * @param options - Optional settings for the command\r\n   */\n  async dropCollection(name, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\r\n   * Drop a database, removing it permanently from the server.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\n  async dropDatabase(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\r\n   * Fetch all collections for the current db.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\n  async collections(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\r\n   * Creates an index on the db and collection.\r\n   *\r\n   * @param name - Name of the collection to create the index on.\r\n   * @param indexSpec - Specify the field to index, or an index specification\r\n   * @param options - Optional settings for the command\r\n   */\n  async createIndex(name, indexSpec, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\r\n   * Add a user to the database\r\n   *\r\n   * @param username - The username for the new user\r\n   * @param passwordOrOptions - An optional password for the new user, or the options for the command\r\n   * @param options - Optional settings for the command\r\n   * @deprecated Use the createUser command in `db.command()` instead.\r\n   * @see https://www.mongodb.com/docs/manual/reference/command/createUser/\r\n   */\n  async addUser(username, passwordOrOptions, options) {\n    options = options != null && typeof options === 'object' ? options : passwordOrOptions != null && typeof passwordOrOptions === 'object' ? passwordOrOptions : undefined;\n    const password = typeof passwordOrOptions === 'string' ? passwordOrOptions : undefined;\n    return (0, execute_operation_1.executeOperation)(this.client, new add_user_1.AddUserOperation(this, username, password, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\r\n   * Remove a user from a database\r\n   *\r\n   * @param username - The username to remove\r\n   * @param options - Optional settings for the command\r\n   */\n  async removeUser(username, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\r\n   * Set the current profiling level of MongoDB\r\n   *\r\n   * @param level - The new profiling level (off, slow_only, all).\r\n   * @param options - Optional settings for the command\r\n   */\n  async setProfilingLevel(level, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\r\n   * Retrieve the current profiling Level for MongoDB\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\n  async profilingLevel(options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\r\n   * Retrieves this collections index info.\r\n   *\r\n   * @param name - The name of the collection.\r\n   * @param options - Optional settings for the command\r\n   */\n  async indexInformation(name, options) {\n    return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\r\n   * Create a new Change Stream, watching for new changes (insertions, updates,\r\n   * replacements, deletions, and invalidations) in this database. Will ignore all\r\n   * changes to system collections.\r\n   *\r\n   * @remarks\r\n   * watch() accepts two generic arguments for distinct use cases:\r\n   * - The first is to provide the schema that may be defined for all the collections within this database\r\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\r\n   *\r\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\r\n   * @param options - Optional settings for the command\r\n   * @typeParam TSchema - Type of the data being detected by the change stream\r\n   * @typeParam TChange - Type of the whole change stream document emitted\r\n   */\n  watch(pipeline = [], options = {}) {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\r\n   * A low level cursor API providing basic driver functionality:\r\n   * - ClientSession management\r\n   * - ReadPreference for server selection\r\n   * - Running getMores automatically when a local batch is exhausted\r\n   *\r\n   * @param command - The command that will start a cursor on the server.\r\n   * @param options - Configurations for running the command, bson options will apply to getMores\r\n   */\n  runCursorCommand(command, options) {\n    return new run_command_cursor_1.RunCommandCursor(this, command, options);\n  }\n}\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\nexports.Db = Db;\n// TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\nfunction validateDatabaseName(databaseName) {\n  if (typeof databaseName !== 'string') throw new error_1.MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0) throw new error_1.MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1) throw new error_1.MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n  }\n}","map":{"version":3,"mappings":"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","names":["DB_OPTIONS_ALLOW_LIST","Db","constructor","client","databaseName","options","validateDatabaseName","s","readPreference","read_preference_1","fromOptions","bsonOptions","pkFactory","utils_1","readConcern","read_concern_1","writeConcern","write_concern_1","namespace","db","secondaryOk","preference","toString","createCollection","name","create_collection_1","command","run_command_1","aggregate","pipeline","aggregation_cursor_1","admin","admin_1","collection","error_1","collection_1","stats","stats_1","listCollections","filter","list_collections_cursor_1","renameCollection","fromCollection","toCollection","rename_1","new_collection","primary","dropCollection","drop_1","dropDatabase","collections","collections_1","createIndex","indexSpec","indexes_1","addUser","username","passwordOrOptions","undefined","password","add_user_1","removeUser","remove_user_1","setProfilingLevel","level","set_profiling_level_1","profilingLevel","profiling_level_1","indexInformation","watch","Array","isArray","change_stream_1","runCursorCommand","run_command_cursor_1","CONSTANTS","SYSTEM_NAMESPACE_COLLECTION","SYSTEM_INDEX_COLLECTION","SYSTEM_PROFILE_COLLECTION","SYSTEM_USER_COLLECTION","SYSTEM_COMMAND_COLLECTION","SYSTEM_JS_COLLECTION","exports","length","invalidChars","i","indexOf"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\db.ts"],"sourcesContent":["import { Admin } from './admin';\r\nimport { type BSONSerializeOptions, type Document, resolveBSONOptions } from './bson';\r\nimport { ChangeStream, type ChangeStreamDocument, type ChangeStreamOptions } from './change_stream';\r\nimport { Collection, type CollectionOptions } from './collection';\r\nimport * as CONSTANTS from './constants';\r\nimport { AggregationCursor } from './cursor/aggregation_cursor';\r\nimport { ListCollectionsCursor } from './cursor/list_collections_cursor';\r\nimport { RunCommandCursor, type RunCursorCommandOptions } from './cursor/run_command_cursor';\r\nimport { MongoAPIError, MongoInvalidArgumentError } from './error';\r\nimport type { MongoClient, PkFactory } from './mongo_client';\r\nimport type { TODO_NODE_3286 } from './mongo_types';\r\nimport { AddUserOperation, type AddUserOptions } from './operations/add_user';\r\nimport type { AggregateOptions } from './operations/aggregate';\r\nimport { CollectionsOperation } from './operations/collections';\r\nimport type { IndexInformationOptions } from './operations/common_functions';\r\nimport {\r\n  CreateCollectionOperation,\r\n  type CreateCollectionOptions\r\n} from './operations/create_collection';\r\nimport {\r\n  DropCollectionOperation,\r\n  type DropCollectionOptions,\r\n  DropDatabaseOperation,\r\n  type DropDatabaseOptions\r\n} from './operations/drop';\r\nimport { executeOperation } from './operations/execute_operation';\r\nimport {\r\n  type CreateIndexesOptions,\r\n  CreateIndexOperation,\r\n  IndexInformationOperation,\r\n  type IndexSpecification\r\n} from './operations/indexes';\r\nimport type { CollectionInfo, ListCollectionsOptions } from './operations/list_collections';\r\nimport { ProfilingLevelOperation, type ProfilingLevelOptions } from './operations/profiling_level';\r\nimport { RemoveUserOperation, type RemoveUserOptions } from './operations/remove_user';\r\nimport { RenameOperation, type RenameOptions } from './operations/rename';\r\nimport { RunCommandOperation, type RunCommandOptions } from './operations/run_command';\r\nimport {\r\n  type ProfilingLevel,\r\n  SetProfilingLevelOperation,\r\n  type SetProfilingLevelOptions\r\n} from './operations/set_profiling_level';\r\nimport { DbStatsOperation, type DbStatsOptions } from './operations/stats';\r\nimport { ReadConcern } from './read_concern';\r\nimport { ReadPreference, type ReadPreferenceLike } from './read_preference';\r\nimport { DEFAULT_PK_FACTORY, filterOptions, MongoDBNamespace, resolveOptions } from './utils';\r\nimport { WriteConcern, type WriteConcernOptions } from './write_concern';\r\n\r\n// Allowed parameters\r\nconst DB_OPTIONS_ALLOW_LIST = [\r\n  'writeConcern',\r\n  'readPreference',\r\n  'readPreferenceTags',\r\n  'native_parser',\r\n  'forceServerObjectId',\r\n  'pkFactory',\r\n  'serializeFunctions',\r\n  'raw',\r\n  'authSource',\r\n  'ignoreUndefined',\r\n  'readConcern',\r\n  'retryMiliSeconds',\r\n  'numberOfRetries',\r\n  'useBigInt64',\r\n  'promoteBuffers',\r\n  'promoteLongs',\r\n  'bsonRegExp',\r\n  'enableUtf8Validation',\r\n  'promoteValues',\r\n  'compression',\r\n  'retryWrites'\r\n];\r\n\r\n/** @internal */\r\nexport interface DbPrivate {\r\n  options?: DbOptions;\r\n  readPreference?: ReadPreference;\r\n  pkFactory: PkFactory;\r\n  readConcern?: ReadConcern;\r\n  bsonOptions: BSONSerializeOptions;\r\n  writeConcern?: WriteConcern;\r\n  namespace: MongoDBNamespace;\r\n}\r\n\r\n/** @public */\r\nexport interface DbOptions extends BSONSerializeOptions, WriteConcernOptions {\r\n  /** If the database authentication is dependent on another databaseName. */\r\n  authSource?: string;\r\n  /** Force server to assign _id values instead of driver. */\r\n  forceServerObjectId?: boolean;\r\n  /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\r\n  readPreference?: ReadPreferenceLike;\r\n  /** A primary key factory object for generation of custom _id keys. */\r\n  pkFactory?: PkFactory;\r\n  /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\r\n  readConcern?: ReadConcern;\r\n  /** Should retry failed writes */\r\n  retryWrites?: boolean;\r\n}\r\n\r\n/**\r\n * The **Db** class is a class that represents a MongoDB Database.\r\n * @public\r\n *\r\n * @example\r\n * ```ts\r\n * import { MongoClient } from 'mongodb';\r\n *\r\n * interface Pet {\r\n *   name: string;\r\n *   kind: 'dog' | 'cat' | 'fish';\r\n * }\r\n *\r\n * const client = new MongoClient('mongodb://localhost:27017');\r\n * const db = client.db();\r\n *\r\n * // Create a collection that validates our union\r\n * await db.createCollection<Pet>('pets', {\r\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\r\n * })\r\n * ```\r\n */\r\nexport class Db {\r\n  /** @internal */\r\n  s: DbPrivate;\r\n\r\n  /** @internal */\r\n  readonly client: MongoClient;\r\n\r\n  public static SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\r\n  public static SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\r\n  public static SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\r\n  public static SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\r\n  public static SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\r\n  public static SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\r\n\r\n  /**\r\n   * Creates a new Db instance\r\n   *\r\n   * @param client - The MongoClient for the database.\r\n   * @param databaseName - The name of the database this instance represents.\r\n   * @param options - Optional settings for Db construction\r\n   */\r\n  constructor(client: MongoClient, databaseName: string, options?: DbOptions) {\r\n    options = options ?? {};\r\n\r\n    // Filter the options\r\n    options = filterOptions(options, DB_OPTIONS_ALLOW_LIST);\r\n\r\n    // Ensure we have a valid db name\r\n    validateDatabaseName(databaseName);\r\n\r\n    // Internal state of the db object\r\n    this.s = {\r\n      // Options\r\n      options,\r\n      // Unpack read preference\r\n      readPreference: ReadPreference.fromOptions(options),\r\n      // Merge bson options\r\n      bsonOptions: resolveBSONOptions(options, client),\r\n      // Set up the primary key factory or fallback to ObjectId\r\n      pkFactory: options?.pkFactory ?? DEFAULT_PK_FACTORY,\r\n      // ReadConcern\r\n      readConcern: ReadConcern.fromOptions(options),\r\n      writeConcern: WriteConcern.fromOptions(options),\r\n      // Namespace\r\n      namespace: new MongoDBNamespace(databaseName)\r\n    };\r\n\r\n    this.client = client;\r\n  }\r\n\r\n  get databaseName(): string {\r\n    return this.s.namespace.db;\r\n  }\r\n\r\n  // Options\r\n  get options(): DbOptions | undefined {\r\n    return this.s.options;\r\n  }\r\n\r\n  /**\r\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\r\n   */\r\n  get secondaryOk(): boolean {\r\n    return this.s.readPreference?.preference !== 'primary' || false;\r\n  }\r\n\r\n  get readConcern(): ReadConcern | undefined {\r\n    return this.s.readConcern;\r\n  }\r\n\r\n  /**\r\n   * The current readPreference of the Db. If not explicitly defined for\r\n   * this Db, will be inherited from the parent MongoClient\r\n   */\r\n  get readPreference(): ReadPreference {\r\n    if (this.s.readPreference == null) {\r\n      return this.client.readPreference;\r\n    }\r\n\r\n    return this.s.readPreference;\r\n  }\r\n\r\n  get bsonOptions(): BSONSerializeOptions {\r\n    return this.s.bsonOptions;\r\n  }\r\n\r\n  // get the write Concern\r\n  get writeConcern(): WriteConcern | undefined {\r\n    return this.s.writeConcern;\r\n  }\r\n\r\n  get namespace(): string {\r\n    return this.s.namespace.toString();\r\n  }\r\n\r\n  /**\r\n   * Create a new collection on a server with the specified options. Use this to create capped collections.\r\n   * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\r\n   *\r\n   * @param name - The name of the collection to create\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async createCollection<TSchema extends Document = Document>(\r\n    name: string,\r\n    options?: CreateCollectionOptions\r\n  ): Promise<Collection<TSchema>> {\r\n    return executeOperation(\r\n      this.client,\r\n      new CreateCollectionOperation(this, name, resolveOptions(this, options)) as TODO_NODE_3286\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Execute a command\r\n   *\r\n   * @remarks\r\n   * This command does not inherit options from the MongoClient.\r\n   *\r\n   * The driver will ensure the following fields are attached to the command sent to the server:\r\n   * - `lsid` - sourced from an implicit session or options.session\r\n   * - `$readPreference` - defaults to primary or can be configured by options.readPreference\r\n   * - `$db` - sourced from the name of this database\r\n   *\r\n   * If the client has a serverApi setting:\r\n   * - `apiVersion`\r\n   * - `apiStrict`\r\n   * - `apiDeprecationErrors`\r\n   *\r\n   * When in a transaction:\r\n   * - `readConcern` - sourced from readConcern set on the TransactionOptions\r\n   * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\r\n   *\r\n   * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\r\n   *\r\n   * @param command - The command to run\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async command(command: Document, options?: RunCommandOptions): Promise<Document> {\r\n    // Intentionally, we do not inherit options from parent for this operation.\r\n    return executeOperation(this.client, new RunCommandOperation(this, command, options));\r\n  }\r\n\r\n  /**\r\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\r\n   *\r\n   * @param pipeline - An array of aggregation stages to be executed\r\n   * @param options - Optional settings for the command\r\n   */\r\n  aggregate<T extends Document = Document>(\r\n    pipeline: Document[] = [],\r\n    options?: AggregateOptions\r\n  ): AggregationCursor<T> {\r\n    return new AggregationCursor(\r\n      this.client,\r\n      this.s.namespace,\r\n      pipeline,\r\n      resolveOptions(this, options)\r\n    );\r\n  }\r\n\r\n  /** Return the Admin db instance */\r\n  admin(): Admin {\r\n    return new Admin(this);\r\n  }\r\n\r\n  /**\r\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\r\n   *\r\n   * @param name - the collection name we wish to access.\r\n   * @returns return the new Collection instance\r\n   */\r\n  collection<TSchema extends Document = Document>(\r\n    name: string,\r\n    options: CollectionOptions = {}\r\n  ): Collection<TSchema> {\r\n    if (typeof options === 'function') {\r\n      throw new MongoInvalidArgumentError('The callback form of this helper has been removed.');\r\n    }\r\n    return new Collection<TSchema>(this, name, resolveOptions(this, options));\r\n  }\r\n\r\n  /**\r\n   * Get all the db statistics.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async stats(options?: DbStatsOptions): Promise<Document> {\r\n    return executeOperation(this.client, new DbStatsOperation(this, resolveOptions(this, options)));\r\n  }\r\n\r\n  /**\r\n   * List all collections of this database with optional filter\r\n   *\r\n   * @param filter - Query to filter collections by\r\n   * @param options - Optional settings for the command\r\n   */\r\n  listCollections(\r\n    filter: Document,\r\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: true }\r\n  ): ListCollectionsCursor<Pick<CollectionInfo, 'name' | 'type'>>;\r\n  listCollections(\r\n    filter: Document,\r\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: false }\r\n  ): ListCollectionsCursor<CollectionInfo>;\r\n  listCollections<\r\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\r\n      | Pick<CollectionInfo, 'name' | 'type'>\r\n      | CollectionInfo\r\n  >(filter?: Document, options?: ListCollectionsOptions): ListCollectionsCursor<T>;\r\n  listCollections<\r\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\r\n      | Pick<CollectionInfo, 'name' | 'type'>\r\n      | CollectionInfo\r\n  >(filter: Document = {}, options: ListCollectionsOptions = {}): ListCollectionsCursor<T> {\r\n    return new ListCollectionsCursor<T>(this, filter, resolveOptions(this, options));\r\n  }\r\n\r\n  /**\r\n   * Rename a collection.\r\n   *\r\n   * @remarks\r\n   * This operation does not inherit options from the MongoClient.\r\n   *\r\n   * @param fromCollection - Name of current collection to rename\r\n   * @param toCollection - New name of of the collection\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async renameCollection<TSchema extends Document = Document>(\r\n    fromCollection: string,\r\n    toCollection: string,\r\n    options?: RenameOptions\r\n  ): Promise<Collection<TSchema>> {\r\n    // Intentionally, we do not inherit options from parent for this operation.\r\n    return executeOperation(\r\n      this.client,\r\n      new RenameOperation(\r\n        this.collection<TSchema>(fromCollection) as TODO_NODE_3286,\r\n        toCollection,\r\n        { ...options, new_collection: true, readPreference: ReadPreference.primary }\r\n      ) as TODO_NODE_3286\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\r\n   *\r\n   * @param name - Name of collection to drop\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async dropCollection(name: string, options?: DropCollectionOptions): Promise<boolean> {\r\n    return executeOperation(\r\n      this.client,\r\n      new DropCollectionOperation(this, name, resolveOptions(this, options))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Drop a database, removing it permanently from the server.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async dropDatabase(options?: DropDatabaseOptions): Promise<boolean> {\r\n    return executeOperation(\r\n      this.client,\r\n      new DropDatabaseOperation(this, resolveOptions(this, options))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fetch all collections for the current db.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async collections(options?: ListCollectionsOptions): Promise<Collection[]> {\r\n    return executeOperation(\r\n      this.client,\r\n      new CollectionsOperation(this, resolveOptions(this, options))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates an index on the db and collection.\r\n   *\r\n   * @param name - Name of the collection to create the index on.\r\n   * @param indexSpec - Specify the field to index, or an index specification\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async createIndex(\r\n    name: string,\r\n    indexSpec: IndexSpecification,\r\n    options?: CreateIndexesOptions\r\n  ): Promise<string> {\r\n    return executeOperation(\r\n      this.client,\r\n      new CreateIndexOperation(this, name, indexSpec, resolveOptions(this, options))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add a user to the database\r\n   *\r\n   * @param username - The username for the new user\r\n   * @param passwordOrOptions - An optional password for the new user, or the options for the command\r\n   * @param options - Optional settings for the command\r\n   * @deprecated Use the createUser command in `db.command()` instead.\r\n   * @see https://www.mongodb.com/docs/manual/reference/command/createUser/\r\n   */\r\n  async addUser(\r\n    username: string,\r\n    passwordOrOptions?: string | AddUserOptions,\r\n    options?: AddUserOptions\r\n  ): Promise<Document> {\r\n    options =\r\n      options != null && typeof options === 'object'\r\n        ? options\r\n        : passwordOrOptions != null && typeof passwordOrOptions === 'object'\r\n        ? passwordOrOptions\r\n        : undefined;\r\n    const password = typeof passwordOrOptions === 'string' ? passwordOrOptions : undefined;\r\n    return executeOperation(\r\n      this.client,\r\n      new AddUserOperation(this, username, password, resolveOptions(this, options))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove a user from a database\r\n   *\r\n   * @param username - The username to remove\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async removeUser(username: string, options?: RemoveUserOptions): Promise<boolean> {\r\n    return executeOperation(\r\n      this.client,\r\n      new RemoveUserOperation(this, username, resolveOptions(this, options))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set the current profiling level of MongoDB\r\n   *\r\n   * @param level - The new profiling level (off, slow_only, all).\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async setProfilingLevel(\r\n    level: ProfilingLevel,\r\n    options?: SetProfilingLevelOptions\r\n  ): Promise<ProfilingLevel> {\r\n    return executeOperation(\r\n      this.client,\r\n      new SetProfilingLevelOperation(this, level, resolveOptions(this, options))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieve the current profiling Level for MongoDB\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async profilingLevel(options?: ProfilingLevelOptions): Promise<string> {\r\n    return executeOperation(\r\n      this.client,\r\n      new ProfilingLevelOperation(this, resolveOptions(this, options))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieves this collections index info.\r\n   *\r\n   * @param name - The name of the collection.\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async indexInformation(name: string, options?: IndexInformationOptions): Promise<Document> {\r\n    return executeOperation(\r\n      this.client,\r\n      new IndexInformationOperation(this, name, resolveOptions(this, options))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a new Change Stream, watching for new changes (insertions, updates,\r\n   * replacements, deletions, and invalidations) in this database. Will ignore all\r\n   * changes to system collections.\r\n   *\r\n   * @remarks\r\n   * watch() accepts two generic arguments for distinct use cases:\r\n   * - The first is to provide the schema that may be defined for all the collections within this database\r\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\r\n   *\r\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\r\n   * @param options - Optional settings for the command\r\n   * @typeParam TSchema - Type of the data being detected by the change stream\r\n   * @typeParam TChange - Type of the whole change stream document emitted\r\n   */\r\n  watch<\r\n    TSchema extends Document = Document,\r\n    TChange extends Document = ChangeStreamDocument<TSchema>\r\n  >(pipeline: Document[] = [], options: ChangeStreamOptions = {}): ChangeStream<TSchema, TChange> {\r\n    // Allow optionally not specifying a pipeline\r\n    if (!Array.isArray(pipeline)) {\r\n      options = pipeline;\r\n      pipeline = [];\r\n    }\r\n\r\n    return new ChangeStream<TSchema, TChange>(this, pipeline, resolveOptions(this, options));\r\n  }\r\n\r\n  /**\r\n   * A low level cursor API providing basic driver functionality:\r\n   * - ClientSession management\r\n   * - ReadPreference for server selection\r\n   * - Running getMores automatically when a local batch is exhausted\r\n   *\r\n   * @param command - The command that will start a cursor on the server.\r\n   * @param options - Configurations for running the command, bson options will apply to getMores\r\n   */\r\n  runCursorCommand(command: Document, options?: RunCursorCommandOptions): RunCommandCursor {\r\n    return new RunCommandCursor(this, command, options);\r\n  }\r\n}\r\n\r\n// TODO(NODE-3484): Refactor into MongoDBNamespace\r\n// Validate the database name\r\nfunction validateDatabaseName(databaseName: string) {\r\n  if (typeof databaseName !== 'string')\r\n    throw new MongoInvalidArgumentError('Database name must be a string');\r\n  if (databaseName.length === 0)\r\n    throw new MongoInvalidArgumentError('Database name cannot be the empty string');\r\n  if (databaseName === '$external') return;\r\n\r\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\r\n  for (let i = 0; i < invalidChars.length; i++) {\r\n    if (databaseName.indexOf(invalidChars[i]) !== -1)\r\n      throw new MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}