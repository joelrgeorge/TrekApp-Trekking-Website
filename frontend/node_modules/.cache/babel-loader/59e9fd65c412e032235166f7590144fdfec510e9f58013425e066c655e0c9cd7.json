{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveBSONOptions = exports.pluckBSONSerializeOptions = exports.Timestamp = exports.serialize = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.Double = exports.deserialize = exports.Decimal128 = exports.DBRef = exports.Code = exports.calculateObjectSize = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.BSON = exports.Binary = void 0;\nvar bson_1 = require(\"bson\");\nObject.defineProperty(exports, \"Binary\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Binary;\n  }\n});\nObject.defineProperty(exports, \"BSON\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.BSON;\n  }\n});\nObject.defineProperty(exports, \"BSONRegExp\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.BSONRegExp;\n  }\n});\nObject.defineProperty(exports, \"BSONSymbol\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.BSONSymbol;\n  }\n});\nObject.defineProperty(exports, \"BSONType\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.BSONType;\n  }\n});\nObject.defineProperty(exports, \"calculateObjectSize\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.calculateObjectSize;\n  }\n});\nObject.defineProperty(exports, \"Code\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Code;\n  }\n});\nObject.defineProperty(exports, \"DBRef\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.DBRef;\n  }\n});\nObject.defineProperty(exports, \"Decimal128\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Decimal128;\n  }\n});\nObject.defineProperty(exports, \"deserialize\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.deserialize;\n  }\n});\nObject.defineProperty(exports, \"Double\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Double;\n  }\n});\nObject.defineProperty(exports, \"Int32\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Int32;\n  }\n});\nObject.defineProperty(exports, \"Long\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Long;\n  }\n});\nObject.defineProperty(exports, \"MaxKey\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.MaxKey;\n  }\n});\nObject.defineProperty(exports, \"MinKey\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.MinKey;\n  }\n});\nObject.defineProperty(exports, \"ObjectId\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.ObjectId;\n  }\n});\nObject.defineProperty(exports, \"serialize\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.serialize;\n  }\n});\nObject.defineProperty(exports, \"Timestamp\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Timestamp;\n  }\n});\nfunction pluckBSONSerializeOptions(options) {\n  const {\n    fieldsAsRaw,\n    useBigInt64,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  } = options;\n  return {\n    fieldsAsRaw,\n    useBigInt64,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  };\n}\nexports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;\n/**\r\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\r\n * substituting defaults for values not set.\r\n *\r\n * @internal\r\n */\nfunction resolveBSONOptions(options, parent) {\n  const parentOptions = parent?.bsonOptions;\n  return {\n    raw: options?.raw ?? parentOptions?.raw ?? false,\n    useBigInt64: options?.useBigInt64 ?? parentOptions?.useBigInt64 ?? false,\n    promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n    promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n    promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n    ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n    bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n    serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n    fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n    enableUtf8Validation: options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n  };\n}\nexports.resolveBSONOptions = resolveBSONOptions;","map":{"version":3,"mappings":";;;;;;AAEA;AACEA;EAAAC;EAAAC;IAAA,oBAAM;EAAA;AAAA;AACNF;EAAAC;EAAAC;IAAA,kBAAI;EAAA;AAAA;AACJF;EAAAC;EAAAC;IAAA,wBAAU;EAAA;AAAA;AACVF;EAAAC;EAAAC;IAAA,wBAAU;EAAA;AAAA;AACVF;EAAAC;EAAAC;IAAA,sBAAQ;EAAA;AAAA;AACRF;EAAAC;EAAAC;IAAA,iCAAmB;EAAA;AAAA;AACnBF;EAAAC;EAAAC;IAAA,kBAAI;EAAA;AAAA;AACJF;EAAAC;EAAAC;IAAA,mBAAK;EAAA;AAAA;AACLF;EAAAC;EAAAC;IAAA,wBAAU;EAAA;AAAA;AACVF;EAAAC;EAAAC;IAAA,yBAAW;EAAA;AAAA;AAEXF;EAAAC;EAAAC;IAAA,oBAAM;EAAA;AAAA;AACNF;EAAAC;EAAAC;IAAA,mBAAK;EAAA;AAAA;AACLF;EAAAC;EAAAC;IAAA,kBAAI;EAAA;AAAA;AACJF;EAAAC;EAAAC;IAAA,oBAAM;EAAA;AAAA;AACNF;EAAAC;EAAAC;IAAA,oBAAM;EAAA;AAAA;AACNF;EAAAC;EAAAC;IAAA,sBAAQ;EAAA;AAAA;AACRF;EAAAC;EAAAC;IAAA,uBAAS;EAAA;AAAA;AACTF;EAAAC;EAAAC;IAAA,uBAAS;EAAA;AAAA;AA4CX,SAAgBC,yBAAyB,CAACC,OAA6B;EACrE,MAAM;IACJC,WAAW;IACXC,WAAW;IACXC,aAAa;IACbC,cAAc;IACdC,YAAY;IACZC,kBAAkB;IAClBC,eAAe;IACfC,UAAU;IACVC,GAAG;IACHC;EAAoB,CACrB,GAAGV,OAAO;EACX,OAAO;IACLC,WAAW;IACXC,WAAW;IACXC,aAAa;IACbC,cAAc;IACdC,YAAY;IACZC,kBAAkB;IAClBC,eAAe;IACfC,UAAU;IACVC,GAAG;IACHC;GACD;AACH;AAzBAC;AA2BA;;;;;;AAMA,SAAgBC,kBAAkB,CAChCZ,OAA8B,EAC9Ba,MAA+C;EAE/C,MAAMC,aAAa,GAAGD,MAAM,EAAEE,WAAW;EACzC,OAAO;IACLN,GAAG,EAAET,OAAO,EAAES,GAAG,IAAIK,aAAa,EAAEL,GAAG,IAAI,KAAK;IAChDP,WAAW,EAAEF,OAAO,EAAEE,WAAW,IAAIY,aAAa,EAAEZ,WAAW,IAAI,KAAK;IACxEG,YAAY,EAAEL,OAAO,EAAEK,YAAY,IAAIS,aAAa,EAAET,YAAY,IAAI,IAAI;IAC1EF,aAAa,EAAEH,OAAO,EAAEG,aAAa,IAAIW,aAAa,EAAEX,aAAa,IAAI,IAAI;IAC7EC,cAAc,EAAEJ,OAAO,EAAEI,cAAc,IAAIU,aAAa,EAAEV,cAAc,IAAI,KAAK;IACjFG,eAAe,EAAEP,OAAO,EAAEO,eAAe,IAAIO,aAAa,EAAEP,eAAe,IAAI,KAAK;IACpFC,UAAU,EAAER,OAAO,EAAEQ,UAAU,IAAIM,aAAa,EAAEN,UAAU,IAAI,KAAK;IACrEF,kBAAkB,EAAEN,OAAO,EAAEM,kBAAkB,IAAIQ,aAAa,EAAER,kBAAkB,IAAI,KAAK;IAC7FL,WAAW,EAAED,OAAO,EAAEC,WAAW,IAAIa,aAAa,EAAEb,WAAW,IAAI,EAAE;IACrES,oBAAoB,EAClBV,OAAO,EAAEU,oBAAoB,IAAII,aAAa,EAAEJ,oBAAoB,IAAI;GAC3E;AACH;AAlBAC","names":["Object","enumerable","get","pluckBSONSerializeOptions","options","fieldsAsRaw","useBigInt64","promoteValues","promoteBuffers","promoteLongs","serializeFunctions","ignoreUndefined","bsonRegExp","raw","enableUtf8Validation","exports","resolveBSONOptions","parent","parentOptions","bsonOptions"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\bson.ts"],"sourcesContent":["import type { DeserializeOptions, SerializeOptions } from 'bson';\r\n\r\nexport {\r\n  Binary,\r\n  BSON,\r\n  BSONRegExp,\r\n  BSONSymbol,\r\n  BSONType,\r\n  calculateObjectSize,\r\n  Code,\r\n  DBRef,\r\n  Decimal128,\r\n  deserialize,\r\n  Document,\r\n  Double,\r\n  Int32,\r\n  Long,\r\n  MaxKey,\r\n  MinKey,\r\n  ObjectId,\r\n  serialize,\r\n  Timestamp\r\n} from 'bson';\r\n\r\n/**\r\n * BSON Serialization options.\r\n * @public\r\n */\r\nexport interface BSONSerializeOptions\r\n  extends Omit<SerializeOptions, 'index'>,\r\n    Omit<\r\n      DeserializeOptions,\r\n      | 'evalFunctions'\r\n      | 'cacheFunctions'\r\n      | 'cacheFunctionsCrc32'\r\n      | 'allowObjectSmallerThanBufferSize'\r\n      | 'index'\r\n      | 'validation'\r\n    > {\r\n  /**\r\n   * Enabling the raw option will return a [Node.js Buffer](https://nodejs.org/api/buffer.html)\r\n   * which is allocated using [allocUnsafe API](https://nodejs.org/api/buffer.html#static-method-bufferallocunsafesize).\r\n   * See this section from the [Node.js Docs here](https://nodejs.org/api/buffer.html#what-makes-bufferallocunsafe-and-bufferallocunsafeslow-unsafe)\r\n   * for more detail about what \"unsafe\" refers to in this context.\r\n   * If you need to maintain your own editable clone of the bytes returned for an extended life time of the process, it is recommended you allocate\r\n   * your own buffer and clone the contents:\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const raw = await collection.findOne({}, { raw: true });\r\n   * const myBuffer = Buffer.alloc(raw.byteLength);\r\n   * myBuffer.set(raw, 0);\r\n   * // Only save and use `myBuffer` beyond this point\r\n   * ```\r\n   *\r\n   * @remarks\r\n   * Please note there is a known limitation where this option cannot be used at the MongoClient level (see [NODE-3946](https://jira.mongodb.org/browse/NODE-3946)).\r\n   * It does correctly work at `Db`, `Collection`, and per operation the same as other BSON options work.\r\n   */\r\n  raw?: boolean;\r\n\r\n  /** Enable utf8 validation when deserializing BSON documents.  Defaults to true. */\r\n  enableUtf8Validation?: boolean;\r\n}\r\n\r\nexport function pluckBSONSerializeOptions(options: BSONSerializeOptions): BSONSerializeOptions {\r\n  const {\r\n    fieldsAsRaw,\r\n    useBigInt64,\r\n    promoteValues,\r\n    promoteBuffers,\r\n    promoteLongs,\r\n    serializeFunctions,\r\n    ignoreUndefined,\r\n    bsonRegExp,\r\n    raw,\r\n    enableUtf8Validation\r\n  } = options;\r\n  return {\r\n    fieldsAsRaw,\r\n    useBigInt64,\r\n    promoteValues,\r\n    promoteBuffers,\r\n    promoteLongs,\r\n    serializeFunctions,\r\n    ignoreUndefined,\r\n    bsonRegExp,\r\n    raw,\r\n    enableUtf8Validation\r\n  };\r\n}\r\n\r\n/**\r\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\r\n * substituting defaults for values not set.\r\n *\r\n * @internal\r\n */\r\nexport function resolveBSONOptions(\r\n  options?: BSONSerializeOptions,\r\n  parent?: { bsonOptions?: BSONSerializeOptions }\r\n): BSONSerializeOptions {\r\n  const parentOptions = parent?.bsonOptions;\r\n  return {\r\n    raw: options?.raw ?? parentOptions?.raw ?? false,\r\n    useBigInt64: options?.useBigInt64 ?? parentOptions?.useBigInt64 ?? false,\r\n    promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\r\n    promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\r\n    promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\r\n    ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\r\n    bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\r\n    serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\r\n    fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\r\n    enableUtf8Validation:\r\n      options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}