{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\nconst util_1 = require(\"util\");\nconst connection_1 = require(\"../cmap/connection\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst errors_1 = require(\"../cmap/errors\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst transactions_1 = require(\"../transactions\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst monitor_1 = require(\"./monitor\");\nconst server_description_1 = require(\"./server_description\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kMonitor = Symbol('monitor');\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n  /**\r\n   * Create a server\r\n   */\n  constructor(topology, description, options) {\n    super();\n    this.commandAsync = (0, util_1.promisify)((ns, cmd, options,\n    // callback type defines Document result because result is never nullish when it succeeds, otherwise promise rejects\n    callback) => this.command(ns, cmd, options, callback));\n    this.serverApi = options.serverApi;\n    const poolOptions = {\n      hostAddress: description.hostAddress,\n      ...options\n    };\n    this.topology = topology;\n    this.pool = new connection_pool_1.ConnectionPool(this, poolOptions);\n    this.s = {\n      description,\n      options,\n      state: common_1.STATE_CLOSED,\n      operationCount: 0\n    };\n    for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n      this.pool.on(event, e => this.emit(event, e));\n    }\n    this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, clusterTime => {\n      this.clusterTime = clusterTime;\n    });\n    if (this.loadBalanced) {\n      this[kMonitor] = null;\n      // monitoring is disabled in load balancing mode\n      return;\n    }\n    // create the monitor\n    // TODO(NODE-4144): Remove new variable for type narrowing\n    const monitor = new monitor_1.Monitor(this, this.s.options);\n    this[kMonitor] = monitor;\n    for (const event of constants_1.HEARTBEAT_EVENTS) {\n      monitor.on(event, e => this.emit(event, e));\n    }\n    monitor.on('resetServer', error => markServerUnknown(this, error));\n    monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, event => {\n      this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n        roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n      }));\n      if (this.s.state === common_1.STATE_CONNECTING) {\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Server.CONNECT, this);\n      }\n    });\n  }\n  get clusterTime() {\n    return this.topology.clusterTime;\n  }\n  set clusterTime(clusterTime) {\n    this.topology.clusterTime = clusterTime;\n  }\n  get description() {\n    return this.s.description;\n  }\n  get name() {\n    return this.s.description.address;\n  }\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n    return;\n  }\n  get loadBalanced() {\n    return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /**\r\n   * Initiate server connect\r\n   */\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CONNECTING);\n    // If in load balancer mode we automatically set the server to\n    // a load balancer. It never transitions out of this state and\n    // has no monitor.\n    if (!this.loadBalanced) {\n      this[kMonitor]?.connect();\n    } else {\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Server.CONNECT, this);\n    }\n  }\n  /** Destroy the server connection */\n  destroy(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {\n        force: false\n      };\n    }\n    options = Object.assign({}, {\n      force: false\n    }, options);\n    if (this.s.state === common_1.STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    if (!this.loadBalanced) {\n      this[kMonitor]?.close();\n    }\n    this.pool.close(options, err => {\n      stateTransition(this, common_1.STATE_CLOSED);\n      this.emit('closed');\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n  /**\r\n   * Immediately schedule monitoring of this server. If there already an attempt being made\r\n   * this will be a no-op.\r\n   */\n  requestCheck() {\n    if (!this.loadBalanced) {\n      this[kMonitor]?.requestCheck();\n    }\n  }\n  /**\r\n   * Execute a command\r\n   * @internal\r\n   */\n  command(ns, cmd, options, callback) {\n    if (callback == null) {\n      throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n    }\n    if (ns.db == null || typeof ns === 'string') {\n      throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n    }\n    if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n      callback(new error_1.MongoServerClosedError());\n      return;\n    }\n    // Clone the options\n    const finalOptions = Object.assign({}, options, {\n      wireProtocolCommand: false\n    });\n    // There are cases where we need to flag the read preference not to get sent in\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\n    // with a non-primary read preference. In this case the effective read preference\n    // (primary) is not the same as the provided and must be removed completely.\n    if (finalOptions.omitReadPreference) {\n      delete finalOptions.readPreference;\n    }\n    const session = finalOptions.session;\n    const conn = session?.pinnedConnection;\n    // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n    //       (and prevent them from being checked back in) at the point of operation execution.\n    //       This should be considered as part of the work for NODE-2882\n    // NOTE:\n    //       When incrementing operation count, it's important that we increment it before we\n    //       attempt to check out a connection from the pool.  This ensures that operations that\n    //       are waiting for a connection are included in the operation count.  Load balanced\n    //       mode will only ever have a single server, so the operation count doesn't matter.\n    //       Incrementing the operation count above the logic to handle load balanced mode would\n    //       require special logic to decrement it again, or would double increment (the load\n    //       balanced code makes a recursive call).  Instead, we increment the count after this\n    //       check.\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n      this.pool.checkOut((err, checkedOut) => {\n        if (err || checkedOut == null) {\n          if (callback) return callback(err);\n          return;\n        }\n        session.pin(checkedOut);\n        this.command(ns, cmd, finalOptions, callback);\n      });\n      return;\n    }\n    this.incrementOperationCount();\n    this.pool.withConnection(conn, (err, conn, cb) => {\n      if (err || !conn) {\n        this.decrementOperationCount();\n        if (!err) {\n          return cb(new error_1.MongoRuntimeError('Failed to create connection without error'));\n        }\n        if (!(err instanceof errors_1.PoolClearedError)) {\n          this.handleError(err);\n        }\n        return cb(err);\n      }\n      conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, (error, response) => {\n        this.decrementOperationCount();\n        cb(error, response);\n      }));\n    }, callback);\n  }\n  /**\r\n   * Handle SDAM error\r\n   * @internal\r\n   */\n  handleError(error, connection) {\n    if (!(error instanceof error_1.MongoError)) {\n      return;\n    }\n    const isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n    if (isStaleError) {\n      return;\n    }\n    const isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);\n    const isNetworkTimeoutBeforeHandshakeError = (0, error_1.isNetworkErrorBeforeHandshake)(error);\n    const isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n    if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n      // In load balanced mode we never mark the server as unknown and always\n      // clear for the specific service id.\n      if (!this.loadBalanced) {\n        error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n        markServerUnknown(this, error);\n      } else if (connection) {\n        this.pool.clear({\n          serviceId: connection.serviceId\n        });\n      }\n    } else {\n      if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n        if (shouldHandleStateChangeError(this, error)) {\n          const shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);\n          if (this.loadBalanced && connection && shouldClearPool) {\n            this.pool.clear({\n              serviceId: connection.serviceId\n            });\n          }\n          if (!this.loadBalanced) {\n            if (shouldClearPool) {\n              error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n            }\n            markServerUnknown(this, error);\n            process.nextTick(() => this.requestCheck());\n          }\n        }\n      }\n    }\n  }\n  /**\r\n   * Decrement the operation count, returning the new count.\r\n   */\n  decrementOperationCount() {\n    return this.s.operationCount -= 1;\n  }\n  /**\r\n   * Increment the operation count, returning the new count.\r\n   */\n  incrementOperationCount() {\n    return this.s.operationCount += 1;\n  }\n}\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\nServer.ENDED = constants_1.ENDED;\nexports.Server = Server;\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\nfunction markServerUnknown(server, error) {\n  // Load balancer servers can never be marked unknown.\n  if (server.loadBalanced) {\n    return;\n  }\n  if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n    server[kMonitor]?.reset();\n  }\n  server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, {\n    error\n  }));\n}\nfunction isPinnableCommand(cmd, session) {\n  if (session) {\n    return session.inTransaction() || 'aggregate' in cmd || 'find' in cmd || 'getMore' in cmd || 'listCollections' in cmd || 'listIndexes' in cmd;\n  }\n  return false;\n}\nfunction connectionIsStale(pool, connection) {\n  if (connection.serviceId) {\n    return connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString());\n  }\n  return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n  return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\r\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n  return topology.s.options.retryWrites !== false;\n}\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n  const session = options?.session;\n  return function handleOperationResult(error, result) {\n    // We should not swallow an error if it is present.\n    if (error == null && result != null) {\n      return callback(undefined, result);\n    }\n    if (options != null && 'noResponse' in options && options.noResponse === true) {\n      return callback(undefined, null);\n    }\n    if (!error) {\n      return callback(new error_1.MongoUnexpectedServerResponseError('Empty response with no error'));\n    }\n    if (!(error instanceof error_1.MongoError)) {\n      // Node.js or some other error we have not special handling for\n      return callback(error);\n    }\n    if (connectionIsStale(server.pool, connection)) {\n      return callback(error);\n    }\n    if (error instanceof error_1.MongoNetworkError) {\n      if (session && !session.hasEnded && session.serverSession) {\n        session.serverSession.isDirty = true;\n      }\n      // inActiveTransaction check handles commit and abort.\n      if (inActiveTransaction(session, cmd) && !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n      }\n      if ((isRetryableWritesEnabled(server.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, utils_1.supportsRetryableWrites)(server) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n    } else {\n      if ((isRetryableWritesEnabled(server.topology) || (0, transactions_1.isTransactionCommand)(cmd)) && (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(server)) && !inActiveTransaction(session, cmd)) {\n        error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n      }\n    }\n    if (session && session.isPinned && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n      session.unpin({\n        force: true\n      });\n    }\n    server.handleError(error, connection);\n    return callback(error);\n  };\n}","map":{"version":3,"mappings":";;;;;;AAAA;AAGA;AACA;AAKA;AACA;AAaA;AAiBA;AAGA;AACA;AAQA;AAaA;AACA;AAGA,MAAMA,eAAe,GAAG,4BAAgB,EAAC;EACvC,CAACC,qBAAY,GAAG,CAACA,qBAAY,EAAEA,yBAAgB,CAAC;EAChD,CAACA,yBAAgB,GAAG,CAACA,yBAAgB,EAAEA,sBAAa,EAAEA,wBAAe,EAAEA,qBAAY,CAAC;EACpF,CAACA,wBAAe,GAAG,CAACA,wBAAe,EAAEA,sBAAa,EAAEA,qBAAY,CAAC;EACjE,CAACA,sBAAa,GAAG,CAACA,sBAAa,EAAEA,qBAAY;CAC9C,CAAC;AAEF;AACA,MAAMC,QAAQ,GAAGC,MAAM,CAAC,SAAS,CAAC;AAiClC;AACA,MAAaC,MAAO,SAAQC,+BAA+B;EA2BzD;;;EAGAC,YAAYC,QAAkB,EAAEC,WAA8B,EAAEC,OAAsB;IACpF,KAAK,EAAE;IAEP,IAAI,CAACC,YAAY,GAAG,oBAAS,EAC3B,CACEC,EAAoB,EACpBC,GAAa,EACbH,OAAuB;IACvB;IACAI,QAA8D,KAC3D,IAAI,CAACC,OAAO,CAACH,EAAE,EAAEC,GAAG,EAAEH,OAAO,EAAEI,QAAe,CAAC,CACrD;IAED,IAAI,CAACE,SAAS,GAAGN,OAAO,CAACM,SAAS;IAElC,MAAMC,WAAW,GAAG;MAAEC,WAAW,EAAET,WAAW,CAACS,WAAW;MAAE,GAAGR;IAAO,CAAE;IAExE,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACW,IAAI,GAAG,IAAIC,gCAAc,CAAC,IAAI,EAAEH,WAAW,CAAC;IAEjD,IAAI,CAACI,CAAC,GAAG;MACPZ,WAAW;MACXC,OAAO;MACPY,KAAK,EAAEpB,qBAAY;MACnBqB,cAAc,EAAE;KACjB;IAED,KAAK,MAAMC,KAAK,IAAI,CAAC,GAAGC,uBAAW,EAAE,GAAGA,sBAAU,CAAC,EAAE;MACnD,IAAI,CAACN,IAAI,CAACO,EAAE,CAACF,KAAK,EAAGG,CAAM,IAAK,IAAI,CAACC,IAAI,CAACJ,KAAK,EAAEG,CAAC,CAAC,CAAC;;IAGtD,IAAI,CAACR,IAAI,CAACO,EAAE,CAACG,uBAAU,CAACC,qBAAqB,EAAGC,WAAwB,IAAI;MAC1E,IAAI,CAACA,WAAW,GAAGA,WAAW;IAChC,CAAC,CAAC;IAEF,IAAI,IAAI,CAACC,YAAY,EAAE;MACrB,IAAI,CAAC7B,QAAQ,CAAC,GAAG,IAAI;MACrB;MACA;;IAGF;IACA;IACA,MAAM8B,OAAO,GAAG,IAAIC,iBAAO,CAAC,IAAI,EAAE,IAAI,CAACb,CAAC,CAACX,OAAO,CAAC;IACjD,IAAI,CAACP,QAAQ,CAAC,GAAG8B,OAAO;IAExB,KAAK,MAAMT,KAAK,IAAIC,4BAAgB,EAAE;MACpCQ,OAAO,CAACP,EAAE,CAACF,KAAK,EAAGG,CAAM,IAAK,IAAI,CAACC,IAAI,CAACJ,KAAK,EAAEG,CAAC,CAAC,CAAC;;IAGpDM,OAAO,CAACP,EAAE,CAAC,aAAa,EAAGS,KAAiB,IAAKC,iBAAiB,CAAC,IAAI,EAAED,KAAK,CAAC,CAAC;IAChFF,OAAO,CAACP,EAAE,CAACrB,MAAM,CAACgC,0BAA0B,EAAGb,KAAoC,IAAI;MACrF,IAAI,CAACI,IAAI,CACPvB,MAAM,CAACiC,oBAAoB,EAC3B,IAAIC,sCAAiB,CAAC,IAAI,CAAC9B,WAAW,CAACS,WAAW,EAAEM,KAAK,CAACgB,KAAK,EAAE;QAC/DC,aAAa,EAAEC,sBAAsB,CAAC,IAAI,CAACjC,WAAW,CAACgC,aAAa,EAAEjB,KAAK,CAACmB,QAAQ;OACrF,CAAC,CACH;MAED,IAAI,IAAI,CAACtB,CAAC,CAACC,KAAK,KAAKpB,yBAAgB,EAAE;QACrCD,eAAe,CAAC,IAAI,EAAEC,wBAAe,CAAC;QACtC,IAAI,CAAC0B,IAAI,CAACvB,MAAM,CAACuC,OAAO,EAAE,IAAI,CAAC;;IAEnC,CAAC,CAAC;EACJ;EAEA,IAAIb,WAAW;IACb,OAAO,IAAI,CAACvB,QAAQ,CAACuB,WAAW;EAClC;EAEA,IAAIA,WAAW,CAACA,WAAoC;IAClD,IAAI,CAACvB,QAAQ,CAACuB,WAAW,GAAGA,WAAW;EACzC;EAEA,IAAItB,WAAW;IACb,OAAO,IAAI,CAACY,CAAC,CAACZ,WAAW;EAC3B;EAEA,IAAIoC,IAAI;IACN,OAAO,IAAI,CAACxB,CAAC,CAACZ,WAAW,CAACqC,OAAO;EACnC;EAEA,IAAIC,aAAa;IACf,IAAI,IAAI,CAAC1B,CAAC,CAACX,OAAO,IAAI,IAAI,CAACW,CAAC,CAACX,OAAO,CAACqC,aAAa,EAAE;MAClD,OAAO,IAAI,CAAC1B,CAAC,CAACX,OAAO,CAACqC,aAAa;;IAErC;EACF;EAEA,IAAIf,YAAY;IACd,OAAO,IAAI,CAACxB,QAAQ,CAACC,WAAW,CAACuC,IAAI,KAAK9C,qBAAY,CAAC+C,YAAY;EACrE;EAEA;;;EAGAC,OAAO;IACL,IAAI,IAAI,CAAC7B,CAAC,CAACC,KAAK,KAAKpB,qBAAY,EAAE;MACjC;;IAGFD,eAAe,CAAC,IAAI,EAAEC,yBAAgB,CAAC;IAEvC;IACA;IACA;IACA,IAAI,CAAC,IAAI,CAAC8B,YAAY,EAAE;MACtB,IAAI,CAAC7B,QAAQ,CAAC,EAAE+C,OAAO,EAAE;KAC1B,MAAM;MACLjD,eAAe,CAAC,IAAI,EAAEC,wBAAe,CAAC;MACtC,IAAI,CAAC0B,IAAI,CAACvB,MAAM,CAACuC,OAAO,EAAE,IAAI,CAAC;;EAEnC;EAEA;EACAO,OAAO,CAACzC,OAAwB,EAAEI,QAAmB;IACnD,IAAI,OAAOJ,OAAO,KAAK,UAAU,EAAE;MACjCI,QAAQ,GAAGJ,OAAO;MAClBA,OAAO,GAAG;QAAE0C,KAAK,EAAE;MAAK,CAAE;;IAE5B1C,OAAO,GAAG2C,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE;MAAEF,KAAK,EAAE;IAAK,CAAE,EAAE1C,OAAO,CAAC;IAEtD,IAAI,IAAI,CAACW,CAAC,CAACC,KAAK,KAAKpB,qBAAY,EAAE;MACjC,IAAI,OAAOY,QAAQ,KAAK,UAAU,EAAE;QAClCA,QAAQ,EAAE;;MAGZ;;IAGFb,eAAe,CAAC,IAAI,EAAEC,sBAAa,CAAC;IAEpC,IAAI,CAAC,IAAI,CAAC8B,YAAY,EAAE;MACtB,IAAI,CAAC7B,QAAQ,CAAC,EAAEoD,KAAK,EAAE;;IAGzB,IAAI,CAACpC,IAAI,CAACoC,KAAK,CAAC7C,OAAO,EAAE8C,GAAG,IAAG;MAC7BvD,eAAe,CAAC,IAAI,EAAEC,qBAAY,CAAC;MACnC,IAAI,CAAC0B,IAAI,CAAC,QAAQ,CAAC;MACnB,IAAI,OAAOd,QAAQ,KAAK,UAAU,EAAE;QAClCA,QAAQ,CAAC0C,GAAG,CAAC;;IAEjB,CAAC,CAAC;EACJ;EAEA;;;;EAIAC,YAAY;IACV,IAAI,CAAC,IAAI,CAACzB,YAAY,EAAE;MACtB,IAAI,CAAC7B,QAAQ,CAAC,EAAEsD,YAAY,EAAE;;EAElC;EAEA;;;;EAIA1C,OAAO,CACLH,EAAoB,EACpBC,GAAa,EACbH,OAAuB,EACvBI,QAA4B;IAE5B,IAAIA,QAAQ,IAAI,IAAI,EAAE;MACpB,MAAM,IAAI4C,iCAAyB,CAAC,2BAA2B,CAAC;;IAGlE,IAAI9C,EAAE,CAAC+C,EAAE,IAAI,IAAI,IAAI,OAAO/C,EAAE,KAAK,QAAQ,EAAE;MAC3C,MAAM,IAAI8C,iCAAyB,CAAC,gCAAgC,CAAC;;IAGvE,IAAI,IAAI,CAACrC,CAAC,CAACC,KAAK,KAAKpB,sBAAa,IAAI,IAAI,CAACmB,CAAC,CAACC,KAAK,KAAKpB,qBAAY,EAAE;MACnEY,QAAQ,CAAC,IAAI4C,8BAAsB,EAAE,CAAC;MACtC;;IAGF;IACA,MAAME,YAAY,GAAGP,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE5C,OAAO,EAAE;MAAEmD,mBAAmB,EAAE;IAAK,CAAE,CAAC;IAE/E;IACA;IACA;IACA;IACA,IAAID,YAAY,CAACE,kBAAkB,EAAE;MACnC,OAAOF,YAAY,CAACG,cAAc;;IAGpC,MAAMC,OAAO,GAAGJ,YAAY,CAACI,OAAO;IACpC,MAAMC,IAAI,GAAGD,OAAO,EAAEE,gBAAgB;IAEtC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAClC,YAAY,IAAIgC,OAAO,IAAIC,IAAI,IAAI,IAAI,IAAIE,iBAAiB,CAACtD,GAAG,EAAEmD,OAAO,CAAC,EAAE;MACnF,IAAI,CAAC7C,IAAI,CAACiD,QAAQ,CAAC,CAACZ,GAAG,EAAEa,UAAU,KAAI;QACrC,IAAIb,GAAG,IAAIa,UAAU,IAAI,IAAI,EAAE;UAC7B,IAAIvD,QAAQ,EAAE,OAAOA,QAAQ,CAAC0C,GAAG,CAAC;UAClC;;QAGFQ,OAAO,CAACM,GAAG,CAACD,UAAU,CAAC;QACvB,IAAI,CAACtD,OAAO,CAACH,EAAE,EAAEC,GAAG,EAAE+C,YAAY,EAAE9C,QAAQ,CAAC;MAC/C,CAAC,CAAC;MACF;;IAGF,IAAI,CAACyD,uBAAuB,EAAE;IAE9B,IAAI,CAACpD,IAAI,CAACqD,cAAc,CACtBP,IAAI,EACJ,CAACT,GAAG,EAAES,IAAI,EAAEQ,EAAE,KAAI;MAChB,IAAIjB,GAAG,IAAI,CAACS,IAAI,EAAE;QAChB,IAAI,CAACS,uBAAuB,EAAE;QAC9B,IAAI,CAAClB,GAAG,EAAE;UACR,OAAOiB,EAAE,CAAC,IAAIf,yBAAiB,CAAC,2CAA2C,CAAC,CAAC;;QAE/E,IAAI,EAAEF,GAAG,YAAYmB,yBAAgB,CAAC,EAAE;UACtC,IAAI,CAACC,WAAW,CAACpB,GAAG,CAAC;;QAEvB,OAAOiB,EAAE,CAACjB,GAAG,CAAC;;MAGhBS,IAAI,CAAClD,OAAO,CACVH,EAAE,EACFC,GAAG,EACH+C,YAAY,EACZiB,oBAAoB,CAAC,IAAI,EAAEZ,IAAI,EAAEpD,GAAG,EAAE+C,YAAY,EAAE,CAACzB,KAAK,EAAE2C,QAAQ,KAAI;QACtE,IAAI,CAACJ,uBAAuB,EAAE;QAC9BD,EAAE,CAACtC,KAAK,EAAE2C,QAAQ,CAAC;MACrB,CAAC,CAAC,CACH;IACH,CAAC,EACDhE,QAAQ,CACT;EACH;EAEA;;;;EAIA8D,WAAW,CAACzC,KAAe,EAAE4C,UAAuB;IAClD,IAAI,EAAE5C,KAAK,YAAYuB,kBAAU,CAAC,EAAE;MAClC;;IAGF,MAAMsB,YAAY,GAChB7C,KAAK,CAAC8C,oBAAoB,IAAI9C,KAAK,CAAC8C,oBAAoB,GAAG,IAAI,CAAC9D,IAAI,CAAC+D,UAAU;IACjF,IAAIF,YAAY,EAAE;MAChB;;IAGF,MAAMG,wBAAwB,GAC5BhD,KAAK,YAAYuB,yBAAiB,IAAI,EAAEvB,KAAK,YAAYuB,gCAAwB,CAAC;IACpF,MAAM0B,oCAAoC,GAAG,yCAA6B,EAACjD,KAAK,CAAC;IACjF,MAAMkD,oBAAoB,GAAGlD,KAAK,CAACmD,aAAa,CAAC5B,uBAAe,CAAC6B,cAAc,CAAC;IAChF,IAAIJ,wBAAwB,IAAIC,oCAAoC,IAAIC,oBAAoB,EAAE;MAC5F;MACA;MACA,IAAI,CAAC,IAAI,CAACrD,YAAY,EAAE;QACtBG,KAAK,CAACqD,aAAa,CAAC9B,uBAAe,CAAC+B,SAAS,CAAC;QAC9CrD,iBAAiB,CAAC,IAAI,EAAED,KAAK,CAAC;OAC/B,MAAM,IAAI4C,UAAU,EAAE;QACrB,IAAI,CAAC5D,IAAI,CAACuE,KAAK,CAAC;UAAEC,SAAS,EAAEZ,UAAU,CAACY;QAAS,CAAE,CAAC;;KAEvD,MAAM;MACL,IAAI,oCAAwB,EAACxD,KAAK,CAAC,EAAE;QACnC,IAAIyD,4BAA4B,CAAC,IAAI,EAAEzD,KAAK,CAAC,EAAE;UAC7C,MAAM0D,eAAe,GAAG,0BAAc,EAAC,IAAI,CAAC,IAAI,CAAC,IAAI,mCAAuB,EAAC1D,KAAK,CAAC;UACnF,IAAI,IAAI,CAACH,YAAY,IAAI+C,UAAU,IAAIc,eAAe,EAAE;YACtD,IAAI,CAAC1E,IAAI,CAACuE,KAAK,CAAC;cAAEC,SAAS,EAAEZ,UAAU,CAACY;YAAS,CAAE,CAAC;;UAGtD,IAAI,CAAC,IAAI,CAAC3D,YAAY,EAAE;YACtB,IAAI6D,eAAe,EAAE;cACnB1D,KAAK,CAACqD,aAAa,CAAC9B,uBAAe,CAAC+B,SAAS,CAAC;;YAEhDrD,iBAAiB,CAAC,IAAI,EAAED,KAAK,CAAC;YAC9B2D,OAAO,CAACC,QAAQ,CAAC,MAAM,IAAI,CAACtC,YAAY,EAAE,CAAC;;;;;EAKrD;EAEA;;;EAGQiB,uBAAuB;IAC7B,OAAQ,IAAI,CAACrD,CAAC,CAACE,cAAc,IAAI,CAAC;EACpC;EAEA;;;EAGQgD,uBAAuB;IAC7B,OAAQ,IAAI,CAAClD,CAAC,CAACE,cAAc,IAAI,CAAC;EACpC;;AArUA;AACgBlB,+BAAwB,GAAGoB,oCAAwB;AACnE;AACgBpB,iCAA0B,GAAGoB,sCAA0B;AACvE;AACgBpB,8BAAuB,GAAGoB,mCAAuB;AACjE;AACgBpB,cAAO,GAAGoB,mBAAO;AACjC;AACgBpB,2BAAoB,GAAGoB,gCAAoB;AAC3D;AACgBpB,aAAM,GAAGoB,kBAAM;AAC/B;AACgBpB,YAAK,GAAGoB,iBAAK;AAzBlBuE;AAoVb,SAAStD,sBAAsB,CAACuD,MAAc,EAAEtD,QAAgB;EAC9D,IAAIsD,MAAM,KAAK,CAAC,CAAC,EAAE;IACjB,OAAOtD,QAAQ;;EAGjB,MAAMuD,KAAK,GAAG,GAAG;EACjB,OAAOA,KAAK,GAAGvD,QAAQ,GAAG,CAAC,CAAC,GAAGuD,KAAK,IAAID,MAAM;AAChD;AAEA,SAAS7D,iBAAiB,CAAC+D,MAAc,EAAEhE,KAAwB;EACjE;EACA,IAAIgE,MAAM,CAACnE,YAAY,EAAE;IACvB;;EAGF,IAAIG,KAAK,YAAYuB,yBAAiB,IAAI,EAAEvB,KAAK,YAAYuB,gCAAwB,CAAC,EAAE;IACtFyC,MAAM,CAAChG,QAAQ,CAAC,EAAEiG,KAAK,EAAE;;EAG3BD,MAAM,CAACvE,IAAI,CACTvB,MAAM,CAACiC,oBAAoB,EAC3B,IAAIC,sCAAiB,CAAC4D,MAAM,CAAC1F,WAAW,CAACS,WAAW,EAAEmF,SAAS,EAAE;IAAElE;EAAK,CAAE,CAAC,CAC5E;AACH;AAEA,SAASgC,iBAAiB,CAACtD,GAAa,EAAEmD,OAAuB;EAC/D,IAAIA,OAAO,EAAE;IACX,OACEA,OAAO,CAACsC,aAAa,EAAE,IACvB,WAAW,IAAIzF,GAAG,IAClB,MAAM,IAAIA,GAAG,IACb,SAAS,IAAIA,GAAG,IAChB,iBAAiB,IAAIA,GAAG,IACxB,aAAa,IAAIA,GAAG;;EAIxB,OAAO,KAAK;AACd;AAEA,SAAS0F,iBAAiB,CAACpF,IAAoB,EAAE4D,UAAsB;EACrE,IAAIA,UAAU,CAACY,SAAS,EAAE;IACxB,OACEZ,UAAU,CAACG,UAAU,KAAK/D,IAAI,CAACqF,kBAAkB,CAACC,GAAG,CAAC1B,UAAU,CAACY,SAAS,CAACe,WAAW,EAAE,CAAC;;EAI7F,OAAO3B,UAAU,CAACG,UAAU,KAAK/D,IAAI,CAAC+D,UAAU;AAClD;AAEA,SAASU,4BAA4B,CAACO,MAAc,EAAE3C,GAAe;EACnE,MAAMmD,GAAG,GAAGnD,GAAG,CAACoD,eAAe;EAC/B,MAAMC,GAAG,GAAGV,MAAM,CAAC1F,WAAW,CAACmG,eAAe;EAC9C,OAAO,+CAAsB,EAACC,GAAG,EAAEF,GAAG,CAAC,GAAG,CAAC;AAC7C;AAEA,SAASG,mBAAmB,CAAC9C,OAAkC,EAAEnD,GAAa;EAC5E,OAAOmD,OAAO,IAAIA,OAAO,CAACsC,aAAa,EAAE,IAAI,CAAC,uCAAoB,EAACzF,GAAG,CAAC;AACzE;AAEA;;AAEA,SAASkG,wBAAwB,CAACvG,QAAkB;EAClD,OAAOA,QAAQ,CAACa,CAAC,CAACX,OAAO,CAACsG,WAAW,KAAK,KAAK;AACjD;AAEA,SAASnC,oBAAoB,CAC3BsB,MAAc,EACdpB,UAAsB,EACtBlE,GAAa,EACbH,OAAoD,EACpDI,QAAkB;EAElB,MAAMkD,OAAO,GAAGtD,OAAO,EAAEsD,OAAO;EAChC,OAAO,SAASiD,qBAAqB,CAAC9E,KAAK,EAAE+E,MAAM;IACjD;IACA,IAAI/E,KAAK,IAAI,IAAI,IAAI+E,MAAM,IAAI,IAAI,EAAE;MACnC,OAAOpG,QAAQ,CAACuF,SAAS,EAAEa,MAAM,CAAC;;IAGpC,IAAIxG,OAAO,IAAI,IAAI,IAAI,YAAY,IAAIA,OAAO,IAAIA,OAAO,CAACyG,UAAU,KAAK,IAAI,EAAE;MAC7E,OAAOrG,QAAQ,CAACuF,SAAS,EAAE,IAAI,CAAC;;IAGlC,IAAI,CAAClE,KAAK,EAAE;MACV,OAAOrB,QAAQ,CAAC,IAAI4C,0CAAkC,CAAC,8BAA8B,CAAC,CAAC;;IAGzF,IAAI,EAAEvB,KAAK,YAAYuB,kBAAU,CAAC,EAAE;MAClC;MACA,OAAO5C,QAAQ,CAACqB,KAAK,CAAC;;IAGxB,IAAIoE,iBAAiB,CAACJ,MAAM,CAAChF,IAAI,EAAE4D,UAAU,CAAC,EAAE;MAC9C,OAAOjE,QAAQ,CAACqB,KAAK,CAAC;;IAGxB,IAAIA,KAAK,YAAYuB,yBAAiB,EAAE;MACtC,IAAIM,OAAO,IAAI,CAACA,OAAO,CAACoD,QAAQ,IAAIpD,OAAO,CAACqD,aAAa,EAAE;QACzDrD,OAAO,CAACqD,aAAa,CAACC,OAAO,GAAG,IAAI;;MAGtC;MACA,IACER,mBAAmB,CAAC9C,OAAO,EAAEnD,GAAG,CAAC,IACjC,CAACsB,KAAK,CAACmD,aAAa,CAAC5B,uBAAe,CAAC6D,yBAAyB,CAAC,EAC/D;QACApF,KAAK,CAACqD,aAAa,CAAC9B,uBAAe,CAAC6D,yBAAyB,CAAC;;MAGhE,IACE,CAACR,wBAAwB,CAACZ,MAAM,CAAC3F,QAAQ,CAAC,IAAI,uCAAoB,EAACK,GAAG,CAAC,KACvE,mCAAuB,EAACsF,MAAM,CAAC,IAC/B,CAACW,mBAAmB,CAAC9C,OAAO,EAAEnD,GAAG,CAAC,EAClC;QACAsB,KAAK,CAACqD,aAAa,CAAC9B,uBAAe,CAAC8D,mBAAmB,CAAC;;KAE3D,MAAM;MACL,IACE,CAACT,wBAAwB,CAACZ,MAAM,CAAC3F,QAAQ,CAAC,IAAI,uCAAoB,EAACK,GAAG,CAAC,KACvE,oCAAwB,EAACsB,KAAK,EAAE,0BAAc,EAACgE,MAAM,CAAC,CAAC,IACvD,CAACW,mBAAmB,CAAC9C,OAAO,EAAEnD,GAAG,CAAC,EAClC;QACAsB,KAAK,CAACqD,aAAa,CAAC9B,uBAAe,CAAC8D,mBAAmB,CAAC;;;IAI5D,IACExD,OAAO,IACPA,OAAO,CAACyD,QAAQ,IAChBtF,KAAK,CAACmD,aAAa,CAAC5B,uBAAe,CAAC6D,yBAAyB,CAAC,EAC9D;MACAvD,OAAO,CAAC0D,KAAK,CAAC;QAAEtE,KAAK,EAAE;MAAI,CAAE,CAAC;;IAGhC+C,MAAM,CAACvB,WAAW,CAACzC,KAAK,EAAE4C,UAAU,CAAC;IAErC,OAAOjE,QAAQ,CAACqB,KAAK,CAAC;EACxB,CAAC;AACH","names":["stateTransition","common_1","kMonitor","Symbol","Server","mongo_types_1","constructor","topology","description","options","commandAsync","ns","cmd","callback","command","serverApi","poolOptions","hostAddress","pool","connection_pool_1","s","state","operationCount","event","constants_1","on","e","emit","connection_1","CLUSTER_TIME_RECEIVED","clusterTime","loadBalanced","monitor","monitor_1","error","markServerUnknown","SERVER_HEARTBEAT_SUCCEEDED","DESCRIPTION_RECEIVED","server_description_1","reply","roundTripTime","calculateRoundTripTime","duration","CONNECT","name","address","autoEncrypter","type","LoadBalanced","connect","destroy","force","Object","assign","close","err","requestCheck","error_1","db","finalOptions","wireProtocolCommand","omitReadPreference","readPreference","session","conn","pinnedConnection","isPinnableCommand","checkOut","checkedOut","pin","incrementOperationCount","withConnection","cb","decrementOperationCount","errors_1","handleError","makeOperationHandler","response","connection","isStaleError","connectionGeneration","generation","isNetworkNonTimeoutError","isNetworkTimeoutBeforeHandshakeError","isAuthHandshakeError","hasErrorLabel","HandshakeError","addErrorLabel","ResetPool","clear","serviceId","shouldHandleStateChangeError","shouldClearPool","process","nextTick","exports","oldRtt","alpha","server","reset","undefined","inTransaction","connectionIsStale","serviceGenerations","get","toHexString","etv","topologyVersion","stv","inActiveTransaction","isRetryableWritesEnabled","retryWrites","handleOperationResult","result","noResponse","hasEnded","serverSession","isDirty","TransientTransactionError","RetryableWriteError","isPinned","unpin"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\sdam\\server.ts"],"sourcesContent":["import { promisify } from 'util';\r\n\r\nimport type { Document } from '../bson';\r\nimport { type CommandOptions, Connection, type DestroyOptions } from '../cmap/connection';\r\nimport {\r\n  ConnectionPool,\r\n  type ConnectionPoolEvents,\r\n  type ConnectionPoolOptions\r\n} from '../cmap/connection_pool';\r\nimport { PoolClearedError } from '../cmap/errors';\r\nimport {\r\n  APM_EVENTS,\r\n  CLOSED,\r\n  CMAP_EVENTS,\r\n  CONNECT,\r\n  DESCRIPTION_RECEIVED,\r\n  ENDED,\r\n  HEARTBEAT_EVENTS,\r\n  SERVER_HEARTBEAT_FAILED,\r\n  SERVER_HEARTBEAT_STARTED,\r\n  SERVER_HEARTBEAT_SUCCEEDED\r\n} from '../constants';\r\nimport type { AutoEncrypter } from '../deps';\r\nimport {\r\n  type AnyError,\r\n  isNetworkErrorBeforeHandshake,\r\n  isNodeShuttingDownError,\r\n  isSDAMUnrecoverableError,\r\n  MongoError,\r\n  MongoErrorLabel,\r\n  MongoInvalidArgumentError,\r\n  MongoNetworkError,\r\n  MongoNetworkTimeoutError,\r\n  MongoRuntimeError,\r\n  MongoServerClosedError,\r\n  type MongoServerError,\r\n  MongoUnexpectedServerResponseError,\r\n  needsRetryableWriteLabel\r\n} from '../error';\r\nimport type { ServerApi } from '../mongo_client';\r\nimport { TypedEventEmitter } from '../mongo_types';\r\nimport type { GetMoreOptions } from '../operations/get_more';\r\nimport type { ClientSession } from '../sessions';\r\nimport { isTransactionCommand } from '../transactions';\r\nimport {\r\n  type Callback,\r\n  type EventEmitterWithState,\r\n  makeStateMachine,\r\n  maxWireVersion,\r\n  type MongoDBNamespace,\r\n  supportsRetryableWrites\r\n} from '../utils';\r\nimport {\r\n  type ClusterTime,\r\n  STATE_CLOSED,\r\n  STATE_CLOSING,\r\n  STATE_CONNECTED,\r\n  STATE_CONNECTING,\r\n  TopologyType\r\n} from './common';\r\nimport type {\r\n  ServerHeartbeatFailedEvent,\r\n  ServerHeartbeatStartedEvent,\r\n  ServerHeartbeatSucceededEvent\r\n} from './events';\r\nimport { Monitor, type MonitorOptions } from './monitor';\r\nimport { compareTopologyVersion, ServerDescription } from './server_description';\r\nimport type { Topology } from './topology';\r\n\r\nconst stateTransition = makeStateMachine({\r\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\r\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\r\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\r\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\r\n});\r\n\r\n/** @internal */\r\nconst kMonitor = Symbol('monitor');\r\n\r\n/** @internal */\r\nexport type ServerOptions = Omit<ConnectionPoolOptions, 'id' | 'generation' | 'hostAddress'> &\r\n  MonitorOptions;\r\n\r\n/** @internal */\r\nexport interface ServerPrivate {\r\n  /** The server description for this server */\r\n  description: ServerDescription;\r\n  /** A copy of the options used to construct this instance */\r\n  options: ServerOptions;\r\n  /** The current state of the Server */\r\n  state: string;\r\n  /** MongoDB server API version */\r\n  serverApi?: ServerApi;\r\n  /** A count of the operations currently running against the server. */\r\n  operationCount: number;\r\n}\r\n\r\n/** @public */\r\nexport type ServerEvents = {\r\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\r\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\r\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\r\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\r\n  connect(server: Server): void;\r\n  descriptionReceived(description: ServerDescription): void;\r\n  closed(): void;\r\n  ended(): void;\r\n} & ConnectionPoolEvents &\r\n  EventEmitterWithState;\r\n\r\n/** @internal */\r\nexport class Server extends TypedEventEmitter<ServerEvents> {\r\n  /** @internal */\r\n  s: ServerPrivate;\r\n  /** @internal */\r\n  topology: Topology;\r\n  /** @internal */\r\n  pool: ConnectionPool;\r\n  serverApi?: ServerApi;\r\n  hello?: Document;\r\n  commandAsync: (ns: MongoDBNamespace, cmd: Document, options: CommandOptions) => Promise<Document>;\r\n  [kMonitor]: Monitor | null;\r\n\r\n  /** @event */\r\n  static readonly SERVER_HEARTBEAT_STARTED = SERVER_HEARTBEAT_STARTED;\r\n  /** @event */\r\n  static readonly SERVER_HEARTBEAT_SUCCEEDED = SERVER_HEARTBEAT_SUCCEEDED;\r\n  /** @event */\r\n  static readonly SERVER_HEARTBEAT_FAILED = SERVER_HEARTBEAT_FAILED;\r\n  /** @event */\r\n  static readonly CONNECT = CONNECT;\r\n  /** @event */\r\n  static readonly DESCRIPTION_RECEIVED = DESCRIPTION_RECEIVED;\r\n  /** @event */\r\n  static readonly CLOSED = CLOSED;\r\n  /** @event */\r\n  static readonly ENDED = ENDED;\r\n\r\n  /**\r\n   * Create a server\r\n   */\r\n  constructor(topology: Topology, description: ServerDescription, options: ServerOptions) {\r\n    super();\r\n\r\n    this.commandAsync = promisify(\r\n      (\r\n        ns: MongoDBNamespace,\r\n        cmd: Document,\r\n        options: CommandOptions,\r\n        // callback type defines Document result because result is never nullish when it succeeds, otherwise promise rejects\r\n        callback: (error: Error | undefined, result: Document) => void\r\n      ) => this.command(ns, cmd, options, callback as any)\r\n    );\r\n\r\n    this.serverApi = options.serverApi;\r\n\r\n    const poolOptions = { hostAddress: description.hostAddress, ...options };\r\n\r\n    this.topology = topology;\r\n    this.pool = new ConnectionPool(this, poolOptions);\r\n\r\n    this.s = {\r\n      description,\r\n      options,\r\n      state: STATE_CLOSED,\r\n      operationCount: 0\r\n    };\r\n\r\n    for (const event of [...CMAP_EVENTS, ...APM_EVENTS]) {\r\n      this.pool.on(event, (e: any) => this.emit(event, e));\r\n    }\r\n\r\n    this.pool.on(Connection.CLUSTER_TIME_RECEIVED, (clusterTime: ClusterTime) => {\r\n      this.clusterTime = clusterTime;\r\n    });\r\n\r\n    if (this.loadBalanced) {\r\n      this[kMonitor] = null;\r\n      // monitoring is disabled in load balancing mode\r\n      return;\r\n    }\r\n\r\n    // create the monitor\r\n    // TODO(NODE-4144): Remove new variable for type narrowing\r\n    const monitor = new Monitor(this, this.s.options);\r\n    this[kMonitor] = monitor;\r\n\r\n    for (const event of HEARTBEAT_EVENTS) {\r\n      monitor.on(event, (e: any) => this.emit(event, e));\r\n    }\r\n\r\n    monitor.on('resetServer', (error: MongoError) => markServerUnknown(this, error));\r\n    monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event: ServerHeartbeatSucceededEvent) => {\r\n      this.emit(\r\n        Server.DESCRIPTION_RECEIVED,\r\n        new ServerDescription(this.description.hostAddress, event.reply, {\r\n          roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\r\n        })\r\n      );\r\n\r\n      if (this.s.state === STATE_CONNECTING) {\r\n        stateTransition(this, STATE_CONNECTED);\r\n        this.emit(Server.CONNECT, this);\r\n      }\r\n    });\r\n  }\r\n\r\n  get clusterTime(): ClusterTime | undefined {\r\n    return this.topology.clusterTime;\r\n  }\r\n\r\n  set clusterTime(clusterTime: ClusterTime | undefined) {\r\n    this.topology.clusterTime = clusterTime;\r\n  }\r\n\r\n  get description(): ServerDescription {\r\n    return this.s.description;\r\n  }\r\n\r\n  get name(): string {\r\n    return this.s.description.address;\r\n  }\r\n\r\n  get autoEncrypter(): AutoEncrypter | undefined {\r\n    if (this.s.options && this.s.options.autoEncrypter) {\r\n      return this.s.options.autoEncrypter;\r\n    }\r\n    return;\r\n  }\r\n\r\n  get loadBalanced(): boolean {\r\n    return this.topology.description.type === TopologyType.LoadBalanced;\r\n  }\r\n\r\n  /**\r\n   * Initiate server connect\r\n   */\r\n  connect(): void {\r\n    if (this.s.state !== STATE_CLOSED) {\r\n      return;\r\n    }\r\n\r\n    stateTransition(this, STATE_CONNECTING);\r\n\r\n    // If in load balancer mode we automatically set the server to\r\n    // a load balancer. It never transitions out of this state and\r\n    // has no monitor.\r\n    if (!this.loadBalanced) {\r\n      this[kMonitor]?.connect();\r\n    } else {\r\n      stateTransition(this, STATE_CONNECTED);\r\n      this.emit(Server.CONNECT, this);\r\n    }\r\n  }\r\n\r\n  /** Destroy the server connection */\r\n  destroy(options?: DestroyOptions, callback?: Callback): void {\r\n    if (typeof options === 'function') {\r\n      callback = options;\r\n      options = { force: false };\r\n    }\r\n    options = Object.assign({}, { force: false }, options);\r\n\r\n    if (this.s.state === STATE_CLOSED) {\r\n      if (typeof callback === 'function') {\r\n        callback();\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    stateTransition(this, STATE_CLOSING);\r\n\r\n    if (!this.loadBalanced) {\r\n      this[kMonitor]?.close();\r\n    }\r\n\r\n    this.pool.close(options, err => {\r\n      stateTransition(this, STATE_CLOSED);\r\n      this.emit('closed');\r\n      if (typeof callback === 'function') {\r\n        callback(err);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Immediately schedule monitoring of this server. If there already an attempt being made\r\n   * this will be a no-op.\r\n   */\r\n  requestCheck(): void {\r\n    if (!this.loadBalanced) {\r\n      this[kMonitor]?.requestCheck();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute a command\r\n   * @internal\r\n   */\r\n  command(\r\n    ns: MongoDBNamespace,\r\n    cmd: Document,\r\n    options: CommandOptions,\r\n    callback: Callback<Document>\r\n  ): void {\r\n    if (callback == null) {\r\n      throw new MongoInvalidArgumentError('Callback must be provided');\r\n    }\r\n\r\n    if (ns.db == null || typeof ns === 'string') {\r\n      throw new MongoInvalidArgumentError('Namespace must not be a string');\r\n    }\r\n\r\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\r\n      callback(new MongoServerClosedError());\r\n      return;\r\n    }\r\n\r\n    // Clone the options\r\n    const finalOptions = Object.assign({}, options, { wireProtocolCommand: false });\r\n\r\n    // There are cases where we need to flag the read preference not to get sent in\r\n    // the command, such as pre-5.0 servers attempting to perform an aggregate write\r\n    // with a non-primary read preference. In this case the effective read preference\r\n    // (primary) is not the same as the provided and must be removed completely.\r\n    if (finalOptions.omitReadPreference) {\r\n      delete finalOptions.readPreference;\r\n    }\r\n\r\n    const session = finalOptions.session;\r\n    const conn = session?.pinnedConnection;\r\n\r\n    // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\r\n    //       (and prevent them from being checked back in) at the point of operation execution.\r\n    //       This should be considered as part of the work for NODE-2882\r\n    // NOTE:\r\n    //       When incrementing operation count, it's important that we increment it before we\r\n    //       attempt to check out a connection from the pool.  This ensures that operations that\r\n    //       are waiting for a connection are included in the operation count.  Load balanced\r\n    //       mode will only ever have a single server, so the operation count doesn't matter.\r\n    //       Incrementing the operation count above the logic to handle load balanced mode would\r\n    //       require special logic to decrement it again, or would double increment (the load\r\n    //       balanced code makes a recursive call).  Instead, we increment the count after this\r\n    //       check.\r\n    if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\r\n      this.pool.checkOut((err, checkedOut) => {\r\n        if (err || checkedOut == null) {\r\n          if (callback) return callback(err);\r\n          return;\r\n        }\r\n\r\n        session.pin(checkedOut);\r\n        this.command(ns, cmd, finalOptions, callback);\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.incrementOperationCount();\r\n\r\n    this.pool.withConnection(\r\n      conn,\r\n      (err, conn, cb) => {\r\n        if (err || !conn) {\r\n          this.decrementOperationCount();\r\n          if (!err) {\r\n            return cb(new MongoRuntimeError('Failed to create connection without error'));\r\n          }\r\n          if (!(err instanceof PoolClearedError)) {\r\n            this.handleError(err);\r\n          }\r\n          return cb(err);\r\n        }\r\n\r\n        conn.command(\r\n          ns,\r\n          cmd,\r\n          finalOptions,\r\n          makeOperationHandler(this, conn, cmd, finalOptions, (error, response) => {\r\n            this.decrementOperationCount();\r\n            cb(error, response);\r\n          })\r\n        );\r\n      },\r\n      callback\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handle SDAM error\r\n   * @internal\r\n   */\r\n  handleError(error: AnyError, connection?: Connection) {\r\n    if (!(error instanceof MongoError)) {\r\n      return;\r\n    }\r\n\r\n    const isStaleError =\r\n      error.connectionGeneration && error.connectionGeneration < this.pool.generation;\r\n    if (isStaleError) {\r\n      return;\r\n    }\r\n\r\n    const isNetworkNonTimeoutError =\r\n      error instanceof MongoNetworkError && !(error instanceof MongoNetworkTimeoutError);\r\n    const isNetworkTimeoutBeforeHandshakeError = isNetworkErrorBeforeHandshake(error);\r\n    const isAuthHandshakeError = error.hasErrorLabel(MongoErrorLabel.HandshakeError);\r\n    if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\r\n      // In load balanced mode we never mark the server as unknown and always\r\n      // clear for the specific service id.\r\n      if (!this.loadBalanced) {\r\n        error.addErrorLabel(MongoErrorLabel.ResetPool);\r\n        markServerUnknown(this, error);\r\n      } else if (connection) {\r\n        this.pool.clear({ serviceId: connection.serviceId });\r\n      }\r\n    } else {\r\n      if (isSDAMUnrecoverableError(error)) {\r\n        if (shouldHandleStateChangeError(this, error)) {\r\n          const shouldClearPool = maxWireVersion(this) <= 7 || isNodeShuttingDownError(error);\r\n          if (this.loadBalanced && connection && shouldClearPool) {\r\n            this.pool.clear({ serviceId: connection.serviceId });\r\n          }\r\n\r\n          if (!this.loadBalanced) {\r\n            if (shouldClearPool) {\r\n              error.addErrorLabel(MongoErrorLabel.ResetPool);\r\n            }\r\n            markServerUnknown(this, error);\r\n            process.nextTick(() => this.requestCheck());\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decrement the operation count, returning the new count.\r\n   */\r\n  private decrementOperationCount(): number {\r\n    return (this.s.operationCount -= 1);\r\n  }\r\n\r\n  /**\r\n   * Increment the operation count, returning the new count.\r\n   */\r\n  private incrementOperationCount(): number {\r\n    return (this.s.operationCount += 1);\r\n  }\r\n}\r\n\r\nfunction calculateRoundTripTime(oldRtt: number, duration: number): number {\r\n  if (oldRtt === -1) {\r\n    return duration;\r\n  }\r\n\r\n  const alpha = 0.2;\r\n  return alpha * duration + (1 - alpha) * oldRtt;\r\n}\r\n\r\nfunction markServerUnknown(server: Server, error?: MongoServerError) {\r\n  // Load balancer servers can never be marked unknown.\r\n  if (server.loadBalanced) {\r\n    return;\r\n  }\r\n\r\n  if (error instanceof MongoNetworkError && !(error instanceof MongoNetworkTimeoutError)) {\r\n    server[kMonitor]?.reset();\r\n  }\r\n\r\n  server.emit(\r\n    Server.DESCRIPTION_RECEIVED,\r\n    new ServerDescription(server.description.hostAddress, undefined, { error })\r\n  );\r\n}\r\n\r\nfunction isPinnableCommand(cmd: Document, session?: ClientSession): boolean {\r\n  if (session) {\r\n    return (\r\n      session.inTransaction() ||\r\n      'aggregate' in cmd ||\r\n      'find' in cmd ||\r\n      'getMore' in cmd ||\r\n      'listCollections' in cmd ||\r\n      'listIndexes' in cmd\r\n    );\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction connectionIsStale(pool: ConnectionPool, connection: Connection) {\r\n  if (connection.serviceId) {\r\n    return (\r\n      connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString())\r\n    );\r\n  }\r\n\r\n  return connection.generation !== pool.generation;\r\n}\r\n\r\nfunction shouldHandleStateChangeError(server: Server, err: MongoError) {\r\n  const etv = err.topologyVersion;\r\n  const stv = server.description.topologyVersion;\r\n  return compareTopologyVersion(stv, etv) < 0;\r\n}\r\n\r\nfunction inActiveTransaction(session: ClientSession | undefined, cmd: Document) {\r\n  return session && session.inTransaction() && !isTransactionCommand(cmd);\r\n}\r\n\r\n/** this checks the retryWrites option passed down from the client options, it\r\n * does not check if the server supports retryable writes */\r\nfunction isRetryableWritesEnabled(topology: Topology) {\r\n  return topology.s.options.retryWrites !== false;\r\n}\r\n\r\nfunction makeOperationHandler(\r\n  server: Server,\r\n  connection: Connection,\r\n  cmd: Document,\r\n  options: CommandOptions | GetMoreOptions | undefined,\r\n  callback: Callback\r\n): Callback {\r\n  const session = options?.session;\r\n  return function handleOperationResult(error, result) {\r\n    // We should not swallow an error if it is present.\r\n    if (error == null && result != null) {\r\n      return callback(undefined, result);\r\n    }\r\n\r\n    if (options != null && 'noResponse' in options && options.noResponse === true) {\r\n      return callback(undefined, null);\r\n    }\r\n\r\n    if (!error) {\r\n      return callback(new MongoUnexpectedServerResponseError('Empty response with no error'));\r\n    }\r\n\r\n    if (!(error instanceof MongoError)) {\r\n      // Node.js or some other error we have not special handling for\r\n      return callback(error);\r\n    }\r\n\r\n    if (connectionIsStale(server.pool, connection)) {\r\n      return callback(error);\r\n    }\r\n\r\n    if (error instanceof MongoNetworkError) {\r\n      if (session && !session.hasEnded && session.serverSession) {\r\n        session.serverSession.isDirty = true;\r\n      }\r\n\r\n      // inActiveTransaction check handles commit and abort.\r\n      if (\r\n        inActiveTransaction(session, cmd) &&\r\n        !error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\r\n      ) {\r\n        error.addErrorLabel(MongoErrorLabel.TransientTransactionError);\r\n      }\r\n\r\n      if (\r\n        (isRetryableWritesEnabled(server.topology) || isTransactionCommand(cmd)) &&\r\n        supportsRetryableWrites(server) &&\r\n        !inActiveTransaction(session, cmd)\r\n      ) {\r\n        error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\r\n      }\r\n    } else {\r\n      if (\r\n        (isRetryableWritesEnabled(server.topology) || isTransactionCommand(cmd)) &&\r\n        needsRetryableWriteLabel(error, maxWireVersion(server)) &&\r\n        !inActiveTransaction(session, cmd)\r\n      ) {\r\n        error.addErrorLabel(MongoErrorLabel.RetryableWriteError);\r\n      }\r\n    }\r\n\r\n    if (\r\n      session &&\r\n      session.isPinned &&\r\n      error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\r\n    ) {\r\n      session.unpin({ force: true });\r\n    }\r\n\r\n    server.handleError(error, connection);\r\n\r\n    return callback(error);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}