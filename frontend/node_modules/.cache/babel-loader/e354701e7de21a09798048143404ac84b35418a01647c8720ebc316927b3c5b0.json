{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compareTopologyVersion = exports.parseServerType = exports.ServerDescription = void 0;\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst WRITABLE_SERVER_TYPES = new Set([common_1.ServerType.RSPrimary, common_1.ServerType.Standalone, common_1.ServerType.Mongos, common_1.ServerType.LoadBalancer]);\nconst DATA_BEARING_SERVER_TYPES = new Set([common_1.ServerType.RSPrimary, common_1.ServerType.RSSecondary, common_1.ServerType.Mongos, common_1.ServerType.Standalone, common_1.ServerType.LoadBalancer]);\n/**\r\n * The client's view of a single server, based on the most recent hello outcome.\r\n *\r\n * Internal type, not meant to be directly instantiated\r\n * @public\r\n */\nclass ServerDescription {\n  /**\r\n   * Create a ServerDescription\r\n   * @internal\r\n   *\r\n   * @param address - The address of the server\r\n   * @param hello - An optional hello response for this server\r\n   */\n  constructor(address, hello, options = {}) {\n    if (address == null || address === '') {\n      throw new error_1.MongoRuntimeError('ServerDescription must be provided with a non-empty address');\n    }\n    this.address = typeof address === 'string' ? utils_1.HostAddress.fromString(address).toString() // Use HostAddress to normalize\n    : address.toString();\n    this.type = parseServerType(hello, options);\n    this.hosts = hello?.hosts?.map(host => host.toLowerCase()) ?? [];\n    this.passives = hello?.passives?.map(host => host.toLowerCase()) ?? [];\n    this.arbiters = hello?.arbiters?.map(host => host.toLowerCase()) ?? [];\n    this.tags = hello?.tags ?? {};\n    this.minWireVersion = hello?.minWireVersion ?? 0;\n    this.maxWireVersion = hello?.maxWireVersion ?? 0;\n    this.roundTripTime = options?.roundTripTime ?? -1;\n    this.lastUpdateTime = (0, utils_1.now)();\n    this.lastWriteDate = hello?.lastWrite?.lastWriteDate ?? 0;\n    this.error = options.error ?? null;\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    this.topologyVersion = this.error?.topologyVersion ?? hello?.topologyVersion ?? null;\n    this.setName = hello?.setName ?? null;\n    this.setVersion = hello?.setVersion ?? null;\n    this.electionId = hello?.electionId ?? null;\n    this.logicalSessionTimeoutMinutes = hello?.logicalSessionTimeoutMinutes ?? null;\n    this.primary = hello?.primary ?? null;\n    this.me = hello?.me?.toLowerCase() ?? null;\n    this.$clusterTime = hello?.$clusterTime ?? null;\n  }\n  get hostAddress() {\n    return utils_1.HostAddress.fromString(this.address);\n  }\n  get allHosts() {\n    return this.hosts.concat(this.arbiters).concat(this.passives);\n  }\n  /** Is this server available for reads*/\n  get isReadable() {\n    return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n  }\n  /** Is this server data bearing */\n  get isDataBearing() {\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\n  }\n  /** Is this server available for writes */\n  get isWritable() {\n    return WRITABLE_SERVER_TYPES.has(this.type);\n  }\n  get host() {\n    const chopLength = `:${this.port}`.length;\n    return this.address.slice(0, -chopLength);\n  }\n  get port() {\n    const port = this.address.split(':').pop();\n    return port ? Number.parseInt(port, 10) : 27017;\n  }\n  /**\r\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\r\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\r\n   */\n  equals(other) {\n    // Despite using the comparator that would determine a nullish topologyVersion as greater than\n    // for equality we should only always perform direct equality comparison\n    const topologyVersionsEqual = this.topologyVersion === other?.topologyVersion || compareTopologyVersion(this.topologyVersion, other?.topologyVersion) === 0;\n    const electionIdsEqual = this.electionId != null && other?.electionId != null ? (0, utils_1.compareObjectId)(this.electionId, other.electionId) === 0 : this.electionId === other?.electionId;\n    return other != null && (0, utils_1.errorStrictEqual)(this.error, other.error) && this.type === other.type && this.minWireVersion === other.minWireVersion && (0, utils_1.arrayStrictEqual)(this.hosts, other.hosts) && tagsStrictEqual(this.tags, other.tags) && this.setName === other.setName && this.setVersion === other.setVersion && electionIdsEqual && this.primary === other.primary && this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes && topologyVersionsEqual;\n  }\n}\nexports.ServerDescription = ServerDescription;\n// Parses a `hello` message and determines the server type\nfunction parseServerType(hello, options) {\n  if (options?.loadBalanced) {\n    return common_1.ServerType.LoadBalancer;\n  }\n  if (!hello || !hello.ok) {\n    return common_1.ServerType.Unknown;\n  }\n  if (hello.isreplicaset) {\n    return common_1.ServerType.RSGhost;\n  }\n  if (hello.msg && hello.msg === 'isdbgrid') {\n    return common_1.ServerType.Mongos;\n  }\n  if (hello.setName) {\n    if (hello.hidden) {\n      return common_1.ServerType.RSOther;\n    } else if (hello.isWritablePrimary) {\n      return common_1.ServerType.RSPrimary;\n    } else if (hello.secondary) {\n      return common_1.ServerType.RSSecondary;\n    } else if (hello.arbiterOnly) {\n      return common_1.ServerType.RSArbiter;\n    } else {\n      return common_1.ServerType.RSOther;\n    }\n  }\n  return common_1.ServerType.Standalone;\n}\nexports.parseServerType = parseServerType;\nfunction tagsStrictEqual(tags, tags2) {\n  const tagsKeys = Object.keys(tags);\n  const tags2Keys = Object.keys(tags2);\n  return tagsKeys.length === tags2Keys.length && tagsKeys.every(key => tags2[key] === tags[key]);\n}\n/**\r\n * Compares two topology versions.\r\n *\r\n * 1. If the response topologyVersion is unset or the ServerDescription's\r\n *    topologyVersion is null, the client MUST assume the response is more recent.\r\n * 1. If the response's topologyVersion.processId is not equal to the\r\n *    ServerDescription's, the client MUST assume the response is more recent.\r\n * 1. If the response's topologyVersion.processId is equal to the\r\n *    ServerDescription's, the client MUST use the counter field to determine\r\n *    which topologyVersion is more recent.\r\n *\r\n * ```ts\r\n * currentTv <   newTv === -1\r\n * currentTv === newTv === 0\r\n * currentTv >   newTv === 1\r\n * ```\r\n */\nfunction compareTopologyVersion(currentTv, newTv) {\n  if (currentTv == null || newTv == null) {\n    return -1;\n  }\n  if (!currentTv.processId.equals(newTv.processId)) {\n    return -1;\n  }\n  // TODO(NODE-2674): Preserve int64 sent from MongoDB\n  const currentCounter = bson_1.Long.isLong(currentTv.counter) ? currentTv.counter : bson_1.Long.fromNumber(currentTv.counter);\n  const newCounter = bson_1.Long.isLong(newTv.counter) ? newTv.counter : bson_1.Long.fromNumber(newTv.counter);\n  return currentCounter.compare(newCounter);\n}\nexports.compareTopologyVersion = compareTopologyVersion;","map":{"version":3,"mappings":"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","names":["WRITABLE_SERVER_TYPES","Set","common_1","RSPrimary","Standalone","Mongos","LoadBalancer","DATA_BEARING_SERVER_TYPES","RSSecondary","ServerDescription","constructor","address","hello","options","error_1","utils_1","fromString","toString","type","parseServerType","hosts","map","host","toLowerCase","passives","arbiters","tags","minWireVersion","maxWireVersion","roundTripTime","lastUpdateTime","lastWriteDate","lastWrite","error","topologyVersion","setName","setVersion","electionId","logicalSessionTimeoutMinutes","primary","me","$clusterTime","hostAddress","allHosts","concat","isReadable","isWritable","isDataBearing","has","chopLength","port","length","slice","split","pop","Number","parseInt","equals","other","topologyVersionsEqual","compareTopologyVersion","electionIdsEqual","tagsStrictEqual","exports","loadBalanced","ok","Unknown","isreplicaset","RSGhost","msg","hidden","RSOther","isWritablePrimary","secondary","arbiterOnly","RSArbiter","tags2","tagsKeys","Object","keys","tags2Keys","every","key","currentTv","newTv","processId","currentCounter","bson_1","isLong","counter","fromNumber","newCounter","compare"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\sdam\\server_description.ts"],"sourcesContent":["import { type Document, Long, type ObjectId } from '../bson';\r\nimport { type MongoError, MongoRuntimeError, type MongoServerError } from '../error';\r\nimport { arrayStrictEqual, compareObjectId, errorStrictEqual, HostAddress, now } from '../utils';\r\nimport type { ClusterTime } from './common';\r\nimport { ServerType } from './common';\r\n\r\nconst WRITABLE_SERVER_TYPES = new Set<ServerType>([\r\n  ServerType.RSPrimary,\r\n  ServerType.Standalone,\r\n  ServerType.Mongos,\r\n  ServerType.LoadBalancer\r\n]);\r\n\r\nconst DATA_BEARING_SERVER_TYPES = new Set<ServerType>([\r\n  ServerType.RSPrimary,\r\n  ServerType.RSSecondary,\r\n  ServerType.Mongos,\r\n  ServerType.Standalone,\r\n  ServerType.LoadBalancer\r\n]);\r\n\r\n/** @public */\r\nexport interface TopologyVersion {\r\n  processId: ObjectId;\r\n  counter: Long;\r\n}\r\n\r\n/** @public */\r\nexport type TagSet = { [key: string]: string };\r\n\r\n/** @internal */\r\nexport interface ServerDescriptionOptions {\r\n  /** An Error used for better reporting debugging */\r\n  error?: MongoServerError;\r\n\r\n  /** The round trip time to ping this server (in ms) */\r\n  roundTripTime?: number;\r\n\r\n  /** If the client is in load balancing mode. */\r\n  loadBalanced?: boolean;\r\n}\r\n\r\n/**\r\n * The client's view of a single server, based on the most recent hello outcome.\r\n *\r\n * Internal type, not meant to be directly instantiated\r\n * @public\r\n */\r\nexport class ServerDescription {\r\n  address: string;\r\n  type: ServerType;\r\n  hosts: string[];\r\n  passives: string[];\r\n  arbiters: string[];\r\n  tags: TagSet;\r\n  error: MongoError | null;\r\n  topologyVersion: TopologyVersion | null;\r\n  minWireVersion: number;\r\n  maxWireVersion: number;\r\n  roundTripTime: number;\r\n  lastUpdateTime: number;\r\n  lastWriteDate: number;\r\n  me: string | null;\r\n  primary: string | null;\r\n  setName: string | null;\r\n  setVersion: number | null;\r\n  electionId: ObjectId | null;\r\n  logicalSessionTimeoutMinutes: number | null;\r\n\r\n  // NOTE: does this belong here? It seems we should gossip the cluster time at the CMAP level\r\n  $clusterTime?: ClusterTime;\r\n\r\n  /**\r\n   * Create a ServerDescription\r\n   * @internal\r\n   *\r\n   * @param address - The address of the server\r\n   * @param hello - An optional hello response for this server\r\n   */\r\n  constructor(\r\n    address: HostAddress | string,\r\n    hello?: Document,\r\n    options: ServerDescriptionOptions = {}\r\n  ) {\r\n    if (address == null || address === '') {\r\n      throw new MongoRuntimeError('ServerDescription must be provided with a non-empty address');\r\n    }\r\n\r\n    this.address =\r\n      typeof address === 'string'\r\n        ? HostAddress.fromString(address).toString() // Use HostAddress to normalize\r\n        : address.toString();\r\n    this.type = parseServerType(hello, options);\r\n    this.hosts = hello?.hosts?.map((host: string) => host.toLowerCase()) ?? [];\r\n    this.passives = hello?.passives?.map((host: string) => host.toLowerCase()) ?? [];\r\n    this.arbiters = hello?.arbiters?.map((host: string) => host.toLowerCase()) ?? [];\r\n    this.tags = hello?.tags ?? {};\r\n    this.minWireVersion = hello?.minWireVersion ?? 0;\r\n    this.maxWireVersion = hello?.maxWireVersion ?? 0;\r\n    this.roundTripTime = options?.roundTripTime ?? -1;\r\n    this.lastUpdateTime = now();\r\n    this.lastWriteDate = hello?.lastWrite?.lastWriteDate ?? 0;\r\n    this.error = options.error ?? null;\r\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\r\n    this.topologyVersion = this.error?.topologyVersion ?? hello?.topologyVersion ?? null;\r\n    this.setName = hello?.setName ?? null;\r\n    this.setVersion = hello?.setVersion ?? null;\r\n    this.electionId = hello?.electionId ?? null;\r\n    this.logicalSessionTimeoutMinutes = hello?.logicalSessionTimeoutMinutes ?? null;\r\n    this.primary = hello?.primary ?? null;\r\n    this.me = hello?.me?.toLowerCase() ?? null;\r\n    this.$clusterTime = hello?.$clusterTime ?? null;\r\n  }\r\n\r\n  get hostAddress(): HostAddress {\r\n    return HostAddress.fromString(this.address);\r\n  }\r\n\r\n  get allHosts(): string[] {\r\n    return this.hosts.concat(this.arbiters).concat(this.passives);\r\n  }\r\n\r\n  /** Is this server available for reads*/\r\n  get isReadable(): boolean {\r\n    return this.type === ServerType.RSSecondary || this.isWritable;\r\n  }\r\n\r\n  /** Is this server data bearing */\r\n  get isDataBearing(): boolean {\r\n    return DATA_BEARING_SERVER_TYPES.has(this.type);\r\n  }\r\n\r\n  /** Is this server available for writes */\r\n  get isWritable(): boolean {\r\n    return WRITABLE_SERVER_TYPES.has(this.type);\r\n  }\r\n\r\n  get host(): string {\r\n    const chopLength = `:${this.port}`.length;\r\n    return this.address.slice(0, -chopLength);\r\n  }\r\n\r\n  get port(): number {\r\n    const port = this.address.split(':').pop();\r\n    return port ? Number.parseInt(port, 10) : 27017;\r\n  }\r\n\r\n  /**\r\n   * Determines if another `ServerDescription` is equal to this one per the rules defined\r\n   * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\r\n   */\r\n  equals(other?: ServerDescription | null): boolean {\r\n    // Despite using the comparator that would determine a nullish topologyVersion as greater than\r\n    // for equality we should only always perform direct equality comparison\r\n    const topologyVersionsEqual =\r\n      this.topologyVersion === other?.topologyVersion ||\r\n      compareTopologyVersion(this.topologyVersion, other?.topologyVersion) === 0;\r\n\r\n    const electionIdsEqual =\r\n      this.electionId != null && other?.electionId != null\r\n        ? compareObjectId(this.electionId, other.electionId) === 0\r\n        : this.electionId === other?.electionId;\r\n\r\n    return (\r\n      other != null &&\r\n      errorStrictEqual(this.error, other.error) &&\r\n      this.type === other.type &&\r\n      this.minWireVersion === other.minWireVersion &&\r\n      arrayStrictEqual(this.hosts, other.hosts) &&\r\n      tagsStrictEqual(this.tags, other.tags) &&\r\n      this.setName === other.setName &&\r\n      this.setVersion === other.setVersion &&\r\n      electionIdsEqual &&\r\n      this.primary === other.primary &&\r\n      this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\r\n      topologyVersionsEqual\r\n    );\r\n  }\r\n}\r\n\r\n// Parses a `hello` message and determines the server type\r\nexport function parseServerType(hello?: Document, options?: ServerDescriptionOptions): ServerType {\r\n  if (options?.loadBalanced) {\r\n    return ServerType.LoadBalancer;\r\n  }\r\n\r\n  if (!hello || !hello.ok) {\r\n    return ServerType.Unknown;\r\n  }\r\n\r\n  if (hello.isreplicaset) {\r\n    return ServerType.RSGhost;\r\n  }\r\n\r\n  if (hello.msg && hello.msg === 'isdbgrid') {\r\n    return ServerType.Mongos;\r\n  }\r\n\r\n  if (hello.setName) {\r\n    if (hello.hidden) {\r\n      return ServerType.RSOther;\r\n    } else if (hello.isWritablePrimary) {\r\n      return ServerType.RSPrimary;\r\n    } else if (hello.secondary) {\r\n      return ServerType.RSSecondary;\r\n    } else if (hello.arbiterOnly) {\r\n      return ServerType.RSArbiter;\r\n    } else {\r\n      return ServerType.RSOther;\r\n    }\r\n  }\r\n\r\n  return ServerType.Standalone;\r\n}\r\n\r\nfunction tagsStrictEqual(tags: TagSet, tags2: TagSet): boolean {\r\n  const tagsKeys = Object.keys(tags);\r\n  const tags2Keys = Object.keys(tags2);\r\n\r\n  return (\r\n    tagsKeys.length === tags2Keys.length &&\r\n    tagsKeys.every((key: string) => tags2[key] === tags[key])\r\n  );\r\n}\r\n\r\n/**\r\n * Compares two topology versions.\r\n *\r\n * 1. If the response topologyVersion is unset or the ServerDescription's\r\n *    topologyVersion is null, the client MUST assume the response is more recent.\r\n * 1. If the response's topologyVersion.processId is not equal to the\r\n *    ServerDescription's, the client MUST assume the response is more recent.\r\n * 1. If the response's topologyVersion.processId is equal to the\r\n *    ServerDescription's, the client MUST use the counter field to determine\r\n *    which topologyVersion is more recent.\r\n *\r\n * ```ts\r\n * currentTv <   newTv === -1\r\n * currentTv === newTv === 0\r\n * currentTv >   newTv === 1\r\n * ```\r\n */\r\nexport function compareTopologyVersion(\r\n  currentTv?: TopologyVersion | null,\r\n  newTv?: TopologyVersion | null\r\n): 0 | -1 | 1 {\r\n  if (currentTv == null || newTv == null) {\r\n    return -1;\r\n  }\r\n\r\n  if (!currentTv.processId.equals(newTv.processId)) {\r\n    return -1;\r\n  }\r\n\r\n  // TODO(NODE-2674): Preserve int64 sent from MongoDB\r\n  const currentCounter = Long.isLong(currentTv.counter)\r\n    ? currentTv.counter\r\n    : Long.fromNumber(currentTv.counter);\r\n  const newCounter = Long.isLong(newTv.counter) ? newTv.counter : Long.fromNumber(newTv.counter);\r\n\r\n  return currentCounter.compare(newCounter);\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}