{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucketReadStream = void 0;\nconst stream_1 = require(\"stream\");\nconst error_1 = require(\"../error\");\n/**\r\n * A readable stream that enables you to read buffers from GridFS.\r\n *\r\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\r\n * @public\r\n */\nclass GridFSBucketReadStream extends stream_1.Readable {\n  /**\r\n   * @param chunks - Handle for chunks collection\r\n   * @param files - Handle for files collection\r\n   * @param readPreference - The read preference to use\r\n   * @param filter - The filter to use to find the file document\r\n   * @internal\r\n   */\n  constructor(chunks, files, readPreference, filter, options) {\n    super();\n    this.s = {\n      bytesToTrim: 0,\n      bytesToSkip: 0,\n      bytesRead: 0,\n      chunks,\n      expected: 0,\n      files,\n      filter,\n      init: false,\n      expectedEnd: 0,\n      options: {\n        start: 0,\n        end: 0,\n        ...options\n      },\n      readPreference\n    };\n  }\n  /**\r\n   * Reads from the cursor and pushes to the stream.\r\n   * Private Impl, do not call directly\r\n   * @internal\r\n   */\n  _read() {\n    if (this.destroyed) return;\n    waitForFile(this, () => doRead(this));\n  }\n  /**\r\n   * Sets the 0-based offset in bytes to start streaming from. Throws\r\n   * an error if this stream has entered flowing mode\r\n   * (e.g. if you've already called `on('data')`)\r\n   *\r\n   * @param start - 0-based offset in bytes to start streaming from\r\n   */\n  start(start = 0) {\n    throwIfInitialized(this);\n    this.s.options.start = start;\n    return this;\n  }\n  /**\r\n   * Sets the 0-based offset in bytes to start streaming from. Throws\r\n   * an error if this stream has entered flowing mode\r\n   * (e.g. if you've already called `on('data')`)\r\n   *\r\n   * @param end - Offset in bytes to stop reading at\r\n   */\n  end(end = 0) {\n    throwIfInitialized(this);\n    this.s.options.end = end;\n    return this;\n  }\n  /**\r\n   * Marks this stream as aborted (will never push another `data` event)\r\n   * and kills the underlying cursor. Will emit the 'end' event, and then\r\n   * the 'close' event once the cursor is successfully killed.\r\n   */\n  async abort() {\n    this.push(null);\n    this.destroyed = true;\n    if (this.s.cursor) {\n      try {\n        await this.s.cursor.close();\n      } finally {\n        this.emit(GridFSBucketReadStream.CLOSE);\n      }\n    } else {\n      if (!this.s.init) {\n        // If not initialized, fire close event because we will never\n        // get a cursor\n        this.emit(GridFSBucketReadStream.CLOSE);\n      }\n    }\n  }\n}\n/**\r\n * An error occurred\r\n * @event\r\n */\nGridFSBucketReadStream.ERROR = 'error';\n/**\r\n * Fires when the stream loaded the file document corresponding to the provided id.\r\n * @event\r\n */\nGridFSBucketReadStream.FILE = 'file';\n/**\r\n * Emitted when a chunk of data is available to be consumed.\r\n * @event\r\n */\nGridFSBucketReadStream.DATA = 'data';\n/**\r\n * Fired when the stream is exhausted (no more data events).\r\n * @event\r\n */\nGridFSBucketReadStream.END = 'end';\n/**\r\n * Fired when the stream is exhausted and the underlying cursor is killed\r\n * @event\r\n */\nGridFSBucketReadStream.CLOSE = 'close';\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\nfunction throwIfInitialized(stream) {\n  if (stream.s.init) {\n    throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n  }\n}\nfunction doRead(stream) {\n  if (stream.destroyed) return;\n  if (!stream.s.cursor) return;\n  if (!stream.s.file) return;\n  const handleReadResult = ({\n    error,\n    doc\n  }) => {\n    if (stream.destroyed) {\n      return;\n    }\n    if (error) {\n      stream.emit(GridFSBucketReadStream.ERROR, error);\n      return;\n    }\n    if (!doc) {\n      stream.push(null);\n      stream.s.cursor?.close().then(() => {\n        stream.emit(GridFSBucketReadStream.CLOSE);\n      }, error => {\n        stream.emit(GridFSBucketReadStream.ERROR, error);\n      });\n      return;\n    }\n    if (!stream.s.file) return;\n    const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n    const expectedN = stream.s.expected++;\n    const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n    if (doc.n > expectedN) {\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n    }\n    if (doc.n < expectedN) {\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n    }\n    let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n    if (buf.byteLength !== expectedLength) {\n      if (bytesRemaining <= 0) {\n        return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`));\n      }\n      return stream.emit(GridFSBucketReadStream.ERROR, new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n    }\n    stream.s.bytesRead += buf.byteLength;\n    if (buf.byteLength === 0) {\n      return stream.push(null);\n    }\n    let sliceStart = null;\n    let sliceEnd = null;\n    if (stream.s.bytesToSkip != null) {\n      sliceStart = stream.s.bytesToSkip;\n      stream.s.bytesToSkip = 0;\n    }\n    const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n    const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n    if (atEndOfStream && stream.s.bytesToTrim != null) {\n      sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n    } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n      sliceEnd = bytesLeftToRead;\n    }\n    if (sliceStart != null || sliceEnd != null) {\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n    }\n    stream.push(buf);\n    return;\n  };\n  stream.s.cursor.next().then(doc => handleReadResult({\n    error: null,\n    doc\n  }), error => handleReadResult({\n    error,\n    doc: null\n  }));\n}\nfunction init(stream) {\n  const findOneOptions = {};\n  if (stream.s.readPreference) {\n    findOneOptions.readPreference = stream.s.readPreference;\n  }\n  if (stream.s.options && stream.s.options.sort) {\n    findOneOptions.sort = stream.s.options.sort;\n  }\n  if (stream.s.options && stream.s.options.skip) {\n    findOneOptions.skip = stream.s.options.skip;\n  }\n  const handleReadResult = ({\n    error,\n    doc\n  }) => {\n    if (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n    if (!doc) {\n      const identifier = stream.s.filter._id ? stream.s.filter._id.toString() : stream.s.filter.filename;\n      const errmsg = `FileNotFound: file ${identifier} was not found`;\n      // TODO(NODE-3483)\n      const err = new error_1.MongoRuntimeError(errmsg);\n      err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n      return stream.emit(GridFSBucketReadStream.ERROR, err);\n    }\n    // If document is empty, kill the stream immediately and don't\n    // execute any reads\n    if (doc.length <= 0) {\n      stream.push(null);\n      return;\n    }\n    if (stream.destroyed) {\n      // If user destroys the stream before we have a cursor, wait\n      // until the query is done to say we're 'closed' because we can't\n      // cancel a query.\n      stream.emit(GridFSBucketReadStream.CLOSE);\n      return;\n    }\n    try {\n      stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n    const filter = {\n      files_id: doc._id\n    };\n    // Currently (MongoDB 3.4.4) skip function does not support the index,\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\n    // As work around we use $gte on the \"n\" field.\n    if (stream.s.options && stream.s.options.start != null) {\n      const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n      if (skip > 0) {\n        filter['n'] = {\n          $gte: skip\n        };\n      }\n    }\n    stream.s.cursor = stream.s.chunks.find(filter).sort({\n      n: 1\n    });\n    if (stream.s.readPreference) {\n      stream.s.cursor.withReadPreference(stream.s.readPreference);\n    }\n    stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n    stream.s.file = doc;\n    try {\n      stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n    } catch (error) {\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\n    }\n    stream.emit(GridFSBucketReadStream.FILE, doc);\n    return;\n  };\n  stream.s.files.findOne(stream.s.filter, findOneOptions).then(doc => handleReadResult({\n    error: null,\n    doc\n  }), error => handleReadResult({\n    error,\n    doc: null\n  }));\n}\nfunction waitForFile(stream, callback) {\n  if (stream.s.file) {\n    return callback();\n  }\n  if (!stream.s.init) {\n    init(stream);\n    stream.s.init = true;\n  }\n  stream.once('file', () => {\n    callback();\n  });\n}\nfunction handleStartOption(stream, doc, options) {\n  if (options && options.start != null) {\n    if (options.start > doc.length) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n    }\n    if (options.start < 0) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n    }\n    if (options.end != null && options.end < options.start) {\n      throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n    }\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\n    return options.start - stream.s.bytesRead;\n  }\n  throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n  if (options && options.end != null) {\n    if (options.end > doc.length) {\n      throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n    }\n    if (options.start == null || options.start < 0) {\n      throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n    }\n    const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n  }\n  throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}","map":{"version":3,"mappings":"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","names":["GridFSBucketReadStream","stream_1","constructor","chunks","files","readPreference","filter","options","s","bytesToTrim","bytesToSkip","bytesRead","expected","init","expectedEnd","start","end","_read","destroyed","waitForFile","doRead","throwIfInitialized","abort","push","cursor","close","emit","CLOSE","exports","stream","error_1","file","handleReadResult","error","doc","ERROR","then","bytesRemaining","length","expectedN","expectedLength","Math","min","chunkSize","n","buf","Buffer","isBuffer","data","buffer","byteLength","sliceStart","sliceEnd","atEndOfStream","bytesLeftToRead","slice","next","findOneOptions","sort","skip","identifier","_id","toString","filename","errmsg","err","code","handleStartOption","files_id","floor","$gte","find","withReadPreference","ceil","handleEndOption","FILE","findOne","callback","once","limit"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\gridfs\\download.ts"],"sourcesContent":["import { Readable } from 'stream';\r\n\r\nimport type { Document, ObjectId } from '../bson';\r\nimport type { Collection } from '../collection';\r\nimport type { FindCursor } from '../cursor/find_cursor';\r\nimport {\r\n  MongoGridFSChunkError,\r\n  MongoGridFSStreamError,\r\n  MongoInvalidArgumentError,\r\n  MongoRuntimeError\r\n} from '../error';\r\nimport type { FindOptions } from '../operations/find';\r\nimport type { ReadPreference } from '../read_preference';\r\nimport type { Sort } from '../sort';\r\nimport type { Callback } from '../utils';\r\nimport type { GridFSChunk } from './upload';\r\n\r\n/** @public */\r\nexport interface GridFSBucketReadStreamOptions {\r\n  sort?: Sort;\r\n  skip?: number;\r\n  /**\r\n   * 0-indexed non-negative byte offset from the beginning of the file\r\n   */\r\n  start?: number;\r\n  /**\r\n   * 0-indexed non-negative byte offset to the end of the file contents\r\n   * to be returned by the stream. `end` is non-inclusive\r\n   */\r\n  end?: number;\r\n}\r\n\r\n/** @public */\r\nexport interface GridFSBucketReadStreamOptionsWithRevision extends GridFSBucketReadStreamOptions {\r\n  /** The revision number relative to the oldest file with the given filename. 0\r\n   * gets you the oldest file, 1 gets you the 2nd oldest, -1 gets you the\r\n   * newest. */\r\n  revision?: number;\r\n}\r\n\r\n/** @public */\r\nexport interface GridFSFile {\r\n  _id: ObjectId;\r\n  length: number;\r\n  chunkSize: number;\r\n  filename: string;\r\n  contentType?: string;\r\n  aliases?: string[];\r\n  metadata?: Document;\r\n  uploadDate: Date;\r\n}\r\n\r\n/** @internal */\r\nexport interface GridFSBucketReadStreamPrivate {\r\n  bytesRead: number;\r\n  bytesToTrim: number;\r\n  bytesToSkip: number;\r\n  chunks: Collection<GridFSChunk>;\r\n  cursor?: FindCursor<GridFSChunk>;\r\n  expected: number;\r\n  files: Collection<GridFSFile>;\r\n  filter: Document;\r\n  init: boolean;\r\n  expectedEnd: number;\r\n  file?: GridFSFile;\r\n  options: {\r\n    sort?: Sort;\r\n    skip?: number;\r\n    start: number;\r\n    end: number;\r\n  };\r\n  readPreference?: ReadPreference;\r\n}\r\n\r\n/**\r\n * A readable stream that enables you to read buffers from GridFS.\r\n *\r\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\r\n * @public\r\n */\r\nexport class GridFSBucketReadStream extends Readable implements NodeJS.ReadableStream {\r\n  /** @internal */\r\n  s: GridFSBucketReadStreamPrivate;\r\n\r\n  /**\r\n   * An error occurred\r\n   * @event\r\n   */\r\n  static readonly ERROR = 'error' as const;\r\n  /**\r\n   * Fires when the stream loaded the file document corresponding to the provided id.\r\n   * @event\r\n   */\r\n  static readonly FILE = 'file' as const;\r\n  /**\r\n   * Emitted when a chunk of data is available to be consumed.\r\n   * @event\r\n   */\r\n  static readonly DATA = 'data' as const;\r\n  /**\r\n   * Fired when the stream is exhausted (no more data events).\r\n   * @event\r\n   */\r\n  static readonly END = 'end' as const;\r\n  /**\r\n   * Fired when the stream is exhausted and the underlying cursor is killed\r\n   * @event\r\n   */\r\n  static readonly CLOSE = 'close' as const;\r\n\r\n  /**\r\n   * @param chunks - Handle for chunks collection\r\n   * @param files - Handle for files collection\r\n   * @param readPreference - The read preference to use\r\n   * @param filter - The filter to use to find the file document\r\n   * @internal\r\n   */\r\n  constructor(\r\n    chunks: Collection<GridFSChunk>,\r\n    files: Collection<GridFSFile>,\r\n    readPreference: ReadPreference | undefined,\r\n    filter: Document,\r\n    options?: GridFSBucketReadStreamOptions\r\n  ) {\r\n    super();\r\n    this.s = {\r\n      bytesToTrim: 0,\r\n      bytesToSkip: 0,\r\n      bytesRead: 0,\r\n      chunks,\r\n      expected: 0,\r\n      files,\r\n      filter,\r\n      init: false,\r\n      expectedEnd: 0,\r\n      options: {\r\n        start: 0,\r\n        end: 0,\r\n        ...options\r\n      },\r\n      readPreference\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reads from the cursor and pushes to the stream.\r\n   * Private Impl, do not call directly\r\n   * @internal\r\n   */\r\n  override _read(): void {\r\n    if (this.destroyed) return;\r\n    waitForFile(this, () => doRead(this));\r\n  }\r\n\r\n  /**\r\n   * Sets the 0-based offset in bytes to start streaming from. Throws\r\n   * an error if this stream has entered flowing mode\r\n   * (e.g. if you've already called `on('data')`)\r\n   *\r\n   * @param start - 0-based offset in bytes to start streaming from\r\n   */\r\n  start(start = 0): this {\r\n    throwIfInitialized(this);\r\n    this.s.options.start = start;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the 0-based offset in bytes to start streaming from. Throws\r\n   * an error if this stream has entered flowing mode\r\n   * (e.g. if you've already called `on('data')`)\r\n   *\r\n   * @param end - Offset in bytes to stop reading at\r\n   */\r\n  end(end = 0): this {\r\n    throwIfInitialized(this);\r\n    this.s.options.end = end;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Marks this stream as aborted (will never push another `data` event)\r\n   * and kills the underlying cursor. Will emit the 'end' event, and then\r\n   * the 'close' event once the cursor is successfully killed.\r\n   */\r\n  async abort(): Promise<void> {\r\n    this.push(null);\r\n    this.destroyed = true;\r\n    if (this.s.cursor) {\r\n      try {\r\n        await this.s.cursor.close();\r\n      } finally {\r\n        this.emit(GridFSBucketReadStream.CLOSE);\r\n      }\r\n    } else {\r\n      if (!this.s.init) {\r\n        // If not initialized, fire close event because we will never\r\n        // get a cursor\r\n        this.emit(GridFSBucketReadStream.CLOSE);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction throwIfInitialized(stream: GridFSBucketReadStream): void {\r\n  if (stream.s.init) {\r\n    throw new MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\r\n  }\r\n}\r\n\r\nfunction doRead(stream: GridFSBucketReadStream): void {\r\n  if (stream.destroyed) return;\r\n  if (!stream.s.cursor) return;\r\n  if (!stream.s.file) return;\r\n\r\n  const handleReadResult = ({\r\n    error,\r\n    doc\r\n  }: { error: Error; doc: null } | { error: null; doc: any }) => {\r\n    if (stream.destroyed) {\r\n      return;\r\n    }\r\n    if (error) {\r\n      stream.emit(GridFSBucketReadStream.ERROR, error);\r\n      return;\r\n    }\r\n    if (!doc) {\r\n      stream.push(null);\r\n\r\n      stream.s.cursor?.close().then(\r\n        () => {\r\n          stream.emit(GridFSBucketReadStream.CLOSE);\r\n        },\r\n        error => {\r\n          stream.emit(GridFSBucketReadStream.ERROR, error);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (!stream.s.file) return;\r\n\r\n    const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\r\n    const expectedN = stream.s.expected++;\r\n    const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\r\n    if (doc.n > expectedN) {\r\n      return stream.emit(\r\n        GridFSBucketReadStream.ERROR,\r\n        new MongoGridFSChunkError(\r\n          `ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`\r\n        )\r\n      );\r\n    }\r\n\r\n    if (doc.n < expectedN) {\r\n      return stream.emit(\r\n        GridFSBucketReadStream.ERROR,\r\n        new MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`)\r\n      );\r\n    }\r\n\r\n    let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\r\n\r\n    if (buf.byteLength !== expectedLength) {\r\n      if (bytesRemaining <= 0) {\r\n        return stream.emit(\r\n          GridFSBucketReadStream.ERROR,\r\n          new MongoGridFSChunkError(\r\n            `ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`\r\n          )\r\n        );\r\n      }\r\n\r\n      return stream.emit(\r\n        GridFSBucketReadStream.ERROR,\r\n        new MongoGridFSChunkError(\r\n          `ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`\r\n        )\r\n      );\r\n    }\r\n\r\n    stream.s.bytesRead += buf.byteLength;\r\n\r\n    if (buf.byteLength === 0) {\r\n      return stream.push(null);\r\n    }\r\n\r\n    let sliceStart = null;\r\n    let sliceEnd = null;\r\n\r\n    if (stream.s.bytesToSkip != null) {\r\n      sliceStart = stream.s.bytesToSkip;\r\n      stream.s.bytesToSkip = 0;\r\n    }\r\n\r\n    const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\r\n    const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\r\n    if (atEndOfStream && stream.s.bytesToTrim != null) {\r\n      sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\r\n    } else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\r\n      sliceEnd = bytesLeftToRead;\r\n    }\r\n\r\n    if (sliceStart != null || sliceEnd != null) {\r\n      buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\r\n    }\r\n\r\n    stream.push(buf);\r\n    return;\r\n  };\r\n\r\n  stream.s.cursor.next().then(\r\n    doc => handleReadResult({ error: null, doc }),\r\n    error => handleReadResult({ error, doc: null })\r\n  );\r\n}\r\n\r\nfunction init(stream: GridFSBucketReadStream): void {\r\n  const findOneOptions: FindOptions = {};\r\n  if (stream.s.readPreference) {\r\n    findOneOptions.readPreference = stream.s.readPreference;\r\n  }\r\n  if (stream.s.options && stream.s.options.sort) {\r\n    findOneOptions.sort = stream.s.options.sort;\r\n  }\r\n  if (stream.s.options && stream.s.options.skip) {\r\n    findOneOptions.skip = stream.s.options.skip;\r\n  }\r\n\r\n  const handleReadResult = ({\r\n    error,\r\n    doc\r\n  }: { error: Error; doc: null } | { error: null; doc: any }) => {\r\n    if (error) {\r\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\r\n    }\r\n\r\n    if (!doc) {\r\n      const identifier = stream.s.filter._id\r\n        ? stream.s.filter._id.toString()\r\n        : stream.s.filter.filename;\r\n      const errmsg = `FileNotFound: file ${identifier} was not found`;\r\n      // TODO(NODE-3483)\r\n      const err = new MongoRuntimeError(errmsg);\r\n      err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\r\n      return stream.emit(GridFSBucketReadStream.ERROR, err);\r\n    }\r\n\r\n    // If document is empty, kill the stream immediately and don't\r\n    // execute any reads\r\n    if (doc.length <= 0) {\r\n      stream.push(null);\r\n      return;\r\n    }\r\n\r\n    if (stream.destroyed) {\r\n      // If user destroys the stream before we have a cursor, wait\r\n      // until the query is done to say we're 'closed' because we can't\r\n      // cancel a query.\r\n      stream.emit(GridFSBucketReadStream.CLOSE);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\r\n    } catch (error) {\r\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\r\n    }\r\n\r\n    const filter: Document = { files_id: doc._id };\r\n\r\n    // Currently (MongoDB 3.4.4) skip function does not support the index,\r\n    // it needs to retrieve all the documents first and then skip them. (CS-25811)\r\n    // As work around we use $gte on the \"n\" field.\r\n    if (stream.s.options && stream.s.options.start != null) {\r\n      const skip = Math.floor(stream.s.options.start / doc.chunkSize);\r\n      if (skip > 0) {\r\n        filter['n'] = { $gte: skip };\r\n      }\r\n    }\r\n    stream.s.cursor = stream.s.chunks.find(filter).sort({ n: 1 });\r\n\r\n    if (stream.s.readPreference) {\r\n      stream.s.cursor.withReadPreference(stream.s.readPreference);\r\n    }\r\n\r\n    stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\r\n    stream.s.file = doc as GridFSFile;\r\n\r\n    try {\r\n      stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\r\n    } catch (error) {\r\n      return stream.emit(GridFSBucketReadStream.ERROR, error);\r\n    }\r\n\r\n    stream.emit(GridFSBucketReadStream.FILE, doc);\r\n    return;\r\n  };\r\n\r\n  stream.s.files.findOne(stream.s.filter, findOneOptions).then(\r\n    doc => handleReadResult({ error: null, doc }),\r\n    error => handleReadResult({ error, doc: null })\r\n  );\r\n}\r\n\r\nfunction waitForFile(stream: GridFSBucketReadStream, callback: Callback): void {\r\n  if (stream.s.file) {\r\n    return callback();\r\n  }\r\n\r\n  if (!stream.s.init) {\r\n    init(stream);\r\n    stream.s.init = true;\r\n  }\r\n\r\n  stream.once('file', () => {\r\n    callback();\r\n  });\r\n}\r\n\r\nfunction handleStartOption(\r\n  stream: GridFSBucketReadStream,\r\n  doc: Document,\r\n  options: GridFSBucketReadStreamOptions\r\n): number {\r\n  if (options && options.start != null) {\r\n    if (options.start > doc.length) {\r\n      throw new MongoInvalidArgumentError(\r\n        `Stream start (${options.start}) must not be more than the length of the file (${doc.length})`\r\n      );\r\n    }\r\n    if (options.start < 0) {\r\n      throw new MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\r\n    }\r\n    if (options.end != null && options.end < options.start) {\r\n      throw new MongoInvalidArgumentError(\r\n        `Stream start (${options.start}) must not be greater than stream end (${options.end})`\r\n      );\r\n    }\r\n\r\n    stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\r\n    stream.s.expected = Math.floor(options.start / doc.chunkSize);\r\n\r\n    return options.start - stream.s.bytesRead;\r\n  }\r\n  throw new MongoInvalidArgumentError('Start option must be defined');\r\n}\r\n\r\nfunction handleEndOption(\r\n  stream: GridFSBucketReadStream,\r\n  doc: Document,\r\n  cursor: FindCursor<GridFSChunk>,\r\n  options: GridFSBucketReadStreamOptions\r\n) {\r\n  if (options && options.end != null) {\r\n    if (options.end > doc.length) {\r\n      throw new MongoInvalidArgumentError(\r\n        `Stream end (${options.end}) must not be more than the length of the file (${doc.length})`\r\n      );\r\n    }\r\n    if (options.start == null || options.start < 0) {\r\n      throw new MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\r\n    }\r\n\r\n    const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\r\n\r\n    cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\r\n\r\n    stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\r\n\r\n    return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\r\n  }\r\n  throw new MongoInvalidArgumentError('End option must be defined');\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}