{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joelg\\\\Downloads\\\\MernStack-Tour-Management-main\\\\MernStack-Tour-Management-main\\\\tour-management\\\\frontend\\\\src\\\\router\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from \"react\";\nimport { Navigate, Outlet } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = () => {\n  _s();\n  const {\n    isAuthenticated,\n    role\n  } = useContext(AuthContext);\n  const isAdmin = role === \"admin\";\n  if (!isAdmin) {\n    // If the user is not an admin, redirect to a restricted access page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/restricted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if the user is authenticated\n  if (!isAuthenticated) {\n    // Redirect unauthenticated users to the login page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if the user has the \"admin\" role\n\n  // If the user is an admin, allow access to the route\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, this);\n};\n_s(ProtectedRoute, \"BwFVIZd4DrYYbxrgJGmDKZK/g0g=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useContext","Navigate","Outlet","AuthContext","ProtectedRoute","isAuthenticated","role","isAdmin"],"sources":["C:/Users/joelg/Downloads/MernStack-Tour-Management-main/MernStack-Tour-Management-main/tour-management/frontend/src/router/ProtectedRoute.js"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport { Navigate, Outlet } from \"react-router-dom\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\n\r\nconst ProtectedRoute = () => {\r\n  const { isAuthenticated, role } = useContext(AuthContext);\r\n\r\n  const isAdmin = role === \"admin\";\r\n  if (!isAdmin) {\r\n    // If the user is not an admin, redirect to a restricted access page\r\n    return <Navigate to=\"/restricted\" />;\r\n  }\r\n\r\n  // Check if the user is authenticated\r\n  if (!isAuthenticated) {\r\n    // Redirect unauthenticated users to the login page\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  // Check if the user has the \"admin\" role\r\n \r\n\r\n  \r\n  // If the user is an admin, allow access to the route\r\n  return <Outlet />;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,SAASC,WAAW,QAAQ,wBAAwB;AAAC;AAErD,MAAMC,cAAc,GAAG,MAAM;EAAA;EAC3B,MAAM;IAAEC,eAAe;IAAEC;EAAK,CAAC,GAAGN,UAAU,CAACG,WAAW,CAAC;EAEzD,MAAMI,OAAO,GAAGD,IAAI,KAAK,OAAO;EAChC,IAAI,CAACC,OAAO,EAAE;IACZ;IACA,oBAAO,QAAC,QAAQ;MAAC,EAAE,EAAC;IAAa;MAAA;MAAA;MAAA;IAAA,QAAG;EACtC;;EAEA;EACA,IAAI,CAACF,eAAe,EAAE;IACpB;IACA,oBAAO,QAAC,QAAQ;MAAC,EAAE,EAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAG;EACjC;;EAEA;;EAIA;EACA,oBAAO,QAAC,MAAM;IAAA;IAAA;IAAA;EAAA,QAAG;AACnB,CAAC;AAAC,GArBID,cAAc;AAAA,KAAdA,cAAc;AAuBpB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}