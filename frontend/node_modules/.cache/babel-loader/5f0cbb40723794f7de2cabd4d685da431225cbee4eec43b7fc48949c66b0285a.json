{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommandCallbackOperation = exports.CommandOperation = void 0;\nconst error_1 = require(\"../error\");\nconst explain_1 = require(\"../explain\");\nconst read_concern_1 = require(\"../read_concern\");\nconst server_selection_1 = require(\"../sdam/server_selection\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"../write_concern\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass CommandOperation extends operation_1.AbstractCallbackOperation {\n  constructor(parent, options) {\n    super(options);\n    this.options = options ?? {};\n    // NOTE: this was explicitly added for the add/remove user operations, it's likely\n    //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n    //       as a parent?\n    const dbNameOverride = options?.dbName || options?.authdb;\n    if (dbNameOverride) {\n      this.ns = new utils_1.MongoDBNamespace(dbNameOverride, '$cmd');\n    } else {\n      this.ns = parent ? parent.s.namespace.withCollection('$cmd') : new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    this.writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n      this.explain = explain_1.Explain.fromOptions(options);\n    } else if (options?.explain != null) {\n      throw new error_1.MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n    }\n  }\n  get canRetryWrite() {\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n      return this.explain == null;\n    }\n    return true;\n  }\n  async executeCommand(server, session, cmd) {\n    // TODO: consider making this a non-enumerable property\n    this.server = server;\n    const options = {\n      ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference,\n      session\n    };\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    const inTransaction = this.session && this.session.inTransaction();\n    if (this.readConcern && (0, utils_1.commandSupportsReadConcern)(cmd) && !inTransaction) {\n      Object.assign(cmd, {\n        readConcern: this.readConcern\n      });\n    }\n    if (this.trySecondaryWrite && serverWireVersion < server_selection_1.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n      options.omitReadPreference = true;\n    }\n    if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n      write_concern_1.WriteConcern.apply(cmd, this.writeConcern);\n    }\n    if (options.collation && typeof options.collation === 'object' && !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n      Object.assign(cmd, {\n        collation: options.collation\n      });\n    }\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n    if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n      cmd = (0, utils_1.decorateWithExplain)(cmd, this.explain);\n    }\n    return server.commandAsync(this.ns, cmd, options);\n  }\n}\nexports.CommandOperation = CommandOperation;\n/** @internal */\nclass CommandCallbackOperation extends CommandOperation {\n  constructor(parent, options) {\n    super(parent, options);\n  }\n  executeCommandCallback(server, session, cmd, callback) {\n    super.executeCommand(server, session, cmd).then(res => callback(undefined, res), err => callback(err, undefined));\n  }\n}\nexports.CommandCallbackOperation = CommandCallbackOperation;","map":{"version":3,"mappings":"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","names":["CommandOperation","operation_1","constructor","parent","options","dbNameOverride","dbName","authdb","ns","utils_1","s","namespace","withCollection","readConcern","read_concern_1","fromOptions","writeConcern","write_concern_1","hasAspect","EXPLAINABLE","explain","explain_1","error_1","canRetryWrite","executeCommand","server","session","cmd","bsonOptions","readPreference","serverWireVersion","inTransaction","Object","assign","trySecondaryWrite","server_selection_1","omitReadPreference","WRITE_OPERATION","apply","collation","SKIP_COLLATION","maxTimeMS","commandAsync","exports","CommandCallbackOperation","executeCommandCallback","callback","then","res","undefined","err"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\operations\\command.ts"],"sourcesContent":["import type { BSONSerializeOptions, Document } from '../bson';\r\nimport { MongoInvalidArgumentError } from '../error';\r\nimport { Explain, type ExplainOptions } from '../explain';\r\nimport { ReadConcern } from '../read_concern';\r\nimport type { ReadPreference } from '../read_preference';\r\nimport type { Server } from '../sdam/server';\r\nimport { MIN_SECONDARY_WRITE_WIRE_VERSION } from '../sdam/server_selection';\r\nimport type { ClientSession } from '../sessions';\r\nimport {\r\n  type Callback,\r\n  commandSupportsReadConcern,\r\n  decorateWithExplain,\r\n  maxWireVersion,\r\n  MongoDBNamespace\r\n} from '../utils';\r\nimport { WriteConcern, type WriteConcernOptions } from '../write_concern';\r\nimport type { ReadConcernLike } from './../read_concern';\r\nimport { AbstractCallbackOperation, Aspect, type OperationOptions } from './operation';\r\n\r\n/** @public */\r\nexport interface CollationOptions {\r\n  locale: string;\r\n  caseLevel?: boolean;\r\n  caseFirst?: string;\r\n  strength?: number;\r\n  numericOrdering?: boolean;\r\n  alternate?: string;\r\n  maxVariable?: string;\r\n  backwards?: boolean;\r\n  normalization?: boolean;\r\n}\r\n\r\n/** @public */\r\nexport interface CommandOperationOptions\r\n  extends OperationOptions,\r\n    WriteConcernOptions,\r\n    ExplainOptions {\r\n  /** Specify a read concern and level for the collection. (only MongoDB 3.2 or higher supported) */\r\n  readConcern?: ReadConcernLike;\r\n  /** Collation */\r\n  collation?: CollationOptions;\r\n  maxTimeMS?: number;\r\n  /**\r\n   * Comment to apply to the operation.\r\n   *\r\n   * In server versions pre-4.4, 'comment' must be string.  A server\r\n   * error will be thrown if any other type is provided.\r\n   *\r\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\r\n   */\r\n  comment?: unknown;\r\n  /** Should retry failed writes */\r\n  retryWrites?: boolean;\r\n\r\n  // Admin command overrides.\r\n  dbName?: string;\r\n  authdb?: string;\r\n  noResponse?: boolean;\r\n}\r\n\r\n/** @internal */\r\nexport interface OperationParent {\r\n  s: { namespace: MongoDBNamespace };\r\n  readConcern?: ReadConcern;\r\n  writeConcern?: WriteConcern;\r\n  readPreference?: ReadPreference;\r\n  bsonOptions?: BSONSerializeOptions;\r\n}\r\n\r\n/** @internal */\r\nexport abstract class CommandOperation<T> extends AbstractCallbackOperation<T> {\r\n  override options: CommandOperationOptions;\r\n  readConcern?: ReadConcern;\r\n  writeConcern?: WriteConcern;\r\n  explain?: Explain;\r\n\r\n  constructor(parent?: OperationParent, options?: CommandOperationOptions) {\r\n    super(options);\r\n    this.options = options ?? {};\r\n\r\n    // NOTE: this was explicitly added for the add/remove user operations, it's likely\r\n    //       something we'd want to reconsider. Perhaps those commands can use `Admin`\r\n    //       as a parent?\r\n    const dbNameOverride = options?.dbName || options?.authdb;\r\n    if (dbNameOverride) {\r\n      this.ns = new MongoDBNamespace(dbNameOverride, '$cmd');\r\n    } else {\r\n      this.ns = parent\r\n        ? parent.s.namespace.withCollection('$cmd')\r\n        : new MongoDBNamespace('admin', '$cmd');\r\n    }\r\n\r\n    this.readConcern = ReadConcern.fromOptions(options);\r\n    this.writeConcern = WriteConcern.fromOptions(options);\r\n\r\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\r\n      this.explain = Explain.fromOptions(options);\r\n    } else if (options?.explain != null) {\r\n      throw new MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\r\n    }\r\n  }\r\n\r\n  override get canRetryWrite(): boolean {\r\n    if (this.hasAspect(Aspect.EXPLAINABLE)) {\r\n      return this.explain == null;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async executeCommand(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    cmd: Document\r\n  ): Promise<Document> {\r\n    // TODO: consider making this a non-enumerable property\r\n    this.server = server;\r\n\r\n    const options = {\r\n      ...this.options,\r\n      ...this.bsonOptions,\r\n      readPreference: this.readPreference,\r\n      session\r\n    };\r\n\r\n    const serverWireVersion = maxWireVersion(server);\r\n    const inTransaction = this.session && this.session.inTransaction();\r\n\r\n    if (this.readConcern && commandSupportsReadConcern(cmd) && !inTransaction) {\r\n      Object.assign(cmd, { readConcern: this.readConcern });\r\n    }\r\n\r\n    if (this.trySecondaryWrite && serverWireVersion < MIN_SECONDARY_WRITE_WIRE_VERSION) {\r\n      options.omitReadPreference = true;\r\n    }\r\n\r\n    if (this.writeConcern && this.hasAspect(Aspect.WRITE_OPERATION) && !inTransaction) {\r\n      WriteConcern.apply(cmd, this.writeConcern);\r\n    }\r\n\r\n    if (\r\n      options.collation &&\r\n      typeof options.collation === 'object' &&\r\n      !this.hasAspect(Aspect.SKIP_COLLATION)\r\n    ) {\r\n      Object.assign(cmd, { collation: options.collation });\r\n    }\r\n\r\n    if (typeof options.maxTimeMS === 'number') {\r\n      cmd.maxTimeMS = options.maxTimeMS;\r\n    }\r\n\r\n    if (this.hasAspect(Aspect.EXPLAINABLE) && this.explain) {\r\n      cmd = decorateWithExplain(cmd, this.explain);\r\n    }\r\n\r\n    return server.commandAsync(this.ns, cmd, options);\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport abstract class CommandCallbackOperation<T = any> extends CommandOperation<T> {\r\n  constructor(parent?: OperationParent, options?: CommandOperationOptions) {\r\n    super(parent, options);\r\n  }\r\n\r\n  executeCommandCallback(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    cmd: Document,\r\n    callback: Callback\r\n  ): void {\r\n    super.executeCommand(server, session, cmd).then(\r\n      res => callback(undefined, res),\r\n      err => callback(err, undefined)\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}