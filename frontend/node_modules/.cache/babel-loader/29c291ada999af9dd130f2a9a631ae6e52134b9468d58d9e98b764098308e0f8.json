{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joelg\\\\Downloads\\\\MernStack-Tour-Management-main\\\\MernStack-Tour-Management-main\\\\tour-management\\\\frontend\\\\src\\\\router\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from \"react\";\nimport { Navigate, Outlet } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = () => {\n  _s();\n  const {\n    user,\n    isAuthenticated\n  } = useContext(AuthContext);\n\n  // A) Non-Authenticated users should be redirected to login page.\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 14\n    }, this);\n  }\n\n  // B) Authenticated users should be redirected to home page.\n  if (isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/das\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 14\n    }, this);\n  }\n\n  // C) Admin users should be able to access everything but be redirected to dashboard.\n  if (user.isAdmin) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 14\n    }, this);\n  }\n\n  // If none of the conditions are met, allow access to the route\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 12\n  }, this);\n};\n_s(ProtectedRoute, \"t6PXSfMmzfeTxqJaIQPK0VwmZqQ=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useContext","Navigate","Outlet","AuthContext","ProtectedRoute","user","isAuthenticated","isAdmin"],"sources":["C:/Users/joelg/Downloads/MernStack-Tour-Management-main/MernStack-Tour-Management-main/tour-management/frontend/src/router/ProtectedRoute.js"],"sourcesContent":["  import React, { useContext } from \"react\";\r\n  import { Navigate, Outlet } from \"react-router-dom\";\r\n  import { AuthContext } from \"../context/AuthContext\";\r\n  \r\n  const ProtectedRoute = () => {\r\n    const { user, isAuthenticated } = useContext(AuthContext);\r\n  \r\n    // A) Non-Authenticated users should be redirected to login page.\r\n    if (!isAuthenticated) {\r\n      return <Navigate to=\"/login\" />;\r\n    }\r\n  \r\n    // B) Authenticated users should be redirected to home page.\r\n    if (isAuthenticated) {\r\n      return <Navigate to=\"/das\" />;\r\n    }\r\n  \r\n    // C) Admin users should be able to access everything but be redirected to dashboard.\r\n    if (user.isAdmin) {\r\n      return <Navigate to=\"/dashboard\" />;\r\n    }\r\n  \r\n    // If none of the conditions are met, allow access to the route\r\n    return <Outlet />;\r\n  };\r\n  \r\n  export default ProtectedRoute;\r\n  "],"mappings":";;AAAE,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,SAASC,WAAW,QAAQ,wBAAwB;AAAC;AAErD,MAAMC,cAAc,GAAG,MAAM;EAAA;EAC3B,MAAM;IAAEC,IAAI;IAAEC;EAAgB,CAAC,GAAGN,UAAU,CAACG,WAAW,CAAC;;EAEzD;EACA,IAAI,CAACG,eAAe,EAAE;IACpB,oBAAO,QAAC,QAAQ;MAAC,EAAE,EAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAG;EACjC;;EAEA;EACA,IAAIA,eAAe,EAAE;IACnB,oBAAO,QAAC,QAAQ;MAAC,EAAE,EAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAG;EAC/B;;EAEA;EACA,IAAID,IAAI,CAACE,OAAO,EAAE;IAChB,oBAAO,QAAC,QAAQ;MAAC,EAAE,EAAC;IAAY;MAAA;MAAA;MAAA;IAAA,QAAG;EACrC;;EAEA;EACA,oBAAO,QAAC,MAAM;IAAA;IAAA;IAAA;EAAA,QAAG;AACnB,CAAC;AAAC,GApBIH,cAAc;AAAA,KAAdA,cAAc;AAsBpB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}