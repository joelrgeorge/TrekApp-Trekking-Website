{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\nconst constants_1 = require(\"../constants\");\n/**\r\n * The base export class for all monitoring events published from the connection pool\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    this.time = new Date();\n    this.address = pool.address;\n  }\n}\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\r\n * An event published when a connection pool is created\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_POOL_CREATED;\n    if (pool.options.credentials != null) {\n      // Intentionally remove credentials: NODE-5460\n      this.options = {\n        ...pool.options,\n        credentials: {}\n      };\n    } else {\n      this.options = pool.options;\n    }\n  }\n}\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\r\n * An event published when a connection pool is ready\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_POOL_READY;\n  }\n}\nexports.ConnectionPoolReadyEvent = ConnectionPoolReadyEvent;\n/**\r\n * An event published when a connection pool is closed\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_POOL_CLOSED;\n  }\n}\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\r\n * An event published when a connection pool creates a new connection\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CREATED;\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\r\n * An event published when a connection is ready for use\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_READY;\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\r\n * An event published when a connection is closed\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection, reason, error) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CLOSED;\n    this.connectionId = connection.id;\n    this.reason = reason;\n    this.serviceId = connection.serviceId;\n    this.error = error ?? null;\n  }\n}\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\r\n * An event published when a request to check a connection out begins\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CHECK_OUT_STARTED;\n  }\n}\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\r\n * An event published when a request to check a connection out fails\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, reason, error) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CHECK_OUT_FAILED;\n    this.reason = reason;\n    this.error = error;\n  }\n}\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\r\n * An event published when a connection is checked out of the connection pool\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CHECKED_OUT;\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\r\n * An event published when a connection is checked into the connection pool\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, connection) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_CHECKED_IN;\n    this.connectionId = connection.id;\n  }\n}\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\r\n * An event published when a connection pool is cleared\r\n * @public\r\n * @category Event\r\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n  /** @internal */\n  constructor(pool, options = {}) {\n    super(pool);\n    /** @internal */\n    this.name = constants_1.CONNECTION_POOL_CLEARED;\n    this.serviceId = options.serviceId;\n    this.interruptInUseConnections = options.interruptInUseConnections;\n  }\n}\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent;","map":{"version":3,"mappings":"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","names":["ConnectionPoolMonitoringEvent","constructor","pool","time","Date","address","exports","ConnectionPoolCreatedEvent","constants_1","options","credentials","ConnectionPoolReadyEvent","ConnectionPoolClosedEvent","ConnectionCreatedEvent","connection","connectionId","id","ConnectionReadyEvent","ConnectionClosedEvent","reason","error","serviceId","ConnectionCheckOutStartedEvent","ConnectionCheckOutFailedEvent","ConnectionCheckedOutEvent","ConnectionCheckedInEvent","ConnectionPoolClearedEvent","interruptInUseConnections"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\cmap\\connection_pool_events.ts"],"sourcesContent":["import type { ObjectId } from '../bson';\r\nimport {\r\n  CONNECTION_CHECK_OUT_FAILED,\r\n  CONNECTION_CHECK_OUT_STARTED,\r\n  CONNECTION_CHECKED_IN,\r\n  CONNECTION_CHECKED_OUT,\r\n  CONNECTION_CLOSED,\r\n  CONNECTION_CREATED,\r\n  CONNECTION_POOL_CLEARED,\r\n  CONNECTION_POOL_CLOSED,\r\n  CONNECTION_POOL_CREATED,\r\n  CONNECTION_POOL_READY,\r\n  CONNECTION_READY\r\n} from '../constants';\r\nimport type { MongoError } from '../error';\r\nimport type { Connection } from './connection';\r\nimport type { ConnectionPool, ConnectionPoolOptions } from './connection_pool';\r\n\r\n/**\r\n * The base export class for all monitoring events published from the connection pool\r\n * @public\r\n * @category Event\r\n */\r\nexport abstract class ConnectionPoolMonitoringEvent {\r\n  /** A timestamp when the event was created  */\r\n  time: Date;\r\n  /** The address (host/port pair) of the pool */\r\n  address: string;\r\n  /** @internal */\r\n  abstract name:\r\n    | typeof CONNECTION_CHECK_OUT_FAILED\r\n    | typeof CONNECTION_CHECK_OUT_STARTED\r\n    | typeof CONNECTION_CHECKED_IN\r\n    | typeof CONNECTION_CHECKED_OUT\r\n    | typeof CONNECTION_CLOSED\r\n    | typeof CONNECTION_CREATED\r\n    | typeof CONNECTION_POOL_CLEARED\r\n    | typeof CONNECTION_POOL_CLOSED\r\n    | typeof CONNECTION_POOL_CREATED\r\n    | typeof CONNECTION_POOL_READY\r\n    | typeof CONNECTION_READY;\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool) {\r\n    this.time = new Date();\r\n    this.address = pool.address;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection pool is created\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\r\n  /** The options used to create this connection pool */\r\n  options: Omit<ConnectionPoolOptions, 'credentials'> & { credentials?: Record<never, never> };\r\n  /** @internal */\r\n  name = CONNECTION_POOL_CREATED;\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool) {\r\n    super(pool);\r\n    if (pool.options.credentials != null) {\r\n      // Intentionally remove credentials: NODE-5460\r\n      this.options = { ...pool.options, credentials: {} };\r\n    } else {\r\n      this.options = pool.options;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection pool is ready\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\r\n  /** @internal */\r\n  name = CONNECTION_POOL_READY;\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool) {\r\n    super(pool);\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection pool is closed\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\r\n  /** @internal */\r\n  name = CONNECTION_POOL_CLOSED;\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool) {\r\n    super(pool);\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection pool creates a new connection\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\r\n  /** A monotonically increasing, per-pool id for the newly created connection */\r\n  connectionId: number | '<monitor>';\r\n  /** @internal */\r\n  name = CONNECTION_CREATED;\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool, connection: { id: number | '<monitor>' }) {\r\n    super(pool);\r\n    this.connectionId = connection.id;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection is ready for use\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\r\n  /** The id of the connection */\r\n  connectionId: number | '<monitor>';\r\n  /** @internal */\r\n  name = CONNECTION_READY;\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool, connection: Connection) {\r\n    super(pool);\r\n    this.connectionId = connection.id;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection is closed\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\r\n  /** The id of the connection */\r\n  connectionId: number | '<monitor>';\r\n  /** The reason the connection was closed */\r\n  reason: string;\r\n  serviceId?: ObjectId;\r\n  /** @internal */\r\n  name = CONNECTION_CLOSED;\r\n  /** @internal */\r\n  error: MongoError | null;\r\n\r\n  /** @internal */\r\n  constructor(\r\n    pool: ConnectionPool,\r\n    connection: Pick<Connection, 'id' | 'serviceId'>,\r\n    reason: 'idle' | 'stale' | 'poolClosed' | 'error',\r\n    error?: MongoError\r\n  ) {\r\n    super(pool);\r\n    this.connectionId = connection.id;\r\n    this.reason = reason;\r\n    this.serviceId = connection.serviceId;\r\n    this.error = error ?? null;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a request to check a connection out begins\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\r\n  /** @internal */\r\n  name = CONNECTION_CHECK_OUT_STARTED;\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool) {\r\n    super(pool);\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a request to check a connection out fails\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\r\n  /** The reason the attempt to check out failed */\r\n  reason: string;\r\n  /** @internal */\r\n  error?: MongoError;\r\n  /** @internal */\r\n  name = CONNECTION_CHECK_OUT_FAILED;\r\n\r\n  /** @internal */\r\n  constructor(\r\n    pool: ConnectionPool,\r\n    reason: 'poolClosed' | 'timeout' | 'connectionError',\r\n    error?: MongoError\r\n  ) {\r\n    super(pool);\r\n    this.reason = reason;\r\n    this.error = error;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection is checked out of the connection pool\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\r\n  /** The id of the connection */\r\n  connectionId: number | '<monitor>';\r\n  /** @internal */\r\n  name = CONNECTION_CHECKED_OUT;\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool, connection: Connection) {\r\n    super(pool);\r\n    this.connectionId = connection.id;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection is checked into the connection pool\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\r\n  /** The id of the connection */\r\n  connectionId: number | '<monitor>';\r\n  /** @internal */\r\n  name = CONNECTION_CHECKED_IN;\r\n\r\n  /** @internal */\r\n  constructor(pool: ConnectionPool, connection: Connection) {\r\n    super(pool);\r\n    this.connectionId = connection.id;\r\n  }\r\n}\r\n\r\n/**\r\n * An event published when a connection pool is cleared\r\n * @public\r\n * @category Event\r\n */\r\nexport class ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\r\n  /** @internal */\r\n  serviceId?: ObjectId;\r\n\r\n  interruptInUseConnections?: boolean;\r\n  /** @internal */\r\n  name = CONNECTION_POOL_CLEARED;\r\n\r\n  /** @internal */\r\n  constructor(\r\n    pool: ConnectionPool,\r\n    options: { serviceId?: ObjectId; interruptInUseConnections?: boolean } = {}\r\n  ) {\r\n    super(pool);\r\n    this.serviceId = options.serviceId;\r\n    this.interruptInUseConnections = options.interruptInUseConnections;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}