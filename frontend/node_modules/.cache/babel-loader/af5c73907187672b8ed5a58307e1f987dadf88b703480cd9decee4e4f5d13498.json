{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoDBOIDC = exports.OIDC_WORKFLOWS = void 0;\nconst error_1 = require(\"../../error\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst aws_service_workflow_1 = require(\"./mongodb_oidc/aws_service_workflow\");\nconst azure_service_workflow_1 = require(\"./mongodb_oidc/azure_service_workflow\");\nconst callback_workflow_1 = require(\"./mongodb_oidc/callback_workflow\");\n/** Error when credentials are missing. */\nconst MISSING_CREDENTIALS_ERROR = 'AuthContext must provide credentials.';\n/** @internal */\nexports.OIDC_WORKFLOWS = new Map();\nexports.OIDC_WORKFLOWS.set('callback', new callback_workflow_1.CallbackWorkflow());\nexports.OIDC_WORKFLOWS.set('aws', new aws_service_workflow_1.AwsServiceWorkflow());\nexports.OIDC_WORKFLOWS.set('azure', new azure_service_workflow_1.AzureServiceWorkflow());\n/**\r\n * OIDC auth provider.\r\n * @experimental\r\n */\nclass MongoDBOIDC extends auth_provider_1.AuthProvider {\n  /**\r\n   * Instantiate the auth provider.\r\n   */\n  constructor() {\n    super();\n  }\n  /**\r\n   * Authenticate using OIDC\r\n   */\n  async auth(authContext) {\n    const {\n      connection,\n      reauthenticating,\n      response\n    } = authContext;\n    const credentials = getCredentials(authContext);\n    const workflow = getWorkflow(credentials);\n    await workflow.execute(connection, credentials, reauthenticating, response);\n  }\n  /**\r\n   * Add the speculative auth for the initial handshake.\r\n   */\n  async prepare(handshakeDoc, authContext) {\n    const credentials = getCredentials(authContext);\n    const workflow = getWorkflow(credentials);\n    const result = await workflow.speculativeAuth(credentials);\n    return {\n      ...handshakeDoc,\n      ...result\n    };\n  }\n}\nexports.MongoDBOIDC = MongoDBOIDC;\n/**\r\n * Get credentials from the auth context, throwing if they do not exist.\r\n */\nfunction getCredentials(authContext) {\n  const {\n    credentials\n  } = authContext;\n  if (!credentials) {\n    throw new error_1.MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);\n  }\n  return credentials;\n}\n/**\r\n * Gets either a device workflow or callback workflow.\r\n */\nfunction getWorkflow(credentials) {\n  const providerName = credentials.mechanismProperties.PROVIDER_NAME;\n  const workflow = exports.OIDC_WORKFLOWS.get(providerName || 'callback');\n  if (!workflow) {\n    throw new error_1.MongoInvalidArgumentError(`Could not load workflow for provider ${credentials.mechanismProperties.PROVIDER_NAME}`);\n  }\n  return workflow;\n}","map":{"version":3,"mappings":";;;;;;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA,MAAMA,yBAAyB,GAAG,uCAAuC;AAuEzE;AACaC,sBAAc,GAAgC,IAAIC,GAAG,EAAE;AACpED,sBAAc,CAACE,GAAG,CAAC,UAAU,EAAE,IAAIC,oCAAgB,EAAE,CAAC;AACtDH,sBAAc,CAACE,GAAG,CAAC,KAAK,EAAE,IAAIE,yCAAkB,EAAE,CAAC;AACnDJ,sBAAc,CAACE,GAAG,CAAC,OAAO,EAAE,IAAIG,6CAAoB,EAAE,CAAC;AAEvD;;;;AAIA,MAAaC,WAAY,SAAQC,4BAAY;EAC3C;;;EAGAC;IACE,KAAK,EAAE;EACT;EAEA;;;EAGS,MAAMC,IAAI,CAACC,WAAwB;IAC1C,MAAM;MAAEC,UAAU;MAAEC,gBAAgB;MAAEC;IAAQ,CAAE,GAAGH,WAAW;IAC9D,MAAMI,WAAW,GAAGC,cAAc,CAACL,WAAW,CAAC;IAC/C,MAAMM,QAAQ,GAAGC,WAAW,CAACH,WAAW,CAAC;IACzC,MAAME,QAAQ,CAACE,OAAO,CAACP,UAAU,EAAEG,WAAW,EAAEF,gBAAgB,EAAEC,QAAQ,CAAC;EAC7E;EAEA;;;EAGS,MAAMM,OAAO,CACpBC,YAA+B,EAC/BV,WAAwB;IAExB,MAAMI,WAAW,GAAGC,cAAc,CAACL,WAAW,CAAC;IAC/C,MAAMM,QAAQ,GAAGC,WAAW,CAACH,WAAW,CAAC;IACzC,MAAMO,MAAM,GAAG,MAAML,QAAQ,CAACM,eAAe,CAACR,WAAW,CAAC;IAC1D,OAAO;MAAE,GAAGM,YAAY;MAAE,GAAGC;IAAM,CAAE;EACvC;;AA7BFrB;AAgCA;;;AAGA,SAASe,cAAc,CAACL,WAAwB;EAC9C,MAAM;IAAEI;EAAW,CAAE,GAAGJ,WAAW;EACnC,IAAI,CAACI,WAAW,EAAE;IAChB,MAAM,IAAIS,oCAA4B,CAACxB,yBAAyB,CAAC;;EAEnE,OAAOe,WAAW;AACpB;AAEA;;;AAGA,SAASG,WAAW,CAACH,WAA6B;EAChD,MAAMU,YAAY,GAAGV,WAAW,CAACW,mBAAmB,CAACC,aAAa;EAClE,MAAMV,QAAQ,GAAGhB,sBAAc,CAAC2B,GAAG,CAACH,YAAY,IAAI,UAAU,CAAC;EAC/D,IAAI,CAACR,QAAQ,EAAE;IACb,MAAM,IAAIO,iCAAyB,CACjC,wCAAwCT,WAAW,CAACW,mBAAmB,CAACC,aAAa,EAAE,CACxF;;EAEH,OAAOV,QAAQ;AACjB","names":["MISSING_CREDENTIALS_ERROR","exports","Map","set","callback_workflow_1","aws_service_workflow_1","azure_service_workflow_1","MongoDBOIDC","auth_provider_1","constructor","auth","authContext","connection","reauthenticating","response","credentials","getCredentials","workflow","getWorkflow","execute","prepare","handshakeDoc","result","speculativeAuth","error_1","providerName","mechanismProperties","PROVIDER_NAME","get"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\cmap\\auth\\mongodb_oidc.ts"],"sourcesContent":["import type { Document } from 'bson';\r\n\r\nimport { MongoInvalidArgumentError, MongoMissingCredentialsError } from '../../error';\r\nimport type { HandshakeDocument } from '../connect';\r\nimport type { Connection } from '../connection';\r\nimport { type AuthContext, AuthProvider } from './auth_provider';\r\nimport type { MongoCredentials } from './mongo_credentials';\r\nimport { AwsServiceWorkflow } from './mongodb_oidc/aws_service_workflow';\r\nimport { AzureServiceWorkflow } from './mongodb_oidc/azure_service_workflow';\r\nimport { CallbackWorkflow } from './mongodb_oidc/callback_workflow';\r\n\r\n/** Error when credentials are missing. */\r\nconst MISSING_CREDENTIALS_ERROR = 'AuthContext must provide credentials.';\r\n\r\n/**\r\n * @public\r\n * @experimental\r\n */\r\nexport interface IdPServerInfo {\r\n  issuer: string;\r\n  clientId: string;\r\n  requestScopes?: string[];\r\n}\r\n\r\n/**\r\n * @public\r\n * @experimental\r\n */\r\nexport interface IdPServerResponse {\r\n  accessToken: string;\r\n  expiresInSeconds?: number;\r\n  refreshToken?: string;\r\n}\r\n\r\n/**\r\n * @public\r\n * @experimental\r\n */\r\nexport interface OIDCCallbackContext {\r\n  refreshToken?: string;\r\n  timeoutSeconds?: number;\r\n  timeoutContext?: AbortSignal;\r\n  version: number;\r\n}\r\n\r\n/**\r\n * @public\r\n * @experimental\r\n */\r\nexport type OIDCRequestFunction = (\r\n  info: IdPServerInfo,\r\n  context: OIDCCallbackContext\r\n) => Promise<IdPServerResponse>;\r\n\r\n/**\r\n * @public\r\n * @experimental\r\n */\r\nexport type OIDCRefreshFunction = (\r\n  info: IdPServerInfo,\r\n  context: OIDCCallbackContext\r\n) => Promise<IdPServerResponse>;\r\n\r\ntype ProviderName = 'aws' | 'azure' | 'callback';\r\n\r\nexport interface Workflow {\r\n  /**\r\n   * All device workflows must implement this method in order to get the access\r\n   * token and then call authenticate with it.\r\n   */\r\n  execute(\r\n    connection: Connection,\r\n    credentials: MongoCredentials,\r\n    reauthenticating: boolean,\r\n    response?: Document\r\n  ): Promise<Document>;\r\n\r\n  /**\r\n   * Get the document to add for speculative authentication.\r\n   */\r\n  speculativeAuth(credentials: MongoCredentials): Promise<Document>;\r\n}\r\n\r\n/** @internal */\r\nexport const OIDC_WORKFLOWS: Map<ProviderName, Workflow> = new Map();\r\nOIDC_WORKFLOWS.set('callback', new CallbackWorkflow());\r\nOIDC_WORKFLOWS.set('aws', new AwsServiceWorkflow());\r\nOIDC_WORKFLOWS.set('azure', new AzureServiceWorkflow());\r\n\r\n/**\r\n * OIDC auth provider.\r\n * @experimental\r\n */\r\nexport class MongoDBOIDC extends AuthProvider {\r\n  /**\r\n   * Instantiate the auth provider.\r\n   */\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * Authenticate using OIDC\r\n   */\r\n  override async auth(authContext: AuthContext): Promise<void> {\r\n    const { connection, reauthenticating, response } = authContext;\r\n    const credentials = getCredentials(authContext);\r\n    const workflow = getWorkflow(credentials);\r\n    await workflow.execute(connection, credentials, reauthenticating, response);\r\n  }\r\n\r\n  /**\r\n   * Add the speculative auth for the initial handshake.\r\n   */\r\n  override async prepare(\r\n    handshakeDoc: HandshakeDocument,\r\n    authContext: AuthContext\r\n  ): Promise<HandshakeDocument> {\r\n    const credentials = getCredentials(authContext);\r\n    const workflow = getWorkflow(credentials);\r\n    const result = await workflow.speculativeAuth(credentials);\r\n    return { ...handshakeDoc, ...result };\r\n  }\r\n}\r\n\r\n/**\r\n * Get credentials from the auth context, throwing if they do not exist.\r\n */\r\nfunction getCredentials(authContext: AuthContext): MongoCredentials {\r\n  const { credentials } = authContext;\r\n  if (!credentials) {\r\n    throw new MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);\r\n  }\r\n  return credentials;\r\n}\r\n\r\n/**\r\n * Gets either a device workflow or callback workflow.\r\n */\r\nfunction getWorkflow(credentials: MongoCredentials): Workflow {\r\n  const providerName = credentials.mechanismProperties.PROVIDER_NAME;\r\n  const workflow = OIDC_WORKFLOWS.get(providerName || 'callback');\r\n  if (!workflow) {\r\n    throw new MongoInvalidArgumentError(\r\n      `Could not load workflow for provider ${credentials.mechanismProperties.PROVIDER_NAME}`\r\n    );\r\n  }\r\n  return workflow;\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}