{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CollectionsOperation = void 0;\nconst collection_1 = require(\"../collection\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass CollectionsOperation extends operation_1.AbstractCallbackOperation {\n  constructor(db, options) {\n    super(options);\n    this.options = options;\n    this.db = db;\n  }\n  executeCallback(server, session, callback) {\n    // Let's get the collection names\n    this.db.listCollections({}, {\n      ...this.options,\n      nameOnly: true,\n      readPreference: this.readPreference,\n      session\n    }).toArray().then(documents => {\n      const collections = [];\n      for (const {\n        name\n      } of documents) {\n        if (!name.includes('$')) {\n          // Filter collections removing any illegal ones\n          collections.push(new collection_1.Collection(this.db, name, this.db.s.options));\n        }\n      }\n      // Return the collection objects\n      callback(undefined, collections);\n    }, error => callback(error));\n  }\n}\nexports.CollectionsOperation = CollectionsOperation;","map":{"version":3,"mappings":";;;;;;AAAA;AAKA;AAMA;AACA,MAAaA,oBAAqB,SAAQC,qCAAuC;EAI/EC,YAAYC,EAAM,EAAEC,OAA2B;IAC7C,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACD,EAAE,GAAGA,EAAE;EACd;EAESE,eAAe,CACtBC,MAAc,EACdC,OAAkC,EAClCC,QAAgC;IAEhC;IACA,IAAI,CAACL,EAAE,CACJM,eAAe,CACd,EAAE,EACF;MAAE,GAAG,IAAI,CAACL,OAAO;MAAEM,QAAQ,EAAE,IAAI;MAAEC,cAAc,EAAE,IAAI,CAACA,cAAc;MAAEJ;IAAO,CAAE,CAClF,CACAK,OAAO,EAAE,CACTC,IAAI,CACHC,SAAS,IAAG;MACV,MAAMC,WAAW,GAAG,EAAE;MACtB,KAAK,MAAM;QAAEC;MAAI,CAAE,IAAIF,SAAS,EAAE;QAChC,IAAI,CAACE,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;UACvB;UACAF,WAAW,CAACG,IAAI,CAAC,IAAIC,uBAAU,CAAC,IAAI,CAAChB,EAAE,EAAEa,IAAI,EAAE,IAAI,CAACb,EAAE,CAACiB,CAAC,CAAChB,OAAO,CAAC,CAAC;;;MAGtE;MACAI,QAAQ,CAACa,SAAS,EAAEN,WAAW,CAAC;IAClC,CAAC,EACDO,KAAK,IAAId,QAAQ,CAACc,KAAK,CAAC,CACzB;EACL;;AApCFC","names":["CollectionsOperation","operation_1","constructor","db","options","executeCallback","server","session","callback","listCollections","nameOnly","readPreference","toArray","then","documents","collections","name","includes","push","collection_1","s","undefined","error","exports"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\operations\\collections.ts"],"sourcesContent":["import { Collection } from '../collection';\r\nimport type { Db } from '../db';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport type { Callback } from '../utils';\r\nimport { AbstractCallbackOperation, type OperationOptions } from './operation';\r\n\r\nexport interface CollectionsOptions extends OperationOptions {\r\n  nameOnly?: boolean;\r\n}\r\n\r\n/** @internal */\r\nexport class CollectionsOperation extends AbstractCallbackOperation<Collection[]> {\r\n  override options: CollectionsOptions;\r\n  db: Db;\r\n\r\n  constructor(db: Db, options: CollectionsOptions) {\r\n    super(options);\r\n    this.options = options;\r\n    this.db = db;\r\n  }\r\n\r\n  override executeCallback(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<Collection[]>\r\n  ): void {\r\n    // Let's get the collection names\r\n    this.db\r\n      .listCollections(\r\n        {},\r\n        { ...this.options, nameOnly: true, readPreference: this.readPreference, session }\r\n      )\r\n      .toArray()\r\n      .then(\r\n        documents => {\r\n          const collections = [];\r\n          for (const { name } of documents) {\r\n            if (!name.includes('$')) {\r\n              // Filter collections removing any illegal ones\r\n              collections.push(new Collection(this.db, name, this.db.s.options));\r\n            }\r\n          }\r\n          // Return the collection objects\r\n          callback(undefined, collections);\r\n        },\r\n        error => callback(error)\r\n      );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}