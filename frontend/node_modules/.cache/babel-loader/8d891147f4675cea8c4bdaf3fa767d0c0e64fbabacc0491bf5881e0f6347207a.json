{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkWriteOperation = void 0;\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass BulkWriteOperation extends operation_1.AbstractCallbackOperation {\n  constructor(collection, operations, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.operations = operations;\n  }\n  executeCallback(server, session, callback) {\n    const coll = this.collection;\n    const operations = this.operations;\n    const options = {\n      ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference\n    };\n    // Create the bulk operation\n    const bulk = options.ordered === false ? coll.initializeUnorderedBulkOp(options) : coll.initializeOrderedBulkOp(options);\n    // for each op go through and add to the bulk\n    try {\n      for (let i = 0; i < operations.length; i++) {\n        bulk.raw(operations[i]);\n      }\n    } catch (err) {\n      return callback(err);\n    }\n    // Execute the bulk\n    bulk.execute({\n      ...options,\n      session\n    }).then(result => callback(undefined, result), error => callback(error));\n  }\n}\nexports.BulkWriteOperation = BulkWriteOperation;\n(0, operation_1.defineAspects)(BulkWriteOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"mappings":";;;;;;AAUA;AAEA;AACA,MAAaA,kBAAmB,SAAQC,qCAA0C;EAKhFC,YACEC,UAAsB,EACtBC,UAAmC,EACnCC,OAAyB;IAEzB,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;EAESE,eAAe,CACtBC,MAAc,EACdC,OAAkC,EAClCC,QAAmC;IAEnC,MAAMC,IAAI,GAAG,IAAI,CAACP,UAAU;IAC5B,MAAMC,UAAU,GAAG,IAAI,CAACA,UAAU;IAClC,MAAMC,OAAO,GAAG;MAAE,GAAG,IAAI,CAACA,OAAO;MAAE,GAAG,IAAI,CAACM,WAAW;MAAEC,cAAc,EAAE,IAAI,CAACA;IAAc,CAAE;IAE7F;IACA,MAAMC,IAAI,GACRR,OAAO,CAACS,OAAO,KAAK,KAAK,GACrBJ,IAAI,CAACK,yBAAyB,CAACV,OAAO,CAAC,GACvCK,IAAI,CAACM,uBAAuB,CAACX,OAAO,CAAC;IAE3C;IACA,IAAI;MACF,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,UAAU,CAACc,MAAM,EAAED,CAAC,EAAE,EAAE;QAC1CJ,IAAI,CAACM,GAAG,CAACf,UAAU,CAACa,CAAC,CAAC,CAAC;;KAE1B,CAAC,OAAOG,GAAG,EAAE;MACZ,OAAOX,QAAQ,CAACW,GAAG,CAAC;;IAGtB;IACAP,IAAI,CAACQ,OAAO,CAAC;MAAE,GAAGhB,OAAO;MAAEG;IAAO,CAAE,CAAC,CAACc,IAAI,CACxCC,MAAM,IAAId,QAAQ,CAACe,SAAS,EAAED,MAAM,CAAC,EACrCE,KAAK,IAAIhB,QAAQ,CAACgB,KAAK,CAAC,CACzB;EACH;;AA7CFC;AAgDA,6BAAa,EAAC1B,kBAAkB,EAAE,CAACC,kBAAM,CAAC0B,eAAe,CAAC,CAAC","names":["BulkWriteOperation","operation_1","constructor","collection","operations","options","executeCallback","server","session","callback","coll","bsonOptions","readPreference","bulk","ordered","initializeUnorderedBulkOp","initializeOrderedBulkOp","i","length","raw","err","execute","then","result","undefined","error","exports","WRITE_OPERATION"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\operations\\bulk_write.ts"],"sourcesContent":["import type {\r\n  AnyBulkWriteOperation,\r\n  BulkOperationBase,\r\n  BulkWriteOptions,\r\n  BulkWriteResult\r\n} from '../bulk/common';\r\nimport type { Collection } from '../collection';\r\nimport type { Server } from '../sdam/server';\r\nimport type { ClientSession } from '../sessions';\r\nimport type { Callback } from '../utils';\r\nimport { AbstractCallbackOperation, Aspect, defineAspects } from './operation';\r\n\r\n/** @internal */\r\nexport class BulkWriteOperation extends AbstractCallbackOperation<BulkWriteResult> {\r\n  override options: BulkWriteOptions;\r\n  collection: Collection;\r\n  operations: AnyBulkWriteOperation[];\r\n\r\n  constructor(\r\n    collection: Collection,\r\n    operations: AnyBulkWriteOperation[],\r\n    options: BulkWriteOptions\r\n  ) {\r\n    super(options);\r\n    this.options = options;\r\n    this.collection = collection;\r\n    this.operations = operations;\r\n  }\r\n\r\n  override executeCallback(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<BulkWriteResult>\r\n  ): void {\r\n    const coll = this.collection;\r\n    const operations = this.operations;\r\n    const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\r\n\r\n    // Create the bulk operation\r\n    const bulk: BulkOperationBase =\r\n      options.ordered === false\r\n        ? coll.initializeUnorderedBulkOp(options)\r\n        : coll.initializeOrderedBulkOp(options);\r\n\r\n    // for each op go through and add to the bulk\r\n    try {\r\n      for (let i = 0; i < operations.length; i++) {\r\n        bulk.raw(operations[i]);\r\n      }\r\n    } catch (err) {\r\n      return callback(err);\r\n    }\r\n\r\n    // Execute the bulk\r\n    bulk.execute({ ...options, session }).then(\r\n      result => callback(undefined, result),\r\n      error => callback(error)\r\n    );\r\n  }\r\n}\r\n\r\ndefineAspects(BulkWriteOperation, [Aspect.WRITE_OPERATION]);\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}