{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SENSITIVE_COMMANDS = exports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = void 0;\nconst constants_1 = require(\"../constants\");\nconst utils_1 = require(\"../utils\");\nconst commands_1 = require(\"./commands\");\n/**\r\n * An event indicating the start of a given command\r\n * @public\r\n * @category Event\r\n */\nclass CommandStartedEvent {\n  /**\r\n   * Create a started event\r\n   *\r\n   * @internal\r\n   * @param pool - the pool that originated the command\r\n   * @param command - the command\r\n   */\n  constructor(connection, command) {\n    /** @internal */\n    this.name = constants_1.COMMAND_STARTED;\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const {\n      address,\n      connectionId,\n      serviceId\n    } = extractConnectionDetails(connection);\n    // TODO: remove in major revision, this is not spec behavior\n    if (exports.SENSITIVE_COMMANDS.has(commandName)) {\n      this.commandObj = {};\n      this.commandObj[commandName] = true;\n    }\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.databaseName = databaseName(command);\n    this.commandName = commandName;\n    this.command = maybeRedact(commandName, cmd, cmd);\n  }\n  /* @internal */\n  get hasServiceId() {\n    return !!this.serviceId;\n  }\n}\nexports.CommandStartedEvent = CommandStartedEvent;\n/**\r\n * An event indicating the success of a given command\r\n * @public\r\n * @category Event\r\n */\nclass CommandSucceededEvent {\n  /**\r\n   * Create a succeeded event\r\n   *\r\n   * @internal\r\n   * @param pool - the pool that originated the command\r\n   * @param command - the command\r\n   * @param reply - the reply for this command from the server\r\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\r\n   */\n  constructor(connection, command, reply, started) {\n    /** @internal */\n    this.name = constants_1.COMMAND_SUCCEEDED;\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const {\n      address,\n      connectionId,\n      serviceId\n    } = extractConnectionDetails(connection);\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = (0, utils_1.calculateDurationInMs)(started);\n    this.reply = maybeRedact(commandName, cmd, extractReply(command, reply));\n  }\n  /* @internal */\n  get hasServiceId() {\n    return !!this.serviceId;\n  }\n}\nexports.CommandSucceededEvent = CommandSucceededEvent;\n/**\r\n * An event indicating the failure of a given command\r\n * @public\r\n * @category Event\r\n */\nclass CommandFailedEvent {\n  /**\r\n   * Create a failure event\r\n   *\r\n   * @internal\r\n   * @param pool - the pool that originated the command\r\n   * @param command - the command\r\n   * @param error - the generated error or a server error response\r\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\r\n   */\n  constructor(connection, command, error, started) {\n    /** @internal */\n    this.name = constants_1.COMMAND_FAILED;\n    const cmd = extractCommand(command);\n    const commandName = extractCommandName(cmd);\n    const {\n      address,\n      connectionId,\n      serviceId\n    } = extractConnectionDetails(connection);\n    this.address = address;\n    this.connectionId = connectionId;\n    this.serviceId = serviceId;\n    this.requestId = command.requestId;\n    this.commandName = commandName;\n    this.duration = (0, utils_1.calculateDurationInMs)(started);\n    this.failure = maybeRedact(commandName, cmd, error);\n  }\n  /* @internal */\n  get hasServiceId() {\n    return !!this.serviceId;\n  }\n}\nexports.CommandFailedEvent = CommandFailedEvent;\n/**\r\n * Commands that we want to redact because of the sensitive nature of their contents\r\n * @internal\r\n */\nexports.SENSITIVE_COMMANDS = new Set(['authenticate', 'saslStart', 'saslContinue', 'getnonce', 'createUser', 'updateUser', 'copydbgetnonce', 'copydbsaslstart', 'copydb']);\nconst HELLO_COMMANDS = new Set(['hello', constants_1.LEGACY_HELLO_COMMAND, constants_1.LEGACY_HELLO_COMMAND_CAMEL_CASE]);\n// helper methods\nconst extractCommandName = commandDoc => Object.keys(commandDoc)[0];\nconst namespace = command => command.ns;\nconst databaseName = command => command.ns.split('.')[0];\nconst collectionName = command => command.ns.split('.')[1];\nconst maybeRedact = (commandName, commandDoc, result) => exports.SENSITIVE_COMMANDS.has(commandName) || HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate ? {} : result;\nconst LEGACY_FIND_QUERY_MAP = {\n  $query: 'filter',\n  $orderby: 'sort',\n  $hint: 'hint',\n  $comment: 'comment',\n  $maxScan: 'maxScan',\n  $max: 'max',\n  $min: 'min',\n  $returnKey: 'returnKey',\n  $showDiskLoc: 'showRecordId',\n  $maxTimeMS: 'maxTimeMS',\n  $snapshot: 'snapshot'\n};\nconst LEGACY_FIND_OPTIONS_MAP = {\n  numberToSkip: 'skip',\n  numberToReturn: 'batchSize',\n  returnFieldSelector: 'projection'\n};\nconst OP_QUERY_KEYS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial', 'exhaust'];\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\nfunction extractCommand(command) {\n  if (command instanceof commands_1.Msg) {\n    return (0, utils_1.deepCopy)(command.command);\n  }\n  if (command.query?.$query) {\n    let result;\n    if (command.ns === 'admin.$cmd') {\n      // up-convert legacy command\n      result = Object.assign({}, command.query.$query);\n    } else {\n      // up-convert legacy find command\n      result = {\n        find: collectionName(command)\n      };\n      Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n        if (command.query[key] != null) {\n          result[LEGACY_FIND_QUERY_MAP[key]] = (0, utils_1.deepCopy)(command.query[key]);\n        }\n      });\n    }\n    Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n      const legacyKey = key;\n      if (command[legacyKey] != null) {\n        result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = (0, utils_1.deepCopy)(command[legacyKey]);\n      }\n    });\n    OP_QUERY_KEYS.forEach(key => {\n      if (command[key]) {\n        result[key] = command[key];\n      }\n    });\n    if (command.pre32Limit != null) {\n      result.limit = command.pre32Limit;\n    }\n    if (command.query.$explain) {\n      return {\n        explain: result\n      };\n    }\n    return result;\n  }\n  const clonedQuery = {};\n  const clonedCommand = {};\n  if (command.query) {\n    for (const k in command.query) {\n      clonedQuery[k] = (0, utils_1.deepCopy)(command.query[k]);\n    }\n    clonedCommand.query = clonedQuery;\n  }\n  for (const k in command) {\n    if (k === 'query') continue;\n    clonedCommand[k] = (0, utils_1.deepCopy)(command[k]);\n  }\n  return command.query ? clonedQuery : clonedCommand;\n}\nfunction extractReply(command, reply) {\n  if (!reply) {\n    return reply;\n  }\n  if (command instanceof commands_1.Msg) {\n    return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n  }\n  // is this a legacy find command?\n  if (command.query && command.query.$query != null) {\n    return {\n      ok: 1,\n      cursor: {\n        id: (0, utils_1.deepCopy)(reply.cursorId),\n        ns: namespace(command),\n        firstBatch: (0, utils_1.deepCopy)(reply.documents)\n      }\n    };\n  }\n  return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n}\nfunction extractConnectionDetails(connection) {\n  let connectionId;\n  if ('id' in connection) {\n    connectionId = connection.id;\n  }\n  return {\n    address: connection.address,\n    serviceId: connection.serviceId,\n    connectionId\n  };\n}","map":{"version":3,"mappings":"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","names":["CommandStartedEvent","constructor","connection","command","constants_1","cmd","extractCommand","commandName","extractCommandName","address","connectionId","serviceId","extractConnectionDetails","exports","has","commandObj","requestId","databaseName","maybeRedact","hasServiceId","CommandSucceededEvent","reply","started","duration","extractReply","CommandFailedEvent","error","failure","Set","HELLO_COMMANDS","commandDoc","Object","keys","namespace","ns","split","collectionName","result","speculativeAuthenticate","LEGACY_FIND_QUERY_MAP","$query","$orderby","$hint","$comment","$maxScan","$max","$min","$returnKey","$showDiskLoc","$maxTimeMS","$snapshot","LEGACY_FIND_OPTIONS_MAP","numberToSkip","numberToReturn","returnFieldSelector","OP_QUERY_KEYS","commands_1","query","assign","find","forEach","key","legacyKey","pre32Limit","limit","$explain","explain","clonedQuery","clonedCommand","k","ok","cursor","id","cursorId","firstBatch","documents"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\cmap\\command_monitoring_events.ts"],"sourcesContent":["import type { Document, ObjectId } from '../bson';\r\nimport {\r\n  COMMAND_FAILED,\r\n  COMMAND_STARTED,\r\n  COMMAND_SUCCEEDED,\r\n  LEGACY_HELLO_COMMAND,\r\n  LEGACY_HELLO_COMMAND_CAMEL_CASE\r\n} from '../constants';\r\nimport { calculateDurationInMs, deepCopy } from '../utils';\r\nimport { Msg, type WriteProtocolMessageType } from './commands';\r\nimport type { Connection } from './connection';\r\n\r\n/**\r\n * An event indicating the start of a given command\r\n * @public\r\n * @category Event\r\n */\r\nexport class CommandStartedEvent {\r\n  commandObj?: Document;\r\n  requestId: number;\r\n  databaseName: string;\r\n  commandName: string;\r\n  command: Document;\r\n  address: string;\r\n  connectionId?: string | number;\r\n  serviceId?: ObjectId;\r\n  /** @internal */\r\n  name = COMMAND_STARTED;\r\n\r\n  /**\r\n   * Create a started event\r\n   *\r\n   * @internal\r\n   * @param pool - the pool that originated the command\r\n   * @param command - the command\r\n   */\r\n  constructor(connection: Connection, command: WriteProtocolMessageType) {\r\n    const cmd = extractCommand(command);\r\n    const commandName = extractCommandName(cmd);\r\n    const { address, connectionId, serviceId } = extractConnectionDetails(connection);\r\n\r\n    // TODO: remove in major revision, this is not spec behavior\r\n    if (SENSITIVE_COMMANDS.has(commandName)) {\r\n      this.commandObj = {};\r\n      this.commandObj[commandName] = true;\r\n    }\r\n\r\n    this.address = address;\r\n    this.connectionId = connectionId;\r\n    this.serviceId = serviceId;\r\n    this.requestId = command.requestId;\r\n    this.databaseName = databaseName(command);\r\n    this.commandName = commandName;\r\n    this.command = maybeRedact(commandName, cmd, cmd);\r\n  }\r\n\r\n  /* @internal */\r\n  get hasServiceId(): boolean {\r\n    return !!this.serviceId;\r\n  }\r\n}\r\n\r\n/**\r\n * An event indicating the success of a given command\r\n * @public\r\n * @category Event\r\n */\r\nexport class CommandSucceededEvent {\r\n  address: string;\r\n  connectionId?: string | number;\r\n  requestId: number;\r\n  duration: number;\r\n  commandName: string;\r\n  reply: unknown;\r\n  serviceId?: ObjectId;\r\n  /** @internal */\r\n  name = COMMAND_SUCCEEDED;\r\n\r\n  /**\r\n   * Create a succeeded event\r\n   *\r\n   * @internal\r\n   * @param pool - the pool that originated the command\r\n   * @param command - the command\r\n   * @param reply - the reply for this command from the server\r\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\r\n   */\r\n  constructor(\r\n    connection: Connection,\r\n    command: WriteProtocolMessageType,\r\n    reply: Document | undefined,\r\n    started: number\r\n  ) {\r\n    const cmd = extractCommand(command);\r\n    const commandName = extractCommandName(cmd);\r\n    const { address, connectionId, serviceId } = extractConnectionDetails(connection);\r\n\r\n    this.address = address;\r\n    this.connectionId = connectionId;\r\n    this.serviceId = serviceId;\r\n    this.requestId = command.requestId;\r\n    this.commandName = commandName;\r\n    this.duration = calculateDurationInMs(started);\r\n    this.reply = maybeRedact(commandName, cmd, extractReply(command, reply));\r\n  }\r\n\r\n  /* @internal */\r\n  get hasServiceId(): boolean {\r\n    return !!this.serviceId;\r\n  }\r\n}\r\n\r\n/**\r\n * An event indicating the failure of a given command\r\n * @public\r\n * @category Event\r\n */\r\nexport class CommandFailedEvent {\r\n  address: string;\r\n  connectionId?: string | number;\r\n  requestId: number;\r\n  duration: number;\r\n  commandName: string;\r\n  failure: Error;\r\n  serviceId?: ObjectId;\r\n  /** @internal */\r\n  name = COMMAND_FAILED;\r\n\r\n  /**\r\n   * Create a failure event\r\n   *\r\n   * @internal\r\n   * @param pool - the pool that originated the command\r\n   * @param command - the command\r\n   * @param error - the generated error or a server error response\r\n   * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\r\n   */\r\n  constructor(\r\n    connection: Connection,\r\n    command: WriteProtocolMessageType,\r\n    error: Error | Document,\r\n    started: number\r\n  ) {\r\n    const cmd = extractCommand(command);\r\n    const commandName = extractCommandName(cmd);\r\n    const { address, connectionId, serviceId } = extractConnectionDetails(connection);\r\n\r\n    this.address = address;\r\n    this.connectionId = connectionId;\r\n    this.serviceId = serviceId;\r\n\r\n    this.requestId = command.requestId;\r\n    this.commandName = commandName;\r\n    this.duration = calculateDurationInMs(started);\r\n    this.failure = maybeRedact(commandName, cmd, error) as Error;\r\n  }\r\n\r\n  /* @internal */\r\n  get hasServiceId(): boolean {\r\n    return !!this.serviceId;\r\n  }\r\n}\r\n\r\n/**\r\n * Commands that we want to redact because of the sensitive nature of their contents\r\n * @internal\r\n */\r\nexport const SENSITIVE_COMMANDS = new Set([\r\n  'authenticate',\r\n  'saslStart',\r\n  'saslContinue',\r\n  'getnonce',\r\n  'createUser',\r\n  'updateUser',\r\n  'copydbgetnonce',\r\n  'copydbsaslstart',\r\n  'copydb'\r\n]);\r\n\r\nconst HELLO_COMMANDS = new Set(['hello', LEGACY_HELLO_COMMAND, LEGACY_HELLO_COMMAND_CAMEL_CASE]);\r\n\r\n// helper methods\r\nconst extractCommandName = (commandDoc: Document) => Object.keys(commandDoc)[0];\r\nconst namespace = (command: WriteProtocolMessageType) => command.ns;\r\nconst databaseName = (command: WriteProtocolMessageType) => command.ns.split('.')[0];\r\nconst collectionName = (command: WriteProtocolMessageType) => command.ns.split('.')[1];\r\nconst maybeRedact = (commandName: string, commandDoc: Document, result: Error | Document) =>\r\n  SENSITIVE_COMMANDS.has(commandName) ||\r\n  (HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate)\r\n    ? {}\r\n    : result;\r\n\r\nconst LEGACY_FIND_QUERY_MAP: { [key: string]: string } = {\r\n  $query: 'filter',\r\n  $orderby: 'sort',\r\n  $hint: 'hint',\r\n  $comment: 'comment',\r\n  $maxScan: 'maxScan',\r\n  $max: 'max',\r\n  $min: 'min',\r\n  $returnKey: 'returnKey',\r\n  $showDiskLoc: 'showRecordId',\r\n  $maxTimeMS: 'maxTimeMS',\r\n  $snapshot: 'snapshot'\r\n};\r\n\r\nconst LEGACY_FIND_OPTIONS_MAP = {\r\n  numberToSkip: 'skip',\r\n  numberToReturn: 'batchSize',\r\n  returnFieldSelector: 'projection'\r\n} as const;\r\n\r\nconst OP_QUERY_KEYS = [\r\n  'tailable',\r\n  'oplogReplay',\r\n  'noCursorTimeout',\r\n  'awaitData',\r\n  'partial',\r\n  'exhaust'\r\n] as const;\r\n\r\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\r\nfunction extractCommand(command: WriteProtocolMessageType): Document {\r\n  if (command instanceof Msg) {\r\n    return deepCopy(command.command);\r\n  }\r\n\r\n  if (command.query?.$query) {\r\n    let result: Document;\r\n    if (command.ns === 'admin.$cmd') {\r\n      // up-convert legacy command\r\n      result = Object.assign({}, command.query.$query);\r\n    } else {\r\n      // up-convert legacy find command\r\n      result = { find: collectionName(command) };\r\n      Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\r\n        if (command.query[key] != null) {\r\n          result[LEGACY_FIND_QUERY_MAP[key]] = deepCopy(command.query[key]);\r\n        }\r\n      });\r\n    }\r\n\r\n    Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\r\n      const legacyKey = key as keyof typeof LEGACY_FIND_OPTIONS_MAP;\r\n      if (command[legacyKey] != null) {\r\n        result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = deepCopy(command[legacyKey]);\r\n      }\r\n    });\r\n\r\n    OP_QUERY_KEYS.forEach(key => {\r\n      if (command[key]) {\r\n        result[key] = command[key];\r\n      }\r\n    });\r\n\r\n    if (command.pre32Limit != null) {\r\n      result.limit = command.pre32Limit;\r\n    }\r\n\r\n    if (command.query.$explain) {\r\n      return { explain: result };\r\n    }\r\n    return result;\r\n  }\r\n\r\n  const clonedQuery: Record<string, unknown> = {};\r\n  const clonedCommand: Record<string, unknown> = {};\r\n  if (command.query) {\r\n    for (const k in command.query) {\r\n      clonedQuery[k] = deepCopy(command.query[k]);\r\n    }\r\n    clonedCommand.query = clonedQuery;\r\n  }\r\n\r\n  for (const k in command) {\r\n    if (k === 'query') continue;\r\n    clonedCommand[k] = deepCopy((command as unknown as Record<string, unknown>)[k]);\r\n  }\r\n  return command.query ? clonedQuery : clonedCommand;\r\n}\r\n\r\nfunction extractReply(command: WriteProtocolMessageType, reply?: Document) {\r\n  if (!reply) {\r\n    return reply;\r\n  }\r\n\r\n  if (command instanceof Msg) {\r\n    return deepCopy(reply.result ? reply.result : reply);\r\n  }\r\n\r\n  // is this a legacy find command?\r\n  if (command.query && command.query.$query != null) {\r\n    return {\r\n      ok: 1,\r\n      cursor: {\r\n        id: deepCopy(reply.cursorId),\r\n        ns: namespace(command),\r\n        firstBatch: deepCopy(reply.documents)\r\n      }\r\n    };\r\n  }\r\n\r\n  return deepCopy(reply.result ? reply.result : reply);\r\n}\r\n\r\nfunction extractConnectionDetails(connection: Connection) {\r\n  let connectionId;\r\n  if ('id' in connection) {\r\n    connectionId = connection.id;\r\n  }\r\n  return {\r\n    address: connection.address,\r\n    serviceId: connection.serviceId,\r\n    connectionId\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}