{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoCredentials = exports.DEFAULT_ALLOWED_HOSTS = void 0;\nconst error_1 = require(\"../../error\");\nconst gssapi_1 = require(\"./gssapi\");\nconst providers_1 = require(\"./providers\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello) {\n  if (hello) {\n    // If hello contains saslSupportedMechs, use scram-sha-256\n    // if it is available, else scram-sha-1\n    if (Array.isArray(hello.saslSupportedMechs)) {\n      return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n    if (hello.maxWireVersion >= 3) {\n      return providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n    }\n  }\n  // Default for wireprotocol < 3\n  return providers_1.AuthMechanism.MONGODB_CR;\n}\nconst ALLOWED_PROVIDER_NAMES = ['aws', 'azure'];\nconst ALLOWED_HOSTS_ERROR = 'Auth mechanism property ALLOWED_HOSTS must be an array of strings.';\n/** @internal */\nexports.DEFAULT_ALLOWED_HOSTS = ['*.mongodb.net', '*.mongodb-dev.net', '*.mongodbgov.net', 'localhost', '127.0.0.1', '::1'];\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_AUDIENCE_MISSING_ERROR = 'TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.';\n/**\r\n * A representation of the credentials used by MongoDB\r\n * @public\r\n */\nclass MongoCredentials {\n  constructor(options) {\n    this.username = options.username ?? '';\n    this.password = options.password;\n    this.source = options.source;\n    if (!this.source && options.db) {\n      this.source = options.db;\n    }\n    this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n    this.mechanismProperties = options.mechanismProperties || {};\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n        this.username = process.env.AWS_ACCESS_KEY_ID;\n      }\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\n      }\n      if (this.mechanismProperties.AWS_SESSION_TOKEN == null && process.env.AWS_SESSION_TOKEN != null) {\n        this.mechanismProperties = {\n          ...this.mechanismProperties,\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n        };\n      }\n    }\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC && !this.mechanismProperties.ALLOWED_HOSTS) {\n      this.mechanismProperties = {\n        ...this.mechanismProperties,\n        ALLOWED_HOSTS: exports.DEFAULT_ALLOWED_HOSTS\n      };\n    }\n    Object.freeze(this.mechanismProperties);\n    Object.freeze(this);\n  }\n  /** Determines if two MongoCredentials objects are equivalent */\n  equals(other) {\n    return this.mechanism === other.mechanism && this.username === other.username && this.password === other.password && this.source === other.source;\n  }\n  /**\r\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\r\n   * based on the server version and server supported sasl mechanisms.\r\n   *\r\n   * @param hello - A hello response from the server\r\n   */\n  resolveAuthMechanism(hello) {\n    // If the mechanism is not \"default\", then it does not need to be resolved\n    if (this.mechanism.match(/DEFAULT/i)) {\n      return new MongoCredentials({\n        username: this.username,\n        password: this.password,\n        source: this.source,\n        mechanism: getDefaultAuthMechanism(hello),\n        mechanismProperties: this.mechanismProperties\n      });\n    }\n    return this;\n  }\n  validate() {\n    if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI || this.mechanism === providers_1.AuthMechanism.MONGODB_CR || this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 || this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) && !this.username) {\n      throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n    }\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n      if (this.username && this.mechanismProperties.PROVIDER_NAME) {\n        throw new error_1.MongoInvalidArgumentError(`username and PROVIDER_NAME may not be used together for mechanism '${this.mechanism}'.`);\n      }\n      if (this.mechanismProperties.PROVIDER_NAME === 'azure' && !this.mechanismProperties.TOKEN_AUDIENCE) {\n        throw new error_1.MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n      }\n      if (this.mechanismProperties.PROVIDER_NAME && !ALLOWED_PROVIDER_NAMES.includes(this.mechanismProperties.PROVIDER_NAME)) {\n        throw new error_1.MongoInvalidArgumentError(`Currently only a PROVIDER_NAME in ${ALLOWED_PROVIDER_NAMES.join(',')} is supported for mechanism '${this.mechanism}'.`);\n      }\n      if (this.mechanismProperties.REFRESH_TOKEN_CALLBACK && !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n        throw new error_1.MongoInvalidArgumentError(`A REQUEST_TOKEN_CALLBACK must be provided when using a REFRESH_TOKEN_CALLBACK for mechanism '${this.mechanism}'`);\n      }\n      if (!this.mechanismProperties.PROVIDER_NAME && !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n        throw new error_1.MongoInvalidArgumentError(`Either a PROVIDER_NAME or a REQUEST_TOKEN_CALLBACK must be specified for mechanism '${this.mechanism}'.`);\n      }\n      if (this.mechanismProperties.ALLOWED_HOSTS) {\n        const hosts = this.mechanismProperties.ALLOWED_HOSTS;\n        if (!Array.isArray(hosts)) {\n          throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n        }\n        for (const host of hosts) {\n          if (typeof host !== 'string') {\n            throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n          }\n        }\n      }\n    }\n    if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n      if (this.source != null && this.source !== '$external') {\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n        throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n      }\n    }\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n    }\n    if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n      if (this.password === '') {\n        Reflect.set(this, 'password', undefined);\n        return;\n      }\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n      throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n    }\n    const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n    if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n      throw new error_1.MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n    }\n  }\n  static merge(creds, options) {\n    return new MongoCredentials({\n      username: options.username ?? creds?.username ?? '',\n      password: options.password ?? creds?.password ?? '',\n      mechanism: options.mechanism ?? creds?.mechanism ?? providers_1.AuthMechanism.MONGODB_DEFAULT,\n      mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n      source: options.source ?? options.db ?? creds?.source ?? 'admin'\n    });\n  }\n}\nexports.MongoCredentials = MongoCredentials;","map":{"version":3,"mappings":"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","names":["getDefaultAuthMechanism","hello","Array","isArray","saslSupportedMechs","includes","providers_1","MONGODB_SCRAM_SHA256","MONGODB_SCRAM_SHA1","maxWireVersion","MONGODB_CR","ALLOWED_PROVIDER_NAMES","ALLOWED_HOSTS_ERROR","exports","TOKEN_AUDIENCE_MISSING_ERROR","MongoCredentials","constructor","options","username","password","source","db","mechanism","MONGODB_DEFAULT","mechanismProperties","match","process","env","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","MONGODB_OIDC","ALLOWED_HOSTS","Object","freeze","equals","other","resolveAuthMechanism","validate","MONGODB_GSSAPI","MONGODB_PLAIN","error_1","PROVIDER_NAME","TOKEN_AUDIENCE","join","REFRESH_TOKEN_CALLBACK","REQUEST_TOKEN_CALLBACK","hosts","host","has","MONGODB_X509","Reflect","set","undefined","canonicalization","CANONICALIZE_HOST_NAME","values","gssapi_1","merge","creds"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\cmap\\auth\\mongo_credentials.ts"],"sourcesContent":["// Resolves the default auth mechanism according to\r\n// Resolves the default auth mechanism according to\r\nimport type { Document } from '../../bson';\r\nimport {\r\n  MongoAPIError,\r\n  MongoAzureError,\r\n  MongoInvalidArgumentError,\r\n  MongoMissingCredentialsError\r\n} from '../../error';\r\nimport { GSSAPICanonicalizationValue } from './gssapi';\r\nimport type { OIDCRefreshFunction, OIDCRequestFunction } from './mongodb_oidc';\r\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './providers';\r\n\r\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\r\nfunction getDefaultAuthMechanism(hello?: Document): AuthMechanism {\r\n  if (hello) {\r\n    // If hello contains saslSupportedMechs, use scram-sha-256\r\n    // if it is available, else scram-sha-1\r\n    if (Array.isArray(hello.saslSupportedMechs)) {\r\n      return hello.saslSupportedMechs.includes(AuthMechanism.MONGODB_SCRAM_SHA256)\r\n        ? AuthMechanism.MONGODB_SCRAM_SHA256\r\n        : AuthMechanism.MONGODB_SCRAM_SHA1;\r\n    }\r\n\r\n    // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\r\n    if (hello.maxWireVersion >= 3) {\r\n      return AuthMechanism.MONGODB_SCRAM_SHA1;\r\n    }\r\n  }\r\n\r\n  // Default for wireprotocol < 3\r\n  return AuthMechanism.MONGODB_CR;\r\n}\r\n\r\nconst ALLOWED_PROVIDER_NAMES: AuthMechanismProperties['PROVIDER_NAME'][] = ['aws', 'azure'];\r\nconst ALLOWED_HOSTS_ERROR = 'Auth mechanism property ALLOWED_HOSTS must be an array of strings.';\r\n\r\n/** @internal */\r\nexport const DEFAULT_ALLOWED_HOSTS = [\r\n  '*.mongodb.net',\r\n  '*.mongodb-dev.net',\r\n  '*.mongodbgov.net',\r\n  'localhost',\r\n  '127.0.0.1',\r\n  '::1'\r\n];\r\n\r\n/** Error for when the token audience is missing in the environment. */\r\nconst TOKEN_AUDIENCE_MISSING_ERROR =\r\n  'TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.';\r\n\r\n/** @public */\r\nexport interface AuthMechanismProperties extends Document {\r\n  SERVICE_HOST?: string;\r\n  SERVICE_NAME?: string;\r\n  SERVICE_REALM?: string;\r\n  CANONICALIZE_HOST_NAME?: GSSAPICanonicalizationValue;\r\n  AWS_SESSION_TOKEN?: string;\r\n  /** @experimental */\r\n  REQUEST_TOKEN_CALLBACK?: OIDCRequestFunction;\r\n  /** @experimental */\r\n  REFRESH_TOKEN_CALLBACK?: OIDCRefreshFunction;\r\n  /** @experimental */\r\n  PROVIDER_NAME?: 'aws' | 'azure';\r\n  /** @experimental */\r\n  ALLOWED_HOSTS?: string[];\r\n  /** @experimental */\r\n  TOKEN_AUDIENCE?: string;\r\n}\r\n\r\n/** @public */\r\nexport interface MongoCredentialsOptions {\r\n  username?: string;\r\n  password: string;\r\n  source: string;\r\n  db?: string;\r\n  mechanism?: AuthMechanism;\r\n  mechanismProperties: AuthMechanismProperties;\r\n}\r\n\r\n/**\r\n * A representation of the credentials used by MongoDB\r\n * @public\r\n */\r\nexport class MongoCredentials {\r\n  /** The username used for authentication */\r\n  readonly username: string;\r\n  /** The password used for authentication */\r\n  readonly password: string;\r\n  /** The database that the user should authenticate against */\r\n  readonly source: string;\r\n  /** The method used to authenticate */\r\n  readonly mechanism: AuthMechanism;\r\n  /** Special properties used by some types of auth mechanisms */\r\n  readonly mechanismProperties: AuthMechanismProperties;\r\n\r\n  constructor(options: MongoCredentialsOptions) {\r\n    this.username = options.username ?? '';\r\n    this.password = options.password;\r\n    this.source = options.source;\r\n    if (!this.source && options.db) {\r\n      this.source = options.db;\r\n    }\r\n    this.mechanism = options.mechanism || AuthMechanism.MONGODB_DEFAULT;\r\n    this.mechanismProperties = options.mechanismProperties || {};\r\n\r\n    if (this.mechanism.match(/MONGODB-AWS/i)) {\r\n      if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\r\n        this.username = process.env.AWS_ACCESS_KEY_ID;\r\n      }\r\n\r\n      if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\r\n        this.password = process.env.AWS_SECRET_ACCESS_KEY;\r\n      }\r\n\r\n      if (\r\n        this.mechanismProperties.AWS_SESSION_TOKEN == null &&\r\n        process.env.AWS_SESSION_TOKEN != null\r\n      ) {\r\n        this.mechanismProperties = {\r\n          ...this.mechanismProperties,\r\n          AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\r\n        };\r\n      }\r\n    }\r\n\r\n    if (this.mechanism === AuthMechanism.MONGODB_OIDC && !this.mechanismProperties.ALLOWED_HOSTS) {\r\n      this.mechanismProperties = {\r\n        ...this.mechanismProperties,\r\n        ALLOWED_HOSTS: DEFAULT_ALLOWED_HOSTS\r\n      };\r\n    }\r\n\r\n    Object.freeze(this.mechanismProperties);\r\n    Object.freeze(this);\r\n  }\r\n\r\n  /** Determines if two MongoCredentials objects are equivalent */\r\n  equals(other: MongoCredentials): boolean {\r\n    return (\r\n      this.mechanism === other.mechanism &&\r\n      this.username === other.username &&\r\n      this.password === other.password &&\r\n      this.source === other.source\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the authentication mechanism is set to \"default\", resolves the authMechanism\r\n   * based on the server version and server supported sasl mechanisms.\r\n   *\r\n   * @param hello - A hello response from the server\r\n   */\r\n  resolveAuthMechanism(hello?: Document): MongoCredentials {\r\n    // If the mechanism is not \"default\", then it does not need to be resolved\r\n    if (this.mechanism.match(/DEFAULT/i)) {\r\n      return new MongoCredentials({\r\n        username: this.username,\r\n        password: this.password,\r\n        source: this.source,\r\n        mechanism: getDefaultAuthMechanism(hello),\r\n        mechanismProperties: this.mechanismProperties\r\n      });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  validate(): void {\r\n    if (\r\n      (this.mechanism === AuthMechanism.MONGODB_GSSAPI ||\r\n        this.mechanism === AuthMechanism.MONGODB_CR ||\r\n        this.mechanism === AuthMechanism.MONGODB_PLAIN ||\r\n        this.mechanism === AuthMechanism.MONGODB_SCRAM_SHA1 ||\r\n        this.mechanism === AuthMechanism.MONGODB_SCRAM_SHA256) &&\r\n      !this.username\r\n    ) {\r\n      throw new MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\r\n    }\r\n\r\n    if (this.mechanism === AuthMechanism.MONGODB_OIDC) {\r\n      if (this.username && this.mechanismProperties.PROVIDER_NAME) {\r\n        throw new MongoInvalidArgumentError(\r\n          `username and PROVIDER_NAME may not be used together for mechanism '${this.mechanism}'.`\r\n        );\r\n      }\r\n\r\n      if (\r\n        this.mechanismProperties.PROVIDER_NAME === 'azure' &&\r\n        !this.mechanismProperties.TOKEN_AUDIENCE\r\n      ) {\r\n        throw new MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\r\n      }\r\n\r\n      if (\r\n        this.mechanismProperties.PROVIDER_NAME &&\r\n        !ALLOWED_PROVIDER_NAMES.includes(this.mechanismProperties.PROVIDER_NAME)\r\n      ) {\r\n        throw new MongoInvalidArgumentError(\r\n          `Currently only a PROVIDER_NAME in ${ALLOWED_PROVIDER_NAMES.join(\r\n            ','\r\n          )} is supported for mechanism '${this.mechanism}'.`\r\n        );\r\n      }\r\n\r\n      if (\r\n        this.mechanismProperties.REFRESH_TOKEN_CALLBACK &&\r\n        !this.mechanismProperties.REQUEST_TOKEN_CALLBACK\r\n      ) {\r\n        throw new MongoInvalidArgumentError(\r\n          `A REQUEST_TOKEN_CALLBACK must be provided when using a REFRESH_TOKEN_CALLBACK for mechanism '${this.mechanism}'`\r\n        );\r\n      }\r\n\r\n      if (\r\n        !this.mechanismProperties.PROVIDER_NAME &&\r\n        !this.mechanismProperties.REQUEST_TOKEN_CALLBACK\r\n      ) {\r\n        throw new MongoInvalidArgumentError(\r\n          `Either a PROVIDER_NAME or a REQUEST_TOKEN_CALLBACK must be specified for mechanism '${this.mechanism}'.`\r\n        );\r\n      }\r\n\r\n      if (this.mechanismProperties.ALLOWED_HOSTS) {\r\n        const hosts = this.mechanismProperties.ALLOWED_HOSTS;\r\n        if (!Array.isArray(hosts)) {\r\n          throw new MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\r\n        }\r\n        for (const host of hosts) {\r\n          if (typeof host !== 'string') {\r\n            throw new MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\r\n      if (this.source != null && this.source !== '$external') {\r\n        // TODO(NODE-3485): Replace this with a MongoAuthValidationError\r\n        throw new MongoAPIError(\r\n          `Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`\r\n        );\r\n      }\r\n    }\r\n\r\n    if (this.mechanism === AuthMechanism.MONGODB_PLAIN && this.source == null) {\r\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\r\n      throw new MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\r\n    }\r\n\r\n    if (this.mechanism === AuthMechanism.MONGODB_X509 && this.password != null) {\r\n      if (this.password === '') {\r\n        Reflect.set(this, 'password', undefined);\r\n        return;\r\n      }\r\n      // TODO(NODE-3485): Replace this with a MongoAuthValidationError\r\n      throw new MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\r\n    }\r\n\r\n    const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\r\n    if (!Object.values(GSSAPICanonicalizationValue).includes(canonicalization)) {\r\n      throw new MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\r\n    }\r\n  }\r\n\r\n  static merge(\r\n    creds: MongoCredentials | undefined,\r\n    options: Partial<MongoCredentialsOptions>\r\n  ): MongoCredentials {\r\n    return new MongoCredentials({\r\n      username: options.username ?? creds?.username ?? '',\r\n      password: options.password ?? creds?.password ?? '',\r\n      mechanism: options.mechanism ?? creds?.mechanism ?? AuthMechanism.MONGODB_DEFAULT,\r\n      mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\r\n      source: options.source ?? options.db ?? creds?.source ?? 'admin'\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}