{"ast":null,"code":"import jwt from 'jsonwebtoken';\nexport const verifyToken = (req, res, next) => {\n  const token = req.cookies.accessToken;\n  if (!token) {\n    return res.status(401).json({\n      success: false,\n      message: \" You are not authorized \"\n    });\n  }\n  jwt.verify(token, process.env.JWT_SECRET_KEY, (err, user) => {\n    if (err) {\n      return res.status(401).json({\n        success: false,\n        message: \" token is invalid \"\n      });\n    }\n    req.user = user;\n    next();\n  });\n};\nexport const verifyUser = (req, res, next) => {\n  verifyToken(req, res, next, () => {\n    if (req.user.id === req.params.id || req.user.role === 'admin') {\n      next();\n    } else {\n      return res.status(401).json({\n        success: false,\n        message: \" you're not authenticated \"\n      });\n    }\n  });\n};\nexport const verifyAdmin = (req, res, next) => {\n  verifyToken(req, res, next, () => {\n    if (req.user.role === 'admin') {\n      next();\n    } else {\n      return res.status(401).json({\n        success: false,\n        message: \" you're not authorize\"\n      });\n    }\n  });\n};","map":{"version":3,"names":["jwt","verifyToken","req","res","next","token","cookies","accessToken","status","json","success","message","verify","process","env","JWT_SECRET_KEY","err","user","verifyUser","id","params","role","verifyAdmin"],"sources":["C:/Users/joelg/Downloads/MernStack-Tour-Management-main/MernStack-Tour-Management-main/tour-management/frontend/src/router/ProtectedRoute.js"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\nexport const verifyToken = (req,res,next)=> {\r\n    const token = req.cookies.accessToken\r\n\r\nif(!token){\r\n    return res.status(401).json({success:false, message:\" You are not authorized \"})\r\n}\r\n\r\njwt.verify(token, process.env.JWT_SECRET_KEY,  (err,user)=>{\r\n    if(err){\r\n        return res.status(401).json({success:false, message:\" token is invalid \"})\r\n    }\r\n\r\n    req.user = user\r\n    next()\r\n})\r\n\r\n\r\n}\r\n\r\n\r\nexport const verifyUser = (req, res, next)=> {\r\n    verifyToken(req,res,next,()=>{\r\n        if(req.user.id === req.params.id || req.user.role === 'admin'){\r\n            next();\r\n        }else{\r\n\r\n           return res\r\n            .status(401).\r\n            json({success:false, message:\" you're not authenticated \"})\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport const verifyAdmin = (req, res, next)=> {\r\n    verifyToken(req,res,next,() => {\r\n        if( req.user.role === 'admin'){\r\n            next();\r\n        }else{\r\n\r\n           return res\r\n            .status(401)\r\n            .json({success:false, message:\" you're not authorize\"})\r\n        }\r\n    })\r\n}"],"mappings":"AAAA,OAAOA,GAAG,MAAM,cAAc;AAC9B,OAAO,MAAMC,WAAW,GAAG,CAACC,GAAG,EAACC,GAAG,EAACC,IAAI,KAAI;EACxC,MAAMC,KAAK,GAAGH,GAAG,CAACI,OAAO,CAACC,WAAW;EAEzC,IAAG,CAACF,KAAK,EAAC;IACN,OAAOF,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAACC,OAAO,EAAC,KAAK;MAAEC,OAAO,EAAC;IAA0B,CAAC,CAAC;EACpF;EAEAX,GAAG,CAACY,MAAM,CAACP,KAAK,EAAEQ,OAAO,CAACC,GAAG,CAACC,cAAc,EAAG,CAACC,GAAG,EAACC,IAAI,KAAG;IACvD,IAAGD,GAAG,EAAC;MACH,OAAOb,GAAG,CAACK,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAACC,OAAO,EAAC,KAAK;QAAEC,OAAO,EAAC;MAAoB,CAAC,CAAC;IAC9E;IAEAT,GAAG,CAACe,IAAI,GAAGA,IAAI;IACfb,IAAI,EAAE;EACV,CAAC,CAAC;AAGF,CAAC;AAGD,OAAO,MAAMc,UAAU,GAAG,CAAChB,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAI;EACzCH,WAAW,CAACC,GAAG,EAACC,GAAG,EAACC,IAAI,EAAC,MAAI;IACzB,IAAGF,GAAG,CAACe,IAAI,CAACE,EAAE,KAAKjB,GAAG,CAACkB,MAAM,CAACD,EAAE,IAAIjB,GAAG,CAACe,IAAI,CAACI,IAAI,KAAK,OAAO,EAAC;MAC1DjB,IAAI,EAAE;IACV,CAAC,MAAI;MAEF,OAAOD,GAAG,CACRK,MAAM,CAAC,GAAG,CAAC,CACZC,IAAI,CAAC;QAACC,OAAO,EAAC,KAAK;QAAEC,OAAO,EAAC;MAA4B,CAAC,CAAC;IAC/D;EACJ,CAAC,CAAC;AACN,CAAC;AAGD,OAAO,MAAMW,WAAW,GAAG,CAACpB,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAI;EAC1CH,WAAW,CAACC,GAAG,EAACC,GAAG,EAACC,IAAI,EAAC,MAAM;IAC3B,IAAIF,GAAG,CAACe,IAAI,CAACI,IAAI,KAAK,OAAO,EAAC;MAC1BjB,IAAI,EAAE;IACV,CAAC,MAAI;MAEF,OAAOD,GAAG,CACRK,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC;QAACC,OAAO,EAAC,KAAK;QAAEC,OAAO,EAAC;MAAuB,CAAC,CAAC;IAC3D;EACJ,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}