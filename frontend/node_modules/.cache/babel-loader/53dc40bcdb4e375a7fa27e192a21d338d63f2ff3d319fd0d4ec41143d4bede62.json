{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joelg\\\\Downloads\\\\MernStack-Tour-Management-main\\\\MernStack-Tour-Management-main\\\\tour-management\\\\frontend\\\\src\\\\router\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from \"react\";\nimport { Navigate, Outlet } from \"react-router-dom\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  roles\n}) => {\n  _s();\n  const {\n    user,\n    isAuthenticated,\n    role\n  } = useContext(AuthContext);\n\n  // Check if the user is authenticated\n  if (!isAuthenticated) {\n    // Redirect unauthenticated users to the login page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if the route is accessible to the user's role\n  if (roles && roles.length > 0 && !roles.includes(role)) {\n    // Redirect to a restricted access page (or some other page)\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/restricted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If none of the conditions are met, allow access to the route\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 10\n  }, this);\n};\n_s(ProtectedRoute, \"NxXzifGalbMQGSzL3xb8kKdNlus=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useContext","Navigate","Outlet","AuthContext","ProtectedRoute","roles","user","isAuthenticated","role","length","includes"],"sources":["C:/Users/joelg/Downloads/MernStack-Tour-Management-main/MernStack-Tour-Management-main/tour-management/frontend/src/router/ProtectedRoute.js"],"sourcesContent":["import React, { useContext } from \"react\";\r\nimport { Navigate, Outlet } from \"react-router-dom\";\r\nimport { AuthContext } from \"../context/AuthContext\";\r\n\r\nconst ProtectedRoute = ({ roles }) => {\r\n  const { user, isAuthenticated, role } = useContext(AuthContext);\r\n\r\n  // Check if the user is authenticated\r\n  if (!isAuthenticated) {\r\n    // Redirect unauthenticated users to the login page\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  // Check if the route is accessible to the user's role\r\n  if (roles && roles.length > 0 && !roles.includes(role)) {\r\n    // Redirect to a restricted access page (or some other page)\r\n    return <Navigate to=\"/restricted\" />;\r\n  }\r\n\r\n  // If none of the conditions are met, allow access to the route\r\n  return <Outlet />;\r\n};\r\n\r\nexport default ProtectedRoute;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,SAASC,WAAW,QAAQ,wBAAwB;AAAC;AAErD,MAAMC,cAAc,GAAG,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAA;EACpC,MAAM;IAAEC,IAAI;IAAEC,eAAe;IAAEC;EAAK,CAAC,GAAGR,UAAU,CAACG,WAAW,CAAC;;EAE/D;EACA,IAAI,CAACI,eAAe,EAAE;IACpB;IACA,oBAAO,QAAC,QAAQ;MAAC,EAAE,EAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAG;EACjC;;EAEA;EACA,IAAIF,KAAK,IAAIA,KAAK,CAACI,MAAM,GAAG,CAAC,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAACF,IAAI,CAAC,EAAE;IACtD;IACA,oBAAO,QAAC,QAAQ;MAAC,EAAE,EAAC;IAAa;MAAA;MAAA;MAAA;IAAA,QAAG;EACtC;;EAEA;EACA,oBAAO,QAAC,MAAM;IAAA;IAAA;IAAA;EAAA,QAAG;AACnB,CAAC;AAAC,GAjBIJ,cAAc;AAAA,KAAdA,cAAc;AAmBpB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}