{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Admin = void 0;\nconst add_user_1 = require(\"./operations/add_user\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst list_databases_1 = require(\"./operations/list_databases\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst validate_collection_1 = require(\"./operations/validate_collection\");\n/**\r\n * The **Admin** class is an internal class that allows convenient access to\r\n * the admin functionality and commands for MongoDB.\r\n *\r\n * **ADMIN Cannot directly be instantiated**\r\n * @public\r\n *\r\n * @example\r\n * ```ts\r\n * import { MongoClient } from 'mongodb';\r\n *\r\n * const client = new MongoClient('mongodb://localhost:27017');\r\n * const admin = client.db().admin();\r\n * const dbInfo = await admin.listDatabases();\r\n * for (const db of dbInfo.databases) {\r\n *   console.log(db.name);\r\n * }\r\n * ```\r\n */\nclass Admin {\n  /**\r\n   * Create a new Admin instance\r\n   * @internal\r\n   */\n  constructor(db) {\n    this.s = {\n      db\n    };\n  }\n  /**\r\n   * Execute a command\r\n   *\r\n   * The driver will ensure the following fields are attached to the command sent to the server:\r\n   * - `lsid` - sourced from an implicit session or options.session\r\n   * - `$readPreference` - defaults to primary or can be configured by options.readPreference\r\n   * - `$db` - sourced from the name of this database\r\n   *\r\n   * If the client has a serverApi setting:\r\n   * - `apiVersion`\r\n   * - `apiStrict`\r\n   * - `apiDeprecationErrors`\r\n   *\r\n   * When in a transaction:\r\n   * - `readConcern` - sourced from readConcern set on the TransactionOptions\r\n   * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\r\n   *\r\n   * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\r\n   *\r\n   * @param command - The command to execute\r\n   * @param options - Optional settings for the command\r\n   */\n  async command(command, options) {\n    return (0, execute_operation_1.executeOperation)(this.s.db.client, new run_command_1.RunCommandOperation(this.s.db, command, {\n      dbName: 'admin',\n      ...options\n    }));\n  }\n  /**\r\n   * Retrieve the server build information\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\n  async buildInfo(options) {\n    return this.command({\n      buildinfo: 1\n    }, options);\n  }\n  /**\r\n   * Retrieve the server build information\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\n  async serverInfo(options) {\n    return this.command({\n      buildinfo: 1\n    }, options);\n  }\n  /**\r\n   * Retrieve this db's server status.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\n  async serverStatus(options) {\n    return this.command({\n      serverStatus: 1\n    }, options);\n  }\n  /**\r\n   * Ping the MongoDB server and retrieve results\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\n  async ping(options) {\n    return this.command({\n      ping: 1\n    }, options);\n  }\n  /**\r\n   * Add a user to the database\r\n   *\r\n   * @param username - The username for the new user\r\n   * @param passwordOrOptions - An optional password for the new user, or the options for the command\r\n   * @param options - Optional settings for the command\r\n   * @deprecated Use the createUser command in `db.command()` instead.\r\n   * @see https://www.mongodb.com/docs/manual/reference/command/createUser/\r\n   */\n  async addUser(username, passwordOrOptions, options) {\n    options = options != null && typeof options === 'object' ? options : passwordOrOptions != null && typeof passwordOrOptions === 'object' ? passwordOrOptions : undefined;\n    const password = typeof passwordOrOptions === 'string' ? passwordOrOptions : undefined;\n    return (0, execute_operation_1.executeOperation)(this.s.db.client, new add_user_1.AddUserOperation(this.s.db, username, password, {\n      dbName: 'admin',\n      ...options\n    }));\n  }\n  /**\r\n   * Remove a user from a database\r\n   *\r\n   * @param username - The username to remove\r\n   * @param options - Optional settings for the command\r\n   */\n  async removeUser(username, options) {\n    return (0, execute_operation_1.executeOperation)(this.s.db.client, new remove_user_1.RemoveUserOperation(this.s.db, username, {\n      dbName: 'admin',\n      ...options\n    }));\n  }\n  /**\r\n   * Validate an existing collection\r\n   *\r\n   * @param collectionName - The name of the collection to validate.\r\n   * @param options - Optional settings for the command\r\n   */\n  async validateCollection(collectionName, options = {}) {\n    return (0, execute_operation_1.executeOperation)(this.s.db.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options));\n  }\n  /**\r\n   * List the available databases\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\n  async listDatabases(options) {\n    return (0, execute_operation_1.executeOperation)(this.s.db.client, new list_databases_1.ListDatabasesOperation(this.s.db, options));\n  }\n  /**\r\n   * Get ReplicaSet status\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\n  async replSetGetStatus(options) {\n    return this.command({\n      replSetGetStatus: 1\n    }, options);\n  }\n}\nexports.Admin = Admin;","map":{"version":3,"mappings":"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","names":["Admin","constructor","db","s","command","options","client","run_command_1","dbName","buildInfo","buildinfo","serverInfo","serverStatus","ping","addUser","username","passwordOrOptions","undefined","password","add_user_1","removeUser","remove_user_1","validateCollection","collectionName","validate_collection_1","listDatabases","list_databases_1","replSetGetStatus","exports"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\admin.ts"],"sourcesContent":["import type { Document } from './bson';\r\nimport type { Db } from './db';\r\nimport { AddUserOperation, type AddUserOptions } from './operations/add_user';\r\nimport type { CommandOperationOptions } from './operations/command';\r\nimport { executeOperation } from './operations/execute_operation';\r\nimport {\r\n  ListDatabasesOperation,\r\n  type ListDatabasesOptions,\r\n  type ListDatabasesResult\r\n} from './operations/list_databases';\r\nimport { RemoveUserOperation, type RemoveUserOptions } from './operations/remove_user';\r\nimport { RunCommandOperation, type RunCommandOptions } from './operations/run_command';\r\nimport {\r\n  ValidateCollectionOperation,\r\n  type ValidateCollectionOptions\r\n} from './operations/validate_collection';\r\n\r\n/** @internal */\r\nexport interface AdminPrivate {\r\n  db: Db;\r\n}\r\n\r\n/**\r\n * The **Admin** class is an internal class that allows convenient access to\r\n * the admin functionality and commands for MongoDB.\r\n *\r\n * **ADMIN Cannot directly be instantiated**\r\n * @public\r\n *\r\n * @example\r\n * ```ts\r\n * import { MongoClient } from 'mongodb';\r\n *\r\n * const client = new MongoClient('mongodb://localhost:27017');\r\n * const admin = client.db().admin();\r\n * const dbInfo = await admin.listDatabases();\r\n * for (const db of dbInfo.databases) {\r\n *   console.log(db.name);\r\n * }\r\n * ```\r\n */\r\nexport class Admin {\r\n  /** @internal */\r\n  s: AdminPrivate;\r\n\r\n  /**\r\n   * Create a new Admin instance\r\n   * @internal\r\n   */\r\n  constructor(db: Db) {\r\n    this.s = { db };\r\n  }\r\n\r\n  /**\r\n   * Execute a command\r\n   *\r\n   * The driver will ensure the following fields are attached to the command sent to the server:\r\n   * - `lsid` - sourced from an implicit session or options.session\r\n   * - `$readPreference` - defaults to primary or can be configured by options.readPreference\r\n   * - `$db` - sourced from the name of this database\r\n   *\r\n   * If the client has a serverApi setting:\r\n   * - `apiVersion`\r\n   * - `apiStrict`\r\n   * - `apiDeprecationErrors`\r\n   *\r\n   * When in a transaction:\r\n   * - `readConcern` - sourced from readConcern set on the TransactionOptions\r\n   * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\r\n   *\r\n   * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\r\n   *\r\n   * @param command - The command to execute\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async command(command: Document, options?: RunCommandOptions): Promise<Document> {\r\n    return executeOperation(\r\n      this.s.db.client,\r\n      new RunCommandOperation(this.s.db, command, { dbName: 'admin', ...options })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Retrieve the server build information\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async buildInfo(options?: CommandOperationOptions): Promise<Document> {\r\n    return this.command({ buildinfo: 1 }, options);\r\n  }\r\n\r\n  /**\r\n   * Retrieve the server build information\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async serverInfo(options?: CommandOperationOptions): Promise<Document> {\r\n    return this.command({ buildinfo: 1 }, options);\r\n  }\r\n\r\n  /**\r\n   * Retrieve this db's server status.\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async serverStatus(options?: CommandOperationOptions): Promise<Document> {\r\n    return this.command({ serverStatus: 1 }, options);\r\n  }\r\n\r\n  /**\r\n   * Ping the MongoDB server and retrieve results\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async ping(options?: CommandOperationOptions): Promise<Document> {\r\n    return this.command({ ping: 1 }, options);\r\n  }\r\n\r\n  /**\r\n   * Add a user to the database\r\n   *\r\n   * @param username - The username for the new user\r\n   * @param passwordOrOptions - An optional password for the new user, or the options for the command\r\n   * @param options - Optional settings for the command\r\n   * @deprecated Use the createUser command in `db.command()` instead.\r\n   * @see https://www.mongodb.com/docs/manual/reference/command/createUser/\r\n   */\r\n  async addUser(\r\n    username: string,\r\n    passwordOrOptions?: string | AddUserOptions,\r\n    options?: AddUserOptions\r\n  ): Promise<Document> {\r\n    options =\r\n      options != null && typeof options === 'object'\r\n        ? options\r\n        : passwordOrOptions != null && typeof passwordOrOptions === 'object'\r\n        ? passwordOrOptions\r\n        : undefined;\r\n    const password = typeof passwordOrOptions === 'string' ? passwordOrOptions : undefined;\r\n    return executeOperation(\r\n      this.s.db.client,\r\n      new AddUserOperation(this.s.db, username, password, { dbName: 'admin', ...options })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Remove a user from a database\r\n   *\r\n   * @param username - The username to remove\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async removeUser(username: string, options?: RemoveUserOptions): Promise<boolean> {\r\n    return executeOperation(\r\n      this.s.db.client,\r\n      new RemoveUserOperation(this.s.db, username, { dbName: 'admin', ...options })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validate an existing collection\r\n   *\r\n   * @param collectionName - The name of the collection to validate.\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async validateCollection(\r\n    collectionName: string,\r\n    options: ValidateCollectionOptions = {}\r\n  ): Promise<Document> {\r\n    return executeOperation(\r\n      this.s.db.client,\r\n      new ValidateCollectionOperation(this, collectionName, options)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * List the available databases\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async listDatabases(options?: ListDatabasesOptions): Promise<ListDatabasesResult> {\r\n    return executeOperation(this.s.db.client, new ListDatabasesOperation(this.s.db, options));\r\n  }\r\n\r\n  /**\r\n   * Get ReplicaSet status\r\n   *\r\n   * @param options - Optional settings for the command\r\n   */\r\n  async replSetGetStatus(options?: CommandOperationOptions): Promise<Document> {\r\n    return this.command({ replSetGetStatus: 1 }, options);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}