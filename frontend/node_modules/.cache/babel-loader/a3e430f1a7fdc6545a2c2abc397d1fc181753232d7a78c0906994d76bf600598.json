{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthProvider = exports.AuthContext = void 0;\nconst error_1 = require(\"../../error\");\n/**\r\n * Context used during authentication\r\n * @internal\r\n */\nclass AuthContext {\n  constructor(connection, credentials, options) {\n    /** If the context is for reauthentication. */\n    this.reauthenticating = false;\n    this.connection = connection;\n    this.credentials = credentials;\n    this.options = options;\n  }\n}\nexports.AuthContext = AuthContext;\nclass AuthProvider {\n  /**\r\n   * Prepare the handshake document before the initial handshake.\r\n   *\r\n   * @param handshakeDoc - The document used for the initial handshake on a connection\r\n   * @param authContext - Context for authentication flow\r\n   */\n  async prepare(handshakeDoc, _authContext) {\n    return handshakeDoc;\n  }\n  /**\r\n   * Reauthenticate.\r\n   * @param context - The shared auth context.\r\n   */\n  async reauth(context) {\n    if (context.reauthenticating) {\n      throw new error_1.MongoRuntimeError('Reauthentication already in progress.');\n    }\n    try {\n      context.reauthenticating = true;\n      await this.auth(context);\n    } finally {\n      context.reauthenticating = false;\n    }\n  }\n}\nexports.AuthProvider = AuthProvider;","map":{"version":3,"mappings":";;;;;;AACA;AAKA;;;;AAIA,MAAaA,WAAW;EAetBC,YACEC,UAAsB,EACtBC,WAAyC,EACzCC,OAA0B;IAb5B;IACA,qBAAgB,GAAG,KAAK;IActB,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;;AAvBFC;AA0BA,MAAsBC,YAAY;EAChC;;;;;;EAMA,MAAMC,OAAO,CACXC,YAA+B,EAC/BC,YAAyB;IAEzB,OAAOD,YAAY;EACrB;EASA;;;;EAIA,MAAME,MAAM,CAACC,OAAoB;IAC/B,IAAIA,OAAO,CAACC,gBAAgB,EAAE;MAC5B,MAAM,IAAIC,yBAAiB,CAAC,uCAAuC,CAAC;;IAEtE,IAAI;MACFF,OAAO,CAACC,gBAAgB,GAAG,IAAI;MAC/B,MAAM,IAAI,CAACE,IAAI,CAACH,OAAO,CAAC;KACzB,SAAS;MACRA,OAAO,CAACC,gBAAgB,GAAG,KAAK;;EAEpC;;AAnCFP","names":["AuthContext","constructor","connection","credentials","options","exports","AuthProvider","prepare","handshakeDoc","_authContext","reauth","context","reauthenticating","error_1","auth"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\cmap\\auth\\auth_provider.ts"],"sourcesContent":["import type { Document } from '../../bson';\r\nimport { MongoRuntimeError } from '../../error';\r\nimport type { HandshakeDocument } from '../connect';\r\nimport type { Connection, ConnectionOptions } from '../connection';\r\nimport type { MongoCredentials } from './mongo_credentials';\r\n\r\n/**\r\n * Context used during authentication\r\n * @internal\r\n */\r\nexport class AuthContext {\r\n  /** The connection to authenticate */\r\n  connection: Connection;\r\n  /** The credentials to use for authentication */\r\n  credentials?: MongoCredentials;\r\n  /** If the context is for reauthentication. */\r\n  reauthenticating = false;\r\n  /** The options passed to the `connect` method */\r\n  options: ConnectionOptions;\r\n\r\n  /** A response from an initial auth attempt, only some mechanisms use this (e.g, SCRAM) */\r\n  response?: Document;\r\n  /** A random nonce generated for use in an authentication conversation */\r\n  nonce?: Buffer;\r\n\r\n  constructor(\r\n    connection: Connection,\r\n    credentials: MongoCredentials | undefined,\r\n    options: ConnectionOptions\r\n  ) {\r\n    this.connection = connection;\r\n    this.credentials = credentials;\r\n    this.options = options;\r\n  }\r\n}\r\n\r\nexport abstract class AuthProvider {\r\n  /**\r\n   * Prepare the handshake document before the initial handshake.\r\n   *\r\n   * @param handshakeDoc - The document used for the initial handshake on a connection\r\n   * @param authContext - Context for authentication flow\r\n   */\r\n  async prepare(\r\n    handshakeDoc: HandshakeDocument,\r\n    _authContext: AuthContext\r\n  ): Promise<HandshakeDocument> {\r\n    return handshakeDoc;\r\n  }\r\n\r\n  /**\r\n   * Authenticate\r\n   *\r\n   * @param context - A shared context for authentication flow\r\n   */\r\n  abstract auth(context: AuthContext): Promise<void>;\r\n\r\n  /**\r\n   * Reauthenticate.\r\n   * @param context - The shared auth context.\r\n   */\r\n  async reauth(context: AuthContext): Promise<void> {\r\n    if (context.reauthenticating) {\r\n      throw new MongoRuntimeError('Reauthentication already in progress.');\r\n    }\r\n    try {\r\n      context.reauthenticating = true;\r\n      await this.auth(context);\r\n    } finally {\r\n      context.reauthenticating = false;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}