{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoLogger = exports.stringifyWithMaxLen = exports.createStdioLogger = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nconst bson_1 = require(\"bson\");\nconst util_1 = require(\"util\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nexports.SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n});\n/** @internal */\nexports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nclass SeverityLevelMap extends Map {\n  constructor(entries) {\n    const newEntries = [];\n    for (const [level, value] of entries) {\n      newEntries.push([value, level]);\n    }\n    newEntries.push(...entries);\n    super(newEntries);\n  }\n  getNumericSeverityLevel(severity) {\n    return this.get(severity);\n  }\n  getSeverityLevelName(level) {\n    return this.get(level);\n  }\n}\n/** @internal */\nexports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([[exports.SeverityLevel.OFF, -Infinity], [exports.SeverityLevel.EMERGENCY, 0], [exports.SeverityLevel.ALERT, 1], [exports.SeverityLevel.CRITICAL, 2], [exports.SeverityLevel.ERROR, 3], [exports.SeverityLevel.WARNING, 4], [exports.SeverityLevel.NOTICE, 5], [exports.SeverityLevel.INFORMATIONAL, 6], [exports.SeverityLevel.DEBUG, 7], [exports.SeverityLevel.TRACE, 8]]);\n/** @internal */\nexports.MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection'\n});\n/**\r\n * Parses a string as one of SeverityLevel\r\n *\r\n * @param s - the value to be parsed\r\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\r\n */\nfunction parseSeverityFromString(s) {\n  const validSeverities = Object.values(exports.SeverityLevel);\n  const lowerSeverity = s?.toLowerCase();\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity;\n  }\n  return null;\n}\n/** @internal */\nfunction createStdioLogger(stream) {\n  return {\n    write: log => {\n      stream.write((0, util_1.inspect)(log, {\n        compact: true,\n        breakLength: Infinity\n      }), 'utf-8');\n      return;\n    }\n  };\n}\nexports.createStdioLogger = createStdioLogger;\n/**\r\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\r\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\r\n * Writable or an object which has a `write` method with the signature:\r\n * ```ts\r\n * write(log: Log): void\r\n * ```\r\n *\r\n * @returns the MongoDBLogWritable object to write logs to\r\n */\nfunction resolveLogPath({\n  MONGODB_LOG_PATH\n}, {\n  mongodbLogPath\n}) {\n  if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n    return createStdioLogger(process.stderr);\n  }\n  if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n    return createStdioLogger(process.stdout);\n  }\n  if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n    return mongodbLogPath;\n  }\n  if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n    return createStdioLogger(process.stderr);\n  }\n  if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n    return createStdioLogger(process.stdout);\n  }\n  return createStdioLogger(process.stderr);\n}\nfunction compareSeverity(s0, s1) {\n  const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n  const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n  return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */\nfunction stringifyWithMaxLen(value, maxDocumentLength) {\n  const ejson = bson_1.EJSON.stringify(value);\n  return maxDocumentLength !== 0 && ejson.length > maxDocumentLength ? `${ejson.slice(0, maxDocumentLength)}...` : ejson;\n}\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nfunction isLogConvertible(obj) {\n  const objAsLogConvertible = obj;\n  // eslint-disable-next-line no-restricted-syntax\n  return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\nfunction attachCommandFields(log, commandEvent) {\n  log.commandName = commandEvent.commandName;\n  log.requestId = commandEvent.requestId;\n  log.driverConnectionId = commandEvent?.connectionId;\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  if (commandEvent?.serviceId) {\n    log.serviceId = commandEvent.serviceId.toHexString();\n  }\n  return log;\n}\nfunction attachConnectionFields(log, connectionPoolEvent) {\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(connectionPoolEvent.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  return log;\n}\nfunction defaultLogTransform(logObject, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n  let log = Object.create(null);\n  switch (logObject.name) {\n    case constants_1.COMMAND_STARTED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command started';\n      log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength);\n      log.databaseName = logObject.databaseName;\n      return log;\n    case constants_1.COMMAND_SUCCEEDED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command succeeded';\n      log.durationMS = logObject.duration;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength);\n      return log;\n    case constants_1.COMMAND_FAILED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command failed';\n      log.durationMS = logObject.duration;\n      log.failure = logObject.failure;\n      return log;\n    case constants_1.CONNECTION_POOL_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool created';\n      if (logObject.options) {\n        const {\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        } = logObject.options;\n        log = {\n          ...log,\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        };\n      }\n      return log;\n    case constants_1.CONNECTION_POOL_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool ready';\n      return log;\n    case constants_1.CONNECTION_POOL_CLEARED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool cleared';\n      if (logObject.serviceId?._bsontype === 'ObjectId') {\n        log.serviceId = logObject.serviceId.toHexString();\n      }\n      return log;\n    case constants_1.CONNECTION_POOL_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool closed';\n      return log;\n    case constants_1.CONNECTION_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection created';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection ready';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection closed';\n      log.driverConnectionId = logObject.connectionId;\n      switch (logObject.reason) {\n        case 'stale':\n          log.reason = 'Connection became stale because the pool was cleared';\n          break;\n        case 'idle':\n          log.reason = 'Connection has been available but unused for longer than the configured max idle time';\n          break;\n        case 'error':\n          log.reason = 'An error occurred while using the connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      return log;\n    case constants_1.CONNECTION_CHECK_OUT_STARTED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout started';\n      return log;\n    case constants_1.CONNECTION_CHECK_OUT_FAILED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout failed';\n      switch (logObject.reason) {\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        case 'timeout':\n          log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n          break;\n        case 'connectionError':\n          log.reason = 'An error occurred while trying to establish a new connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      return log;\n    case constants_1.CONNECTION_CHECKED_OUT:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked out';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_CHECKED_IN:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked in';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    default:\n      for (const [key, value] of Object.entries(logObject)) {\n        if (value != null) log[key] = value;\n      }\n  }\n  return log;\n}\n/** @internal */\nclass MongoLogger {\n  constructor(options) {\n    /**\r\n     * This method should be used when logging errors that do not have a public driver API for\r\n     * reporting errors.\r\n     */\n    this.error = this.log.bind(this, 'error');\n    /**\r\n     * This method should be used to log situations where undesirable application behaviour might\r\n     * occur. For example, failing to end sessions on `MongoClient.close`.\r\n     */\n    this.warn = this.log.bind(this, 'warn');\n    /**\r\n     * This method should be used to report high-level information about normal driver behaviour.\r\n     * For example, the creation of a `MongoClient`.\r\n     */\n    this.info = this.log.bind(this, 'info');\n    /**\r\n     * This method should be used to report information that would be helpful when debugging an\r\n     * application. For example, a command starting, succeeding or failing.\r\n     */\n    this.debug = this.log.bind(this, 'debug');\n    /**\r\n     * This method should be used to report fine-grained details related to logic flow. For example,\r\n     * entering and exiting a function body.\r\n     */\n    this.trace = this.log.bind(this, 'trace');\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n  }\n  log(severity, component, message) {\n    if (compareSeverity(severity, this.componentSeverities[component]) > 0) return;\n    let logMessage = {\n      t: new Date(),\n      c: component,\n      s: severity\n    };\n    if (typeof message === 'string') {\n      logMessage.message = message;\n    } else if (typeof message === 'object') {\n      if (isLogConvertible(message)) {\n        logMessage = {\n          ...logMessage,\n          ...message.toLog()\n        };\n      } else {\n        logMessage = {\n          ...logMessage,\n          ...defaultLogTransform(message, this.maxDocumentLength)\n        };\n      }\n    }\n    this.logDestination.write(logMessage);\n  }\n  /**\r\n   * Merges options set through environment variables and the MongoClient, preferring environment\r\n   * variables when both are set, and substituting defaults for values not set. Options set in\r\n   * constructor take precedence over both environment variables and MongoClient options.\r\n   *\r\n   * @remarks\r\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\r\n   * the default severity.\r\n   *\r\n   * @param envOptions - options set for the logger from the environment\r\n   * @param clientOptions - options set for the logger in the MongoClient options\r\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\r\n   */\n  static resolveOptions(envOptions, clientOptions) {\n    // client options take precedence over env options\n    const combinedOptions = {\n      ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolveLogPath(envOptions, clientOptions)\n    };\n    const defaultSeverity = parseSeverityFromString(combinedOptions.MONGODB_LOG_ALL) ?? exports.SeverityLevel.OFF;\n    return {\n      componentSeverities: {\n        command: parseSeverityFromString(combinedOptions.MONGODB_LOG_COMMAND) ?? defaultSeverity,\n        topology: parseSeverityFromString(combinedOptions.MONGODB_LOG_TOPOLOGY) ?? defaultSeverity,\n        serverSelection: parseSeverityFromString(combinedOptions.MONGODB_LOG_SERVER_SELECTION) ?? defaultSeverity,\n        connection: parseSeverityFromString(combinedOptions.MONGODB_LOG_CONNECTION) ?? defaultSeverity,\n        default: defaultSeverity\n      },\n      maxDocumentLength: (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ?? 1000,\n      logDestination: combinedOptions.mongodbLogPath\n    };\n  }\n}\nexports.MongoLogger = MongoLogger;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AAqBA;AAgBA;AAEA;AACaA,qBAAa,GAAGC,MAAM,CAACC,MAAM,CAAC;EACzCC,SAAS,EAAE,WAAW;EACtBC,KAAK,EAAE,OAAO;EACdC,QAAQ,EAAE,UAAU;EACpBC,KAAK,EAAE,OAAO;EACdC,OAAO,EAAE,MAAM;EACfC,MAAM,EAAE,QAAQ;EAChBC,aAAa,EAAE,MAAM;EACrBC,KAAK,EAAE,OAAO;EACdC,KAAK,EAAE,OAAO;EACdC,GAAG,EAAE;CACG,CAAC;AAEX;AACaZ,mCAA2B,GAAG,IAAI;AAI/C;AACA,MAAMa,gBAAiB,SAAQC,GAAmD;EAChFC,YAAYC,OAA2D;IACrE,MAAMC,UAAU,GAAuD,EAAE;IACzE,KAAK,MAAM,CAACC,KAAK,EAAEC,KAAK,CAAC,IAAIH,OAAO,EAAE;MACpCC,UAAU,CAACG,IAAI,CAAC,CAACD,KAAK,EAAED,KAAK,CAAC,CAAC;;IAGjCD,UAAU,CAACG,IAAI,CAAC,GAAGJ,OAAO,CAAC;IAC3B,KAAK,CAACC,UAAU,CAAC;EACnB;EAEAI,uBAAuB,CAACC,QAAuB;IAC7C,OAAO,IAAI,CAACC,GAAG,CAACD,QAAQ,CAAW;EACrC;EAEAE,oBAAoB,CAACN,KAAa;IAChC,OAAO,IAAI,CAACK,GAAG,CAACL,KAAK,CAA8B;EACrD;;AAGF;AACalB,0BAAkB,GAAG,IAAIa,gBAAgB,CAAC,CACrD,CAACb,qBAAa,CAACY,GAAG,EAAE,CAACa,QAAQ,CAAC,EAC9B,CAACzB,qBAAa,CAACG,SAAS,EAAE,CAAC,CAAC,EAC5B,CAACH,qBAAa,CAACI,KAAK,EAAE,CAAC,CAAC,EACxB,CAACJ,qBAAa,CAACK,QAAQ,EAAE,CAAC,CAAC,EAC3B,CAACL,qBAAa,CAACM,KAAK,EAAE,CAAC,CAAC,EACxB,CAACN,qBAAa,CAACO,OAAO,EAAE,CAAC,CAAC,EAC1B,CAACP,qBAAa,CAACQ,MAAM,EAAE,CAAC,CAAC,EACzB,CAACR,qBAAa,CAACS,aAAa,EAAE,CAAC,CAAC,EAChC,CAACT,qBAAa,CAACU,KAAK,EAAE,CAAC,CAAC,EACxB,CAACV,qBAAa,CAACW,KAAK,EAAE,CAAC,CAAC,CACzB,CAAC;AAEF;AACaX,8BAAsB,GAAGC,MAAM,CAACC,MAAM,CAAC;EAClDwB,OAAO,EAAE,SAAS;EAClBC,QAAQ,EAAE,UAAU;EACpBC,gBAAgB,EAAE,iBAAiB;EACnCC,UAAU,EAAE;CACJ,CAAC;AAmDX;;;;;;AAMA,SAASC,uBAAuB,CAACC,CAAU;EACzC,MAAMC,eAAe,GAAa/B,MAAM,CAACgC,MAAM,CAACjC,qBAAa,CAAC;EAC9D,MAAMkC,aAAa,GAAGH,CAAC,EAAEI,WAAW,EAAE;EAEtC,IAAID,aAAa,IAAI,IAAI,IAAIF,eAAe,CAACI,QAAQ,CAACF,aAAa,CAAC,EAAE;IACpE,OAAOA,aAA8B;;EAGvC,OAAO,IAAI;AACb;AAEA;AACA,SAAgBG,iBAAiB,CAACC,MAEjC;EACC,OAAO;IACLC,KAAK,EAAGC,GAAQ,IAAa;MAC3BF,MAAM,CAACC,KAAK,CAAC,kBAAO,EAACC,GAAG,EAAE;QAAEC,OAAO,EAAE,IAAI;QAAEC,WAAW,EAAEjB;MAAQ,CAAE,CAAC,EAAE,OAAO,CAAC;MAC7E;IACF;GACD;AACH;AATAzB;AAWA;;;;;;;;;;AAUA,SAAS2C,cAAc,CACrB;EAAEC;AAAgB,CAAyB,EAC3C;EAAEC;AAAc,CAA+D;EAE/E,IAAI,OAAOA,cAAc,KAAK,QAAQ,IAAI,WAAW,CAACC,IAAI,CAACD,cAAc,CAAC,EAAE;IAC1E,OAAOR,iBAAiB,CAACU,OAAO,CAACC,MAAM,CAAC;;EAE1C,IAAI,OAAOH,cAAc,KAAK,QAAQ,IAAI,WAAW,CAACC,IAAI,CAACD,cAAc,CAAC,EAAE;IAC1E,OAAOR,iBAAiB,CAACU,OAAO,CAACE,MAAM,CAAC;;EAG1C,IAAI,OAAOJ,cAAc,KAAK,QAAQ,IAAI,OAAOA,cAAc,EAAEN,KAAK,KAAK,UAAU,EAAE;IACrF,OAAOM,cAAc;;EAGvB,IAAID,gBAAgB,IAAI,WAAW,CAACE,IAAI,CAACF,gBAAgB,CAAC,EAAE;IAC1D,OAAOP,iBAAiB,CAACU,OAAO,CAACC,MAAM,CAAC;;EAE1C,IAAIJ,gBAAgB,IAAI,WAAW,CAACE,IAAI,CAACF,gBAAgB,CAAC,EAAE;IAC1D,OAAOP,iBAAiB,CAACU,OAAO,CAACE,MAAM,CAAC;;EAG1C,OAAOZ,iBAAiB,CAACU,OAAO,CAACC,MAAM,CAAC;AAC1C;AAeA,SAASE,eAAe,CAACC,EAAiB,EAAEC,EAAiB;EAC3D,MAAMC,KAAK,GAAGrD,0BAAkB,CAACqB,uBAAuB,CAAC8B,EAAE,CAAC;EAC5D,MAAMG,KAAK,GAAGtD,0BAAkB,CAACqB,uBAAuB,CAAC+B,EAAE,CAAC;EAE5D,OAAOC,KAAK,GAAGC,KAAK,GAAG,CAAC,CAAC,GAAGD,KAAK,GAAGC,KAAK,GAAG,CAAC,GAAG,CAAC;AACnD;AAwBA;AACA,SAAgBC,mBAAmB,CAACpC,KAAU,EAAEqC,iBAAyB;EACvE,MAAMC,KAAK,GAAGC,YAAK,CAACC,SAAS,CAACxC,KAAK,CAAC;EAEpC,OAAOqC,iBAAiB,KAAK,CAAC,IAAIC,KAAK,CAACG,MAAM,GAAGJ,iBAAiB,GAC9D,GAAGC,KAAK,CAACI,KAAK,CAAC,CAAC,EAAEL,iBAAiB,CAAC,KAAK,GACzCC,KAAK;AACX;AANAzD;AAWA,SAAS8D,gBAAgB,CAACC,GAAa;EACrC,MAAMC,mBAAmB,GAAGD,GAAqB;EACjD;EACA,OAAOC,mBAAmB,CAACC,KAAK,KAAKC,SAAS,IAAI,OAAOF,mBAAmB,CAACC,KAAK,KAAK,UAAU;AACnG;AAEA,SAASE,mBAAmB,CAC1B3B,GAAwB,EACxB4B,YAA8E;EAE9E5B,GAAG,CAAC6B,WAAW,GAAGD,YAAY,CAACC,WAAW;EAC1C7B,GAAG,CAAC8B,SAAS,GAAGF,YAAY,CAACE,SAAS;EACtC9B,GAAG,CAAC+B,kBAAkB,GAAGH,YAAY,EAAEI,YAAY;EACnD,MAAM;IAAEC,IAAI;IAAEC;EAAI,CAAE,GAAGC,mBAAW,CAACC,UAAU,CAACR,YAAY,CAACS,OAAO,CAAC,CAACC,UAAU,EAAE;EAChFtC,GAAG,CAACuC,UAAU,GAAGN,IAAI;EACrBjC,GAAG,CAACwC,UAAU,GAAGN,IAAI;EACrB,IAAIN,YAAY,EAAEa,SAAS,EAAE;IAC3BzC,GAAG,CAACyC,SAAS,GAAGb,YAAY,CAACa,SAAS,CAACC,WAAW,EAAE;;EAGtD,OAAO1C,GAAG;AACZ;AAEA,SAAS2C,sBAAsB,CAC7B3C,GAAwB,EACxB4C,mBAAkD;EAElD,MAAM;IAAEX,IAAI;IAAEC;EAAI,CAAE,GAAGC,mBAAW,CAACC,UAAU,CAACQ,mBAAmB,CAACP,OAAO,CAAC,CAACC,UAAU,EAAE;EACvFtC,GAAG,CAACuC,UAAU,GAAGN,IAAI;EACrBjC,GAAG,CAACwC,UAAU,GAAGN,IAAI;EAErB,OAAOlC,GAAG;AACZ;AAEA,SAAS6C,mBAAmB,CAC1BC,SAA8C,EAC9C9B,oBAA4BxD,mCAA2B;EAEvD,IAAIwC,GAAG,GAA+BvC,MAAM,CAACsF,MAAM,CAAC,IAAI,CAAC;EAEzD,QAAQD,SAAS,CAACE,IAAI;IACpB,KAAKC,2BAAe;MAClBjD,GAAG,GAAG2B,mBAAmB,CAAC3B,GAAG,EAAE8C,SAAS,CAAC;MACzC9C,GAAG,CAACkD,OAAO,GAAG,iBAAiB;MAC/BlD,GAAG,CAACmD,OAAO,GAAGpC,mBAAmB,CAAC+B,SAAS,CAACK,OAAO,EAAEnC,iBAAiB,CAAC;MACvEhB,GAAG,CAACoD,YAAY,GAAGN,SAAS,CAACM,YAAY;MACzC,OAAOpD,GAAG;IACZ,KAAKiD,6BAAiB;MACpBjD,GAAG,GAAG2B,mBAAmB,CAAC3B,GAAG,EAAE8C,SAAS,CAAC;MACzC9C,GAAG,CAACkD,OAAO,GAAG,mBAAmB;MACjClD,GAAG,CAACqD,UAAU,GAAGP,SAAS,CAACQ,QAAQ;MACnCtD,GAAG,CAACuD,KAAK,GAAGxC,mBAAmB,CAAC+B,SAAS,CAACS,KAAK,EAAEvC,iBAAiB,CAAC;MACnE,OAAOhB,GAAG;IACZ,KAAKiD,0BAAc;MACjBjD,GAAG,GAAG2B,mBAAmB,CAAC3B,GAAG,EAAE8C,SAAS,CAAC;MACzC9C,GAAG,CAACkD,OAAO,GAAG,gBAAgB;MAC9BlD,GAAG,CAACqD,UAAU,GAAGP,SAAS,CAACQ,QAAQ;MACnCtD,GAAG,CAACwD,OAAO,GAAGV,SAAS,CAACU,OAAO;MAC/B,OAAOxD,GAAG;IACZ,KAAKiD,mCAAuB;MAC1BjD,GAAG,GAAG2C,sBAAsB,CAAC3C,GAAG,EAAE8C,SAAS,CAAC;MAC5C9C,GAAG,CAACkD,OAAO,GAAG,yBAAyB;MACvC,IAAIJ,SAAS,CAACW,OAAO,EAAE;QACrB,MAAM;UAAEC,aAAa;UAAEC,WAAW;UAAEC,WAAW;UAAEC,aAAa;UAAEC;QAAkB,CAAE,GAClFhB,SAAS,CAACW,OAAO;QACnBzD,GAAG,GAAG;UACJ,GAAGA,GAAG;UACN0D,aAAa;UACbC,WAAW;UACXC,WAAW;UACXC,aAAa;UACbC;SACD;;MAEH,OAAO9D,GAAG;IACZ,KAAKiD,iCAAqB;MACxBjD,GAAG,GAAG2C,sBAAsB,CAAC3C,GAAG,EAAE8C,SAAS,CAAC;MAC5C9C,GAAG,CAACkD,OAAO,GAAG,uBAAuB;MACrC,OAAOlD,GAAG;IACZ,KAAKiD,mCAAuB;MAC1BjD,GAAG,GAAG2C,sBAAsB,CAAC3C,GAAG,EAAE8C,SAAS,CAAC;MAC5C9C,GAAG,CAACkD,OAAO,GAAG,yBAAyB;MACvC,IAAIJ,SAAS,CAACL,SAAS,EAAEsB,SAAS,KAAK,UAAU,EAAE;QACjD/D,GAAG,CAACyC,SAAS,GAAGK,SAAS,CAACL,SAAS,CAACC,WAAW,EAAE;;MAEnD,OAAO1C,GAAG;IACZ,KAAKiD,kCAAsB;MACzBjD,GAAG,GAAG2C,sBAAsB,CAAC3C,GAAG,EAAE8C,SAAS,CAAC;MAC5C9C,GAAG,CAACkD,OAAO,GAAG,wBAAwB;MACtC,OAAOlD,GAAG;IACZ,KAAKiD,8BAAkB;MACrBjD,GAAG,GAAG2C,sBAAsB,CAAC3C,GAAG,EAAE8C,SAAS,CAAC;MAC5C9C,GAAG,CAACkD,OAAO,GAAG,oBAAoB;MAClClD,GAAG,CAAC+B,kBAAkB,GAAGe,SAAS,CAACd,YAAY;MAC/C,OAAOhC,GAAG;IACZ,KAAKiD,4BAAgB;MACnBjD,GAAG,GAAG2C,sBAAsB,CAAC3C,GAAG,EAAE8C,SAAS,CAAC;MAC5C9C,GAAG,CAACkD,OAAO,GAAG,kBAAkB;MAChClD,GAAG,CAAC+B,kBAAkB,GAAGe,SAAS,CAACd,YAAY;MAC/C,OAAOhC,GAAG;IACZ,KAAKiD,6BAAiB;MACpBjD,GAAG,GAAG2C,sBAAsB,CAAC3C,GAAG,EAAE8C,SAAS,CAAC;MAC5C9C,GAAG,CAACkD,OAAO,GAAG,mBAAmB;MACjClD,GAAG,CAAC+B,kBAAkB,GAAGe,SAAS,CAACd,YAAY;MAC/C,QAAQc,SAAS,CAACkB,MAAM;QACtB,KAAK,OAAO;UACVhE,GAAG,CAACgE,MAAM,GAAG,sDAAsD;UACnE;QACF,KAAK,MAAM;UACThE,GAAG,CAACgE,MAAM,GACR,uFAAuF;UACzF;QACF,KAAK,OAAO;UACVhE,GAAG,CAACgE,MAAM,GAAG,8CAA8C;UAC3D,IAAIlB,SAAS,CAACmB,KAAK,EAAE;YACnBjE,GAAG,CAACiE,KAAK,GAAGnB,SAAS,CAACmB,KAAK;;UAE7B;QACF,KAAK,YAAY;UACfjE,GAAG,CAACgE,MAAM,GAAG,4BAA4B;UACzC;QACF;UACEhE,GAAG,CAACgE,MAAM,GAAG,yBAAyBlB,SAAS,CAACkB,MAAM,EAAE;MAAC;MAE7D,OAAOhE,GAAG;IACZ,KAAKiD,wCAA4B;MAC/BjD,GAAG,GAAG2C,sBAAsB,CAAC3C,GAAG,EAAE8C,SAAS,CAAC;MAC5C9C,GAAG,CAACkD,OAAO,GAAG,6BAA6B;MAC3C,OAAOlD,GAAG;IACZ,KAAKiD,uCAA2B;MAC9BjD,GAAG,GAAG2C,sBAAsB,CAAC3C,GAAG,EAAE8C,SAAS,CAAC;MAC5C9C,GAAG,CAACkD,OAAO,GAAG,4BAA4B;MAC1C,QAAQJ,SAAS,CAACkB,MAAM;QACtB,KAAK,YAAY;UACfhE,GAAG,CAACgE,MAAM,GAAG,4BAA4B;UACzC;QACF,KAAK,SAAS;UACZhE,GAAG,CAACgE,MAAM,GAAG,oEAAoE;UACjF;QACF,KAAK,iBAAiB;UACpBhE,GAAG,CAACgE,MAAM,GAAG,8DAA8D;UAC3E,IAAIlB,SAAS,CAACmB,KAAK,EAAE;YACnBjE,GAAG,CAACiE,KAAK,GAAGnB,SAAS,CAACmB,KAAK;;UAE7B;QACF;UACEjE,GAAG,CAACgE,MAAM,GAAG,yBAAyBlB,SAAS,CAACkB,MAAM,EAAE;MAAC;MAE7D,OAAOhE,GAAG;IACZ,KAAKiD,kCAAsB;MACzBjD,GAAG,GAAG2C,sBAAsB,CAAC3C,GAAG,EAAE8C,SAAS,CAAC;MAC5C9C,GAAG,CAACkD,OAAO,GAAG,wBAAwB;MAEtClD,GAAG,CAAC+B,kBAAkB,GAAGe,SAAS,CAACd,YAAY;MAC/C,OAAOhC,GAAG;IACZ,KAAKiD,iCAAqB;MACxBjD,GAAG,GAAG2C,sBAAsB,CAAC3C,GAAG,EAAE8C,SAAS,CAAC;MAC5C9C,GAAG,CAACkD,OAAO,GAAG,uBAAuB;MACrClD,GAAG,CAAC+B,kBAAkB,GAAGe,SAAS,CAACd,YAAY;MAC/C,OAAOhC,GAAG;IACZ;MACE,KAAK,MAAM,CAACkE,GAAG,EAAEvF,KAAK,CAAC,IAAIlB,MAAM,CAACe,OAAO,CAACsE,SAAS,CAAC,EAAE;QACpD,IAAInE,KAAK,IAAI,IAAI,EAAEqB,GAAG,CAACkE,GAAG,CAAC,GAAGvF,KAAK;;EACpC;EAEL,OAAOqB,GAAG;AACZ;AAEA;AACA,MAAamE,WAAW;EA+BtB5F,YAAYkF,OAA2B;IA1BvC;;;;IAIA,UAAK,GAAG,IAAI,CAACzD,GAAG,CAACoE,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;IACpC;;;;IAIA,SAAI,GAAG,IAAI,CAACpE,GAAG,CAACoE,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;IAClC;;;;IAIA,SAAI,GAAG,IAAI,CAACpE,GAAG,CAACoE,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC;IAClC;;;;IAIA,UAAK,GAAG,IAAI,CAACpE,GAAG,CAACoE,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;IACpC;;;;IAIA,UAAK,GAAG,IAAI,CAACpE,GAAG,CAACoE,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;IAGlC,IAAI,CAACC,mBAAmB,GAAGZ,OAAO,CAACY,mBAAmB;IACtD,IAAI,CAACrD,iBAAiB,GAAGyC,OAAO,CAACzC,iBAAiB;IAClD,IAAI,CAACsD,cAAc,GAAGb,OAAO,CAACa,cAAc;EAC9C;EAEQtE,GAAG,CACTlB,QAAuB,EACvByF,SAAiC,EACjCrB,OAA0B;IAE1B,IAAIxC,eAAe,CAAC5B,QAAQ,EAAE,IAAI,CAACuF,mBAAmB,CAACE,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE;IAExE,IAAIC,UAAU,GAAQ;MAAEC,CAAC,EAAE,IAAIC,IAAI,EAAE;MAAEC,CAAC,EAAEJ,SAAS;MAAEhF,CAAC,EAAET;IAAQ,CAAE;IAClE,IAAI,OAAOoE,OAAO,KAAK,QAAQ,EAAE;MAC/BsB,UAAU,CAACtB,OAAO,GAAGA,OAAO;KAC7B,MAAM,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;MACtC,IAAI5B,gBAAgB,CAAC4B,OAAO,CAAC,EAAE;QAC7BsB,UAAU,GAAG;UAAE,GAAGA,UAAU;UAAE,GAAGtB,OAAO,CAACzB,KAAK;QAAE,CAAE;OACnD,MAAM;QACL+C,UAAU,GAAG;UAAE,GAAGA,UAAU;UAAE,GAAG3B,mBAAmB,CAACK,OAAO,EAAE,IAAI,CAAClC,iBAAiB;QAAC,CAAE;;;IAG3F,IAAI,CAACsD,cAAc,CAACvE,KAAK,CAACyE,UAAU,CAAC;EACvC;EAEA;;;;;;;;;;;;;EAaA,OAAOI,cAAc,CACnBC,UAAiC,EACjCC,aAA4C;IAE5C;IACA,MAAMC,eAAe,GAAG;MACtB,GAAGF,UAAU;MACb,GAAGC,aAAa;MAChBzE,cAAc,EAAEF,cAAc,CAAC0E,UAAU,EAAEC,aAAa;KACzD;IACD,MAAME,eAAe,GACnB1F,uBAAuB,CAACyF,eAAe,CAACE,eAAe,CAAC,IAAIzH,qBAAa,CAACY,GAAG;IAE/E,OAAO;MACLiG,mBAAmB,EAAE;QACnBlB,OAAO,EAAE7D,uBAAuB,CAACyF,eAAe,CAACG,mBAAmB,CAAC,IAAIF,eAAe;QACxFG,QAAQ,EAAE7F,uBAAuB,CAACyF,eAAe,CAACK,oBAAoB,CAAC,IAAIJ,eAAe;QAC1FK,eAAe,EACb/F,uBAAuB,CAACyF,eAAe,CAACO,4BAA4B,CAAC,IAAIN,eAAe;QAC1FO,UAAU,EACRjG,uBAAuB,CAACyF,eAAe,CAACS,sBAAsB,CAAC,IAAIR,eAAe;QACpFS,OAAO,EAAET;OACV;MACDhE,iBAAiB,EACf,gCAAoB,EAAC+D,eAAe,CAACW,+BAA+B,CAAC,IAAI,IAAI;MAC/EpB,cAAc,EAAES,eAAe,CAAC1E;KACjC;EACH;;AAjGF7C","names":["exports","Object","freeze","EMERGENCY","ALERT","CRITICAL","ERROR","WARNING","NOTICE","INFORMATIONAL","DEBUG","TRACE","OFF","SeverityLevelMap","Map","constructor","entries","newEntries","level","value","push","getNumericSeverityLevel","severity","get","getSeverityLevelName","Infinity","COMMAND","TOPOLOGY","SERVER_SELECTION","CONNECTION","parseSeverityFromString","s","validSeverities","values","lowerSeverity","toLowerCase","includes","createStdioLogger","stream","write","log","compact","breakLength","resolveLogPath","MONGODB_LOG_PATH","mongodbLogPath","test","process","stderr","stdout","compareSeverity","s0","s1","s0Num","s1Num","stringifyWithMaxLen","maxDocumentLength","ejson","bson_1","stringify","length","slice","isLogConvertible","obj","objAsLogConvertible","toLog","undefined","attachCommandFields","commandEvent","commandName","requestId","driverConnectionId","connectionId","host","port","utils_1","fromString","address","toHostPort","serverHost","serverPort","serviceId","toHexString","attachConnectionFields","connectionPoolEvent","defaultLogTransform","logObject","create","name","constants_1","message","command","databaseName","durationMS","duration","reply","failure","options","maxIdleTimeMS","minPoolSize","maxPoolSize","maxConnecting","waitQueueTimeoutMS","_bsontype","reason","error","key","MongoLogger","bind","componentSeverities","logDestination","component","logMessage","t","Date","c","resolveOptions","envOptions","clientOptions","combinedOptions","defaultSeverity","MONGODB_LOG_ALL","MONGODB_LOG_COMMAND","topology","MONGODB_LOG_TOPOLOGY","serverSelection","MONGODB_LOG_SERVER_SELECTION","connection","MONGODB_LOG_CONNECTION","default","MONGODB_LOG_MAX_DOCUMENT_LENGTH"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\mongo_logger.ts"],"sourcesContent":["import { EJSON } from 'bson';\r\nimport type { Writable } from 'stream';\r\nimport { inspect } from 'util';\r\n\r\nimport type {\r\n  CommandFailedEvent,\r\n  CommandStartedEvent,\r\n  CommandSucceededEvent\r\n} from './cmap/command_monitoring_events';\r\nimport type {\r\n  ConnectionCheckedInEvent,\r\n  ConnectionCheckedOutEvent,\r\n  ConnectionCheckOutFailedEvent,\r\n  ConnectionCheckOutStartedEvent,\r\n  ConnectionClosedEvent,\r\n  ConnectionCreatedEvent,\r\n  ConnectionPoolClearedEvent,\r\n  ConnectionPoolClosedEvent,\r\n  ConnectionPoolCreatedEvent,\r\n  ConnectionPoolMonitoringEvent,\r\n  ConnectionPoolReadyEvent,\r\n  ConnectionReadyEvent\r\n} from './cmap/connection_pool_events';\r\nimport {\r\n  COMMAND_FAILED,\r\n  COMMAND_STARTED,\r\n  COMMAND_SUCCEEDED,\r\n  CONNECTION_CHECK_OUT_FAILED,\r\n  CONNECTION_CHECK_OUT_STARTED,\r\n  CONNECTION_CHECKED_IN,\r\n  CONNECTION_CHECKED_OUT,\r\n  CONNECTION_CLOSED,\r\n  CONNECTION_CREATED,\r\n  CONNECTION_POOL_CLEARED,\r\n  CONNECTION_POOL_CLOSED,\r\n  CONNECTION_POOL_CREATED,\r\n  CONNECTION_POOL_READY,\r\n  CONNECTION_READY\r\n} from './constants';\r\nimport { HostAddress, parseUnsignedInteger } from './utils';\r\n\r\n/** @internal */\r\nexport const SeverityLevel = Object.freeze({\r\n  EMERGENCY: 'emergency',\r\n  ALERT: 'alert',\r\n  CRITICAL: 'critical',\r\n  ERROR: 'error',\r\n  WARNING: 'warn',\r\n  NOTICE: 'notice',\r\n  INFORMATIONAL: 'info',\r\n  DEBUG: 'debug',\r\n  TRACE: 'trace',\r\n  OFF: 'off'\r\n} as const);\r\n\r\n/** @internal */\r\nexport const DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\r\n/** @internal */\r\nexport type SeverityLevel = (typeof SeverityLevel)[keyof typeof SeverityLevel];\r\n\r\n/** @internal */\r\nclass SeverityLevelMap extends Map<SeverityLevel | number, SeverityLevel | number> {\r\n  constructor(entries: [SeverityLevel | number, SeverityLevel | number][]) {\r\n    const newEntries: [number | SeverityLevel, SeverityLevel | number][] = [];\r\n    for (const [level, value] of entries) {\r\n      newEntries.push([value, level]);\r\n    }\r\n\r\n    newEntries.push(...entries);\r\n    super(newEntries);\r\n  }\r\n\r\n  getNumericSeverityLevel(severity: SeverityLevel): number {\r\n    return this.get(severity) as number;\r\n  }\r\n\r\n  getSeverityLevelName(level: number): SeverityLevel | undefined {\r\n    return this.get(level) as SeverityLevel | undefined;\r\n  }\r\n}\r\n\r\n/** @internal */\r\nexport const SEVERITY_LEVEL_MAP = new SeverityLevelMap([\r\n  [SeverityLevel.OFF, -Infinity],\r\n  [SeverityLevel.EMERGENCY, 0],\r\n  [SeverityLevel.ALERT, 1],\r\n  [SeverityLevel.CRITICAL, 2],\r\n  [SeverityLevel.ERROR, 3],\r\n  [SeverityLevel.WARNING, 4],\r\n  [SeverityLevel.NOTICE, 5],\r\n  [SeverityLevel.INFORMATIONAL, 6],\r\n  [SeverityLevel.DEBUG, 7],\r\n  [SeverityLevel.TRACE, 8]\r\n]);\r\n\r\n/** @internal */\r\nexport const MongoLoggableComponent = Object.freeze({\r\n  COMMAND: 'command',\r\n  TOPOLOGY: 'topology',\r\n  SERVER_SELECTION: 'serverSelection',\r\n  CONNECTION: 'connection'\r\n} as const);\r\n\r\n/** @internal */\r\nexport type MongoLoggableComponent =\r\n  (typeof MongoLoggableComponent)[keyof typeof MongoLoggableComponent];\r\n\r\n/** @internal */\r\nexport interface MongoLoggerEnvOptions {\r\n  /** Severity level for command component */\r\n  MONGODB_LOG_COMMAND?: string;\r\n  /** Severity level for topology component */\r\n  MONGODB_LOG_TOPOLOGY?: string;\r\n  /** Severity level for server selection component */\r\n  MONGODB_LOG_SERVER_SELECTION?: string;\r\n  /** Severity level for CMAP */\r\n  MONGODB_LOG_CONNECTION?: string;\r\n  /** Default severity level to be if any of the above are unset */\r\n  MONGODB_LOG_ALL?: string;\r\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\r\n  MONGODB_LOG_MAX_DOCUMENT_LENGTH?: string;\r\n  /** Destination for log messages. Must be 'stderr', 'stdout'. Defaults to 'stderr'. */\r\n  MONGODB_LOG_PATH?: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface MongoLoggerMongoClientOptions {\r\n  /** Destination for log messages */\r\n  mongodbLogPath?: 'stdout' | 'stderr' | MongoDBLogWritable;\r\n}\r\n\r\n/** @internal */\r\nexport interface MongoLoggerOptions {\r\n  componentSeverities: {\r\n    /** Severity level for command component */\r\n    command: SeverityLevel;\r\n    /** Severity level for topology component */\r\n    topology: SeverityLevel;\r\n    /** Severity level for server selection component */\r\n    serverSelection: SeverityLevel;\r\n    /** Severity level for connection component */\r\n    connection: SeverityLevel;\r\n    /** Default severity level to be used if any of the above are unset */\r\n    default: SeverityLevel;\r\n  };\r\n\r\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\r\n  maxDocumentLength: number;\r\n  /** Destination for log messages. */\r\n  logDestination: Writable | MongoDBLogWritable;\r\n}\r\n\r\n/**\r\n * Parses a string as one of SeverityLevel\r\n *\r\n * @param s - the value to be parsed\r\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\r\n */\r\nfunction parseSeverityFromString(s?: string): SeverityLevel | null {\r\n  const validSeverities: string[] = Object.values(SeverityLevel);\r\n  const lowerSeverity = s?.toLowerCase();\r\n\r\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\r\n    return lowerSeverity as SeverityLevel;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/** @internal */\r\nexport function createStdioLogger(stream: {\r\n  write: NodeJS.WriteStream['write'];\r\n}): MongoDBLogWritable {\r\n  return {\r\n    write: (log: Log): unknown => {\r\n      stream.write(inspect(log, { compact: true, breakLength: Infinity }), 'utf-8');\r\n      return;\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\r\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\r\n * Writable or an object which has a `write` method with the signature:\r\n * ```ts\r\n * write(log: Log): void\r\n * ```\r\n *\r\n * @returns the MongoDBLogWritable object to write logs to\r\n */\r\nfunction resolveLogPath(\r\n  { MONGODB_LOG_PATH }: MongoLoggerEnvOptions,\r\n  { mongodbLogPath }: { mongodbLogPath?: string | Writable | MongoDBLogWritable }\r\n): MongoDBLogWritable {\r\n  if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\r\n    return createStdioLogger(process.stderr);\r\n  }\r\n  if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\r\n    return createStdioLogger(process.stdout);\r\n  }\r\n\r\n  if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\r\n    return mongodbLogPath;\r\n  }\r\n\r\n  if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\r\n    return createStdioLogger(process.stderr);\r\n  }\r\n  if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\r\n    return createStdioLogger(process.stdout);\r\n  }\r\n\r\n  return createStdioLogger(process.stderr);\r\n}\r\n\r\n/** @internal */\r\nexport interface Log extends Record<string, any> {\r\n  t: Date;\r\n  c: MongoLoggableComponent;\r\n  s: SeverityLevel;\r\n  message?: string;\r\n}\r\n\r\n/** @internal */\r\nexport interface MongoDBLogWritable {\r\n  write(log: Log): void;\r\n}\r\n\r\nfunction compareSeverity(s0: SeverityLevel, s1: SeverityLevel): 1 | 0 | -1 {\r\n  const s0Num = SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\r\n  const s1Num = SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\r\n\r\n  return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\r\n}\r\n\r\n/** @internal */\r\nexport type LoggableEvent =\r\n  | CommandStartedEvent\r\n  | CommandSucceededEvent\r\n  | CommandFailedEvent\r\n  | ConnectionPoolCreatedEvent\r\n  | ConnectionPoolReadyEvent\r\n  | ConnectionPoolClosedEvent\r\n  | ConnectionPoolClearedEvent\r\n  | ConnectionCreatedEvent\r\n  | ConnectionReadyEvent\r\n  | ConnectionClosedEvent\r\n  | ConnectionCheckedInEvent\r\n  | ConnectionCheckedOutEvent\r\n  | ConnectionCheckOutStartedEvent\r\n  | ConnectionCheckOutFailedEvent;\r\n\r\n/** @internal */\r\nexport interface LogConvertible extends Record<string, any> {\r\n  toLog(): Record<string, any>;\r\n}\r\n\r\n/** @internal */\r\nexport function stringifyWithMaxLen(value: any, maxDocumentLength: number): string {\r\n  const ejson = EJSON.stringify(value);\r\n\r\n  return maxDocumentLength !== 0 && ejson.length > maxDocumentLength\r\n    ? `${ejson.slice(0, maxDocumentLength)}...`\r\n    : ejson;\r\n}\r\n\r\n/** @internal */\r\nexport type Loggable = LoggableEvent | LogConvertible;\r\n\r\nfunction isLogConvertible(obj: Loggable): obj is LogConvertible {\r\n  const objAsLogConvertible = obj as LogConvertible;\r\n  // eslint-disable-next-line no-restricted-syntax\r\n  return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\r\n}\r\n\r\nfunction attachCommandFields(\r\n  log: Record<string, any>,\r\n  commandEvent: CommandStartedEvent | CommandSucceededEvent | CommandFailedEvent\r\n) {\r\n  log.commandName = commandEvent.commandName;\r\n  log.requestId = commandEvent.requestId;\r\n  log.driverConnectionId = commandEvent?.connectionId;\r\n  const { host, port } = HostAddress.fromString(commandEvent.address).toHostPort();\r\n  log.serverHost = host;\r\n  log.serverPort = port;\r\n  if (commandEvent?.serviceId) {\r\n    log.serviceId = commandEvent.serviceId.toHexString();\r\n  }\r\n\r\n  return log;\r\n}\r\n\r\nfunction attachConnectionFields(\r\n  log: Record<string, any>,\r\n  connectionPoolEvent: ConnectionPoolMonitoringEvent\r\n) {\r\n  const { host, port } = HostAddress.fromString(connectionPoolEvent.address).toHostPort();\r\n  log.serverHost = host;\r\n  log.serverPort = port;\r\n\r\n  return log;\r\n}\r\n\r\nfunction defaultLogTransform(\r\n  logObject: LoggableEvent | Record<string, any>,\r\n  maxDocumentLength: number = DEFAULT_MAX_DOCUMENT_LENGTH\r\n): Omit<Log, 's' | 't' | 'c'> {\r\n  let log: Omit<Log, 's' | 't' | 'c'> = Object.create(null);\r\n\r\n  switch (logObject.name) {\r\n    case COMMAND_STARTED:\r\n      log = attachCommandFields(log, logObject);\r\n      log.message = 'Command started';\r\n      log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength);\r\n      log.databaseName = logObject.databaseName;\r\n      return log;\r\n    case COMMAND_SUCCEEDED:\r\n      log = attachCommandFields(log, logObject);\r\n      log.message = 'Command succeeded';\r\n      log.durationMS = logObject.duration;\r\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength);\r\n      return log;\r\n    case COMMAND_FAILED:\r\n      log = attachCommandFields(log, logObject);\r\n      log.message = 'Command failed';\r\n      log.durationMS = logObject.duration;\r\n      log.failure = logObject.failure;\r\n      return log;\r\n    case CONNECTION_POOL_CREATED:\r\n      log = attachConnectionFields(log, logObject);\r\n      log.message = 'Connection pool created';\r\n      if (logObject.options) {\r\n        const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } =\r\n          logObject.options;\r\n        log = {\r\n          ...log,\r\n          maxIdleTimeMS,\r\n          minPoolSize,\r\n          maxPoolSize,\r\n          maxConnecting,\r\n          waitQueueTimeoutMS\r\n        };\r\n      }\r\n      return log;\r\n    case CONNECTION_POOL_READY:\r\n      log = attachConnectionFields(log, logObject);\r\n      log.message = 'Connection pool ready';\r\n      return log;\r\n    case CONNECTION_POOL_CLEARED:\r\n      log = attachConnectionFields(log, logObject);\r\n      log.message = 'Connection pool cleared';\r\n      if (logObject.serviceId?._bsontype === 'ObjectId') {\r\n        log.serviceId = logObject.serviceId.toHexString();\r\n      }\r\n      return log;\r\n    case CONNECTION_POOL_CLOSED:\r\n      log = attachConnectionFields(log, logObject);\r\n      log.message = 'Connection pool closed';\r\n      return log;\r\n    case CONNECTION_CREATED:\r\n      log = attachConnectionFields(log, logObject);\r\n      log.message = 'Connection created';\r\n      log.driverConnectionId = logObject.connectionId;\r\n      return log;\r\n    case CONNECTION_READY:\r\n      log = attachConnectionFields(log, logObject);\r\n      log.message = 'Connection ready';\r\n      log.driverConnectionId = logObject.connectionId;\r\n      return log;\r\n    case CONNECTION_CLOSED:\r\n      log = attachConnectionFields(log, logObject);\r\n      log.message = 'Connection closed';\r\n      log.driverConnectionId = logObject.connectionId;\r\n      switch (logObject.reason) {\r\n        case 'stale':\r\n          log.reason = 'Connection became stale because the pool was cleared';\r\n          break;\r\n        case 'idle':\r\n          log.reason =\r\n            'Connection has been available but unused for longer than the configured max idle time';\r\n          break;\r\n        case 'error':\r\n          log.reason = 'An error occurred while using the connection';\r\n          if (logObject.error) {\r\n            log.error = logObject.error;\r\n          }\r\n          break;\r\n        case 'poolClosed':\r\n          log.reason = 'Connection pool was closed';\r\n          break;\r\n        default:\r\n          log.reason = `Unknown close reason: ${logObject.reason}`;\r\n      }\r\n      return log;\r\n    case CONNECTION_CHECK_OUT_STARTED:\r\n      log = attachConnectionFields(log, logObject);\r\n      log.message = 'Connection checkout started';\r\n      return log;\r\n    case CONNECTION_CHECK_OUT_FAILED:\r\n      log = attachConnectionFields(log, logObject);\r\n      log.message = 'Connection checkout failed';\r\n      switch (logObject.reason) {\r\n        case 'poolClosed':\r\n          log.reason = 'Connection pool was closed';\r\n          break;\r\n        case 'timeout':\r\n          log.reason = 'Wait queue timeout elapsed without a connection becoming available';\r\n          break;\r\n        case 'connectionError':\r\n          log.reason = 'An error occurred while trying to establish a new connection';\r\n          if (logObject.error) {\r\n            log.error = logObject.error;\r\n          }\r\n          break;\r\n        default:\r\n          log.reason = `Unknown close reason: ${logObject.reason}`;\r\n      }\r\n      return log;\r\n    case CONNECTION_CHECKED_OUT:\r\n      log = attachConnectionFields(log, logObject);\r\n      log.message = 'Connection checked out';\r\n\r\n      log.driverConnectionId = logObject.connectionId;\r\n      return log;\r\n    case CONNECTION_CHECKED_IN:\r\n      log = attachConnectionFields(log, logObject);\r\n      log.message = 'Connection checked in';\r\n      log.driverConnectionId = logObject.connectionId;\r\n      return log;\r\n    default:\r\n      for (const [key, value] of Object.entries(logObject)) {\r\n        if (value != null) log[key] = value;\r\n      }\r\n  }\r\n  return log;\r\n}\r\n\r\n/** @internal */\r\nexport class MongoLogger {\r\n  componentSeverities: Record<MongoLoggableComponent, SeverityLevel>;\r\n  maxDocumentLength: number;\r\n  logDestination: MongoDBLogWritable | Writable;\r\n\r\n  /**\r\n   * This method should be used when logging errors that do not have a public driver API for\r\n   * reporting errors.\r\n   */\r\n  error = this.log.bind(this, 'error');\r\n  /**\r\n   * This method should be used to log situations where undesirable application behaviour might\r\n   * occur. For example, failing to end sessions on `MongoClient.close`.\r\n   */\r\n  warn = this.log.bind(this, 'warn');\r\n  /**\r\n   * This method should be used to report high-level information about normal driver behaviour.\r\n   * For example, the creation of a `MongoClient`.\r\n   */\r\n  info = this.log.bind(this, 'info');\r\n  /**\r\n   * This method should be used to report information that would be helpful when debugging an\r\n   * application. For example, a command starting, succeeding or failing.\r\n   */\r\n  debug = this.log.bind(this, 'debug');\r\n  /**\r\n   * This method should be used to report fine-grained details related to logic flow. For example,\r\n   * entering and exiting a function body.\r\n   */\r\n  trace = this.log.bind(this, 'trace');\r\n\r\n  constructor(options: MongoLoggerOptions) {\r\n    this.componentSeverities = options.componentSeverities;\r\n    this.maxDocumentLength = options.maxDocumentLength;\r\n    this.logDestination = options.logDestination;\r\n  }\r\n\r\n  private log(\r\n    severity: SeverityLevel,\r\n    component: MongoLoggableComponent,\r\n    message: Loggable | string\r\n  ): void {\r\n    if (compareSeverity(severity, this.componentSeverities[component]) > 0) return;\r\n\r\n    let logMessage: Log = { t: new Date(), c: component, s: severity };\r\n    if (typeof message === 'string') {\r\n      logMessage.message = message;\r\n    } else if (typeof message === 'object') {\r\n      if (isLogConvertible(message)) {\r\n        logMessage = { ...logMessage, ...message.toLog() };\r\n      } else {\r\n        logMessage = { ...logMessage, ...defaultLogTransform(message, this.maxDocumentLength) };\r\n      }\r\n    }\r\n    this.logDestination.write(logMessage);\r\n  }\r\n\r\n  /**\r\n   * Merges options set through environment variables and the MongoClient, preferring environment\r\n   * variables when both are set, and substituting defaults for values not set. Options set in\r\n   * constructor take precedence over both environment variables and MongoClient options.\r\n   *\r\n   * @remarks\r\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\r\n   * the default severity.\r\n   *\r\n   * @param envOptions - options set for the logger from the environment\r\n   * @param clientOptions - options set for the logger in the MongoClient options\r\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\r\n   */\r\n  static resolveOptions(\r\n    envOptions: MongoLoggerEnvOptions,\r\n    clientOptions: MongoLoggerMongoClientOptions\r\n  ): MongoLoggerOptions {\r\n    // client options take precedence over env options\r\n    const combinedOptions = {\r\n      ...envOptions,\r\n      ...clientOptions,\r\n      mongodbLogPath: resolveLogPath(envOptions, clientOptions)\r\n    };\r\n    const defaultSeverity =\r\n      parseSeverityFromString(combinedOptions.MONGODB_LOG_ALL) ?? SeverityLevel.OFF;\r\n\r\n    return {\r\n      componentSeverities: {\r\n        command: parseSeverityFromString(combinedOptions.MONGODB_LOG_COMMAND) ?? defaultSeverity,\r\n        topology: parseSeverityFromString(combinedOptions.MONGODB_LOG_TOPOLOGY) ?? defaultSeverity,\r\n        serverSelection:\r\n          parseSeverityFromString(combinedOptions.MONGODB_LOG_SERVER_SELECTION) ?? defaultSeverity,\r\n        connection:\r\n          parseSeverityFromString(combinedOptions.MONGODB_LOG_CONNECTION) ?? defaultSeverity,\r\n        default: defaultSeverity\r\n      },\r\n      maxDocumentLength:\r\n        parseUnsignedInteger(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ?? 1000,\r\n      logDestination: combinedOptions.mongodbLogPath\r\n    };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}