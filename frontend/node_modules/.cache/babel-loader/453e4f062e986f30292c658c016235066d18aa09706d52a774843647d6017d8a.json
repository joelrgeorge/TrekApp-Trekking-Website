{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CreateSearchIndexesOperation = void 0;\nconst operation_1 = require(\"../operation\");\n/** @internal */\nclass CreateSearchIndexesOperation extends operation_1.AbstractCallbackOperation {\n  constructor(collection, descriptions) {\n    super();\n    this.collection = collection;\n    this.descriptions = descriptions;\n  }\n  executeCallback(server, session, callback) {\n    const namespace = this.collection.fullNamespace;\n    const command = {\n      createSearchIndexes: namespace.collection,\n      indexes: this.descriptions\n    };\n    server.command(namespace, command, {\n      session\n    }, (err, res) => {\n      if (err || !res) {\n        callback(err);\n        return;\n      }\n      const indexesCreated = res?.indexesCreated ?? [];\n      callback(undefined, indexesCreated.map(({\n        name\n      }) => name));\n    });\n  }\n}\nexports.CreateSearchIndexesOperation = CreateSearchIndexesOperation;","map":{"version":3,"mappings":";;;;;;AAMA;AAaA;AACA,MAAaA,4BAA6B,SAAQC,qCAAmC;EACnFC,YACmBC,UAAsB,EACtBC,YAAmD;IAEpE,KAAK,EAAE;IAHU,eAAU,GAAVD,UAAU;IACV,iBAAY,GAAZC,YAAY;EAG/B;EAEAC,eAAe,CACbC,MAAc,EACdC,OAAkC,EAClCC,QAA4B;IAE5B,MAAMC,SAAS,GAAG,IAAI,CAACN,UAAU,CAACO,aAAa;IAC/C,MAAMC,OAAO,GAAG;MACdC,mBAAmB,EAAEH,SAAS,CAACN,UAAU;MACzCU,OAAO,EAAE,IAAI,CAACT;KACf;IAEDE,MAAM,CAACK,OAAO,CAACF,SAAS,EAAEE,OAAO,EAAE;MAAEJ;IAAO,CAAE,EAAE,CAACO,GAAG,EAAEC,GAAG,KAAI;MAC3D,IAAID,GAAG,IAAI,CAACC,GAAG,EAAE;QACfP,QAAQ,CAACM,GAAG,CAAC;QACb;;MAGF,MAAME,cAAc,GAA4BD,GAAG,EAAEC,cAAc,IAAI,EAAE;MAEzER,QAAQ,CACNS,SAAS,EACTD,cAAc,CAACE,GAAG,CAAC,CAAC;QAAEC;MAAI,CAAE,KAAKA,IAAI,CAAC,CACvC;IACH,CAAC,CAAC;EACJ;;AAhCFC","names":["CreateSearchIndexesOperation","operation_1","constructor","collection","descriptions","executeCallback","server","session","callback","namespace","fullNamespace","command","createSearchIndexes","indexes","err","res","indexesCreated","undefined","map","name","exports"],"sources":["C:\\Users\\joelg\\Downloads\\MernStack-Tour-Management-main\\MernStack-Tour-Management-main\\tour-management\\node_modules\\mongodb\\src\\operations\\search_indexes\\create.ts"],"sourcesContent":["import type { Document } from 'bson';\r\n\r\nimport type { Collection } from '../../collection';\r\nimport type { Server } from '../../sdam/server';\r\nimport type { ClientSession } from '../../sessions';\r\nimport type { Callback } from '../../utils';\r\nimport { AbstractCallbackOperation } from '../operation';\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface SearchIndexDescription {\r\n  /** The name of the index. */\r\n  name?: string;\r\n\r\n  /** The index definition. */\r\n  definition: Document;\r\n}\r\n\r\n/** @internal */\r\nexport class CreateSearchIndexesOperation extends AbstractCallbackOperation<string[]> {\r\n  constructor(\r\n    private readonly collection: Collection,\r\n    private readonly descriptions: ReadonlyArray<SearchIndexDescription>\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  executeCallback(\r\n    server: Server,\r\n    session: ClientSession | undefined,\r\n    callback: Callback<string[]>\r\n  ): void {\r\n    const namespace = this.collection.fullNamespace;\r\n    const command = {\r\n      createSearchIndexes: namespace.collection,\r\n      indexes: this.descriptions\r\n    };\r\n\r\n    server.command(namespace, command, { session }, (err, res) => {\r\n      if (err || !res) {\r\n        callback(err);\r\n        return;\r\n      }\r\n\r\n      const indexesCreated: Array<{ name: string }> = res?.indexesCreated ?? [];\r\n\r\n      callback(\r\n        undefined,\r\n        indexesCreated.map(({ name }) => name)\r\n      );\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}